package eu.asterics.mw.are.asapi;

/*
 *    AsTeRICS - Assistive Technology Rapid Integration and Construction Set
 *
 *
 *        d8888      88888888888       8888888b.  8888888 .d8888b.   .d8888b.
 *       d88888          888           888   Y88b   888  d88P  Y88b d88P  Y88b
 *      d88P888          888           888    888   888  888    888 Y88b.    
 *     d88P 888 .d8888b  888   .d88b.  888   d88P   888  888         "Y888b. 
 *    d88P  888 88K      888  d8P  Y8b 8888888P"    888  888            "Y88b.
 *   d88P   888 "Y8888b. 888  88888888 888 T88b     888  888    888       "888
 *  d8888888888      X88 888  Y8b.     888  T88b    888  Y88b  d88P Y88b  d88P
 * d88P     888  88888P' 888   "Y8888  888   T88b 8888888 "Y8888P"   "Y8888P"
 *
 *
 *                    homepage: http://www.asterics.org
 *
 *     This project has been partly funded by the European Commission,
 *                      Grant Agreement Number 247730
 *  
 *  
 *         Dual License: MIT or GPL v3.0 with "CLASSPATH" exception
 *         (please refer to the folder LICENSE)
 *
 */

/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AsapiServer {

    public interface Iface {

        public List<String> GetAvailableComponentTypes() throws org.apache.thrift.TException;

        public String GetModel() throws org.apache.thrift.TException;

        public void DeployModel(String modelInXml) throws AsapiException, org.apache.thrift.TException;

        public void DeployFile(String filename) throws AsapiException, org.apache.thrift.TException;

        public void DeployModelWithFile(String filename, String modelInXml)
                throws AsapiException, org.apache.thrift.TException;

        public void NewModel() throws org.apache.thrift.TException;

        public void RunModel() throws AsapiException, org.apache.thrift.TException;

        public void PauseModel() throws AsapiException, org.apache.thrift.TException;

        public void StopModel() throws AsapiException, org.apache.thrift.TException;

        public List<String> GetComponents() throws org.apache.thrift.TException;

        public List<String> GetChannels(String componentID) throws org.apache.thrift.TException;

        public void InsertComponent(String componentID, String componentType)
                throws AsapiException, org.apache.thrift.TException;

        public void RemoveComponent(String componentID) throws AsapiException, org.apache.thrift.TException;

        public List<String> GetAllPorts(String componentID) throws AsapiException, org.apache.thrift.TException;

        public List<String> GetInputPorts(String componentID) throws AsapiException, org.apache.thrift.TException;

        public List<String> GetOutputPorts(String componentID) throws AsapiException, org.apache.thrift.TException;

        public void InsertChannel(String channelID, String sourceComponentID, String sourcePortID,
                String targetComponentID, String targetPortID) throws AsapiException, org.apache.thrift.TException;

        public void RemoveChannel(String channelID) throws AsapiException, org.apache.thrift.TException;

        public List<String> GetComponentPropertyKeys(String componentID) throws org.apache.thrift.TException;

        public String GetComponentProperty(String componentID, String key) throws org.apache.thrift.TException;

        public String SetComponentProperty(String componentID, String key, String value)
                throws org.apache.thrift.TException;

        public List<String> GetPortPropertyKeys(String componentID, String portID) throws org.apache.thrift.TException;

        public String GetPortProperty(String componentID, String portID, String key)
                throws org.apache.thrift.TException;

        public String SetPortProperty(String componentID, String portID, String key, String value)
                throws org.apache.thrift.TException;

        public List<String> GetChannelPropertyKeys(String channelID) throws org.apache.thrift.TException;

        public String GetChannelProperty(String channelID, String key) throws org.apache.thrift.TException;

        public String SetChannelProperty(String channelID, String key, String value)
                throws org.apache.thrift.TException;

        public String RegisterRemoteConsumer(String sourceComponentID, String sourceOutputPortID)
                throws AsapiException, org.apache.thrift.TException;

        public void UnregisterRemoteConsumer(String remoteConsumerID)
                throws AsapiException, org.apache.thrift.TException;

        public String RegisterRemoteProducer(String targetComponentID, String targetInputPortID)
                throws AsapiException, org.apache.thrift.TException;

        public void UnregisterRemoteProducer(String remoteProducerID)
                throws AsapiException, org.apache.thrift.TException;

        public ByteBuffer PollData(String courceComponentID, String sourceOutputPortID)
                throws AsapiException, org.apache.thrift.TException;

        public void SendData(String targetComponentID, String targetInputPortID, ByteBuffer data)
                throws AsapiException, org.apache.thrift.TException;

        public String RegisterLogListener() throws org.apache.thrift.TException;

        public void UnregisterLogListener(String logListenerID) throws org.apache.thrift.TException;

        public void storeModel(String modelInXML, String filename) throws AsapiException, org.apache.thrift.TException;

        public boolean deleteModelFile(String filename) throws AsapiException, org.apache.thrift.TException;

        public List<String> listAllStoredModels() throws AsapiException, org.apache.thrift.TException;

        public String getModelFromFile(String filename) throws AsapiException, org.apache.thrift.TException;

        public String getLogFile() throws org.apache.thrift.TException;

        public List<StatusObject> QueryStatus(boolean fullList) throws org.apache.thrift.TException;

        public List<String> getRuntimePropertyList(String componentID, String key)
                throws AsapiException, org.apache.thrift.TException;

        public List<String> getBundleDescriptors() throws AsapiException, org.apache.thrift.TException;

        public int Ping() throws AsapiException, org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void GetAvailableComponentTypes(
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetAvailableComponentTypes_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void GetModel(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetModel_call> resultHandler)
                throws org.apache.thrift.TException;

        public void DeployModel(String modelInXml,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.DeployModel_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void DeployFile(String filename,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.DeployFile_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void DeployModelWithFile(String filename, String modelInXml,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.DeployModelWithFile_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void NewModel(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.NewModel_call> resultHandler)
                throws org.apache.thrift.TException;

        public void RunModel(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RunModel_call> resultHandler)
                throws org.apache.thrift.TException;

        public void PauseModel(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.PauseModel_call> resultHandler)
                throws org.apache.thrift.TException;

        public void StopModel(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.StopModel_call> resultHandler)
                throws org.apache.thrift.TException;

        public void GetComponents(
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetComponents_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void GetChannels(String componentID,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetChannels_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void InsertComponent(String componentID, String componentType,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.InsertComponent_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void RemoveComponent(String componentID,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RemoveComponent_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void GetAllPorts(String componentID,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetAllPorts_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void GetInputPorts(String componentID,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetInputPorts_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void GetOutputPorts(String componentID,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetOutputPorts_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void InsertChannel(String channelID, String sourceComponentID, String sourcePortID,
                String targetComponentID, String targetPortID,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.InsertChannel_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void RemoveChannel(String channelID,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RemoveChannel_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void GetComponentPropertyKeys(String componentID,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetComponentPropertyKeys_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void GetComponentProperty(String componentID, String key,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetComponentProperty_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void SetComponentProperty(String componentID, String key, String value,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetComponentProperty_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void GetPortPropertyKeys(String componentID, String portID,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetPortPropertyKeys_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void GetPortProperty(String componentID, String portID, String key,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetPortProperty_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void SetPortProperty(String componentID, String portID, String key, String value,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetPortProperty_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void GetChannelPropertyKeys(String channelID,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetChannelPropertyKeys_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void GetChannelProperty(String channelID, String key,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetChannelProperty_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void SetChannelProperty(String channelID, String key, String value,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetChannelProperty_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void RegisterRemoteConsumer(String sourceComponentID, String sourceOutputPortID,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RegisterRemoteConsumer_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void UnregisterRemoteConsumer(String remoteConsumerID,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.UnregisterRemoteConsumer_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void RegisterRemoteProducer(String targetComponentID, String targetInputPortID,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RegisterRemoteProducer_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void UnregisterRemoteProducer(String remoteProducerID,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.UnregisterRemoteProducer_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void PollData(String courceComponentID, String sourceOutputPortID,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.PollData_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void SendData(String targetComponentID, String targetInputPortID, ByteBuffer data,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SendData_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void RegisterLogListener(
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RegisterLogListener_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void UnregisterLogListener(String logListenerID,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.UnregisterLogListener_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void storeModel(String modelInXML, String filename,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.storeModel_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void deleteModelFile(String filename,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteModelFile_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void listAllStoredModels(
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listAllStoredModels_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void getModelFromFile(String filename,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getModelFromFile_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void getLogFile(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getLogFile_call> resultHandler)
                throws org.apache.thrift.TException;

        public void QueryStatus(boolean fullList,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.QueryStatus_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void getRuntimePropertyList(String componentID, String key,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRuntimePropertyList_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void getBundleDescriptors(
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getBundleDescriptors_call> resultHandler)
                        throws org.apache.thrift.TException;

        public void Ping(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.Ping_call> resultHandler)
                throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
                    org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public List<String> GetAvailableComponentTypes() throws org.apache.thrift.TException {
            send_GetAvailableComponentTypes();
            return recv_GetAvailableComponentTypes();
        }

        public void send_GetAvailableComponentTypes() throws org.apache.thrift.TException {
            GetAvailableComponentTypes_args args = new GetAvailableComponentTypes_args();
            sendBase("GetAvailableComponentTypes", args);
        }

        public List<String> recv_GetAvailableComponentTypes() throws org.apache.thrift.TException {
            GetAvailableComponentTypes_result result = new GetAvailableComponentTypes_result();
            receiveBase(result, "GetAvailableComponentTypes");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "GetAvailableComponentTypes failed: unknown result");
        }

        public String GetModel() throws org.apache.thrift.TException {
            send_GetModel();
            return recv_GetModel();
        }

        public void send_GetModel() throws org.apache.thrift.TException {
            GetModel_args args = new GetModel_args();
            sendBase("GetModel", args);
        }

        public String recv_GetModel() throws org.apache.thrift.TException {
            GetModel_result result = new GetModel_result();
            receiveBase(result, "GetModel");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "GetModel failed: unknown result");
        }

        public void DeployModel(String modelInXml) throws AsapiException, org.apache.thrift.TException {
            send_DeployModel(modelInXml);
            recv_DeployModel();
        }

        public void send_DeployModel(String modelInXml) throws org.apache.thrift.TException {
            DeployModel_args args = new DeployModel_args();
            args.setModelInXml(modelInXml);
            sendBase("DeployModel", args);
        }

        public void recv_DeployModel() throws AsapiException, org.apache.thrift.TException {
            DeployModel_result result = new DeployModel_result();
            receiveBase(result, "DeployModel");
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            return;
        }

        public void DeployFile(String filename) throws AsapiException, org.apache.thrift.TException {
            send_DeployFile(filename);
            recv_DeployFile();
        }

        public void send_DeployFile(String filename) throws org.apache.thrift.TException {
            DeployFile_args args = new DeployFile_args();
            args.setFilename(filename);
            sendBase("DeployFile", args);
        }

        public void recv_DeployFile() throws AsapiException, org.apache.thrift.TException {
            DeployFile_result result = new DeployFile_result();
            receiveBase(result, "DeployFile");
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            return;
        }

        public void DeployModelWithFile(String filename, String modelInXml)
                throws AsapiException, org.apache.thrift.TException {
            send_DeployModelWithFile(filename, modelInXml);
            recv_DeployModelWithFile();
        }

        public void send_DeployModelWithFile(String filename, String modelInXml) throws org.apache.thrift.TException {
            DeployModelWithFile_args args = new DeployModelWithFile_args();
            args.setFilename(filename);
            args.setModelInXml(modelInXml);
            sendBase("DeployModelWithFile", args);
        }

        public void recv_DeployModelWithFile() throws AsapiException, org.apache.thrift.TException {
            DeployModelWithFile_result result = new DeployModelWithFile_result();
            receiveBase(result, "DeployModelWithFile");
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            return;
        }

        public void NewModel() throws org.apache.thrift.TException {
            send_NewModel();
            recv_NewModel();
        }

        public void send_NewModel() throws org.apache.thrift.TException {
            NewModel_args args = new NewModel_args();
            sendBase("NewModel", args);
        }

        public void recv_NewModel() throws org.apache.thrift.TException {
            NewModel_result result = new NewModel_result();
            receiveBase(result, "NewModel");
            return;
        }

        public void RunModel() throws AsapiException, org.apache.thrift.TException {
            send_RunModel();
            recv_RunModel();
        }

        public void send_RunModel() throws org.apache.thrift.TException {
            RunModel_args args = new RunModel_args();
            sendBase("RunModel", args);
        }

        public void recv_RunModel() throws AsapiException, org.apache.thrift.TException {
            RunModel_result result = new RunModel_result();
            receiveBase(result, "RunModel");
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            return;
        }

        public void PauseModel() throws AsapiException, org.apache.thrift.TException {
            send_PauseModel();
            recv_PauseModel();
        }

        public void send_PauseModel() throws org.apache.thrift.TException {
            PauseModel_args args = new PauseModel_args();
            sendBase("PauseModel", args);
        }

        public void recv_PauseModel() throws AsapiException, org.apache.thrift.TException {
            PauseModel_result result = new PauseModel_result();
            receiveBase(result, "PauseModel");
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            return;
        }

        public void StopModel() throws AsapiException, org.apache.thrift.TException {
            send_StopModel();
            recv_StopModel();
        }

        public void send_StopModel() throws org.apache.thrift.TException {
            StopModel_args args = new StopModel_args();
            sendBase("StopModel", args);
        }

        public void recv_StopModel() throws AsapiException, org.apache.thrift.TException {
            StopModel_result result = new StopModel_result();
            receiveBase(result, "StopModel");
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            return;
        }

        public List<String> GetComponents() throws org.apache.thrift.TException {
            send_GetComponents();
            return recv_GetComponents();
        }

        public void send_GetComponents() throws org.apache.thrift.TException {
            GetComponents_args args = new GetComponents_args();
            sendBase("GetComponents", args);
        }

        public List<String> recv_GetComponents() throws org.apache.thrift.TException {
            GetComponents_result result = new GetComponents_result();
            receiveBase(result, "GetComponents");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "GetComponents failed: unknown result");
        }

        public List<String> GetChannels(String componentID) throws org.apache.thrift.TException {
            send_GetChannels(componentID);
            return recv_GetChannels();
        }

        public void send_GetChannels(String componentID) throws org.apache.thrift.TException {
            GetChannels_args args = new GetChannels_args();
            args.setComponentID(componentID);
            sendBase("GetChannels", args);
        }

        public List<String> recv_GetChannels() throws org.apache.thrift.TException {
            GetChannels_result result = new GetChannels_result();
            receiveBase(result, "GetChannels");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "GetChannels failed: unknown result");
        }

        public void InsertComponent(String componentID, String componentType)
                throws AsapiException, org.apache.thrift.TException {
            send_InsertComponent(componentID, componentType);
            recv_InsertComponent();
        }

        public void send_InsertComponent(String componentID, String componentType) throws org.apache.thrift.TException {
            InsertComponent_args args = new InsertComponent_args();
            args.setComponentID(componentID);
            args.setComponentType(componentType);
            sendBase("InsertComponent", args);
        }

        public void recv_InsertComponent() throws AsapiException, org.apache.thrift.TException {
            InsertComponent_result result = new InsertComponent_result();
            receiveBase(result, "InsertComponent");
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            return;
        }

        public void RemoveComponent(String componentID) throws AsapiException, org.apache.thrift.TException {
            send_RemoveComponent(componentID);
            recv_RemoveComponent();
        }

        public void send_RemoveComponent(String componentID) throws org.apache.thrift.TException {
            RemoveComponent_args args = new RemoveComponent_args();
            args.setComponentID(componentID);
            sendBase("RemoveComponent", args);
        }

        public void recv_RemoveComponent() throws AsapiException, org.apache.thrift.TException {
            RemoveComponent_result result = new RemoveComponent_result();
            receiveBase(result, "RemoveComponent");
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            return;
        }

        public List<String> GetAllPorts(String componentID) throws AsapiException, org.apache.thrift.TException {
            send_GetAllPorts(componentID);
            return recv_GetAllPorts();
        }

        public void send_GetAllPorts(String componentID) throws org.apache.thrift.TException {
            GetAllPorts_args args = new GetAllPorts_args();
            args.setComponentID(componentID);
            sendBase("GetAllPorts", args);
        }

        public List<String> recv_GetAllPorts() throws AsapiException, org.apache.thrift.TException {
            GetAllPorts_result result = new GetAllPorts_result();
            receiveBase(result, "GetAllPorts");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "GetAllPorts failed: unknown result");
        }

        public List<String> GetInputPorts(String componentID) throws AsapiException, org.apache.thrift.TException {
            send_GetInputPorts(componentID);
            return recv_GetInputPorts();
        }

        public void send_GetInputPorts(String componentID) throws org.apache.thrift.TException {
            GetInputPorts_args args = new GetInputPorts_args();
            args.setComponentID(componentID);
            sendBase("GetInputPorts", args);
        }

        public List<String> recv_GetInputPorts() throws AsapiException, org.apache.thrift.TException {
            GetInputPorts_result result = new GetInputPorts_result();
            receiveBase(result, "GetInputPorts");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "GetInputPorts failed: unknown result");
        }

        public List<String> GetOutputPorts(String componentID) throws AsapiException, org.apache.thrift.TException {
            send_GetOutputPorts(componentID);
            return recv_GetOutputPorts();
        }

        public void send_GetOutputPorts(String componentID) throws org.apache.thrift.TException {
            GetOutputPorts_args args = new GetOutputPorts_args();
            args.setComponentID(componentID);
            sendBase("GetOutputPorts", args);
        }

        public List<String> recv_GetOutputPorts() throws AsapiException, org.apache.thrift.TException {
            GetOutputPorts_result result = new GetOutputPorts_result();
            receiveBase(result, "GetOutputPorts");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "GetOutputPorts failed: unknown result");
        }

        public void InsertChannel(String channelID, String sourceComponentID, String sourcePortID,
                String targetComponentID, String targetPortID) throws AsapiException, org.apache.thrift.TException {
            send_InsertChannel(channelID, sourceComponentID, sourcePortID, targetComponentID, targetPortID);
            recv_InsertChannel();
        }

        public void send_InsertChannel(String channelID, String sourceComponentID, String sourcePortID,
                String targetComponentID, String targetPortID) throws org.apache.thrift.TException {
            InsertChannel_args args = new InsertChannel_args();
            args.setChannelID(channelID);
            args.setSourceComponentID(sourceComponentID);
            args.setSourcePortID(sourcePortID);
            args.setTargetComponentID(targetComponentID);
            args.setTargetPortID(targetPortID);
            sendBase("InsertChannel", args);
        }

        public void recv_InsertChannel() throws AsapiException, org.apache.thrift.TException {
            InsertChannel_result result = new InsertChannel_result();
            receiveBase(result, "InsertChannel");
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            return;
        }

        public void RemoveChannel(String channelID) throws AsapiException, org.apache.thrift.TException {
            send_RemoveChannel(channelID);
            recv_RemoveChannel();
        }

        public void send_RemoveChannel(String channelID) throws org.apache.thrift.TException {
            RemoveChannel_args args = new RemoveChannel_args();
            args.setChannelID(channelID);
            sendBase("RemoveChannel", args);
        }

        public void recv_RemoveChannel() throws AsapiException, org.apache.thrift.TException {
            RemoveChannel_result result = new RemoveChannel_result();
            receiveBase(result, "RemoveChannel");
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            return;
        }

        public List<String> GetComponentPropertyKeys(String componentID) throws org.apache.thrift.TException {
            send_GetComponentPropertyKeys(componentID);
            return recv_GetComponentPropertyKeys();
        }

        public void send_GetComponentPropertyKeys(String componentID) throws org.apache.thrift.TException {
            GetComponentPropertyKeys_args args = new GetComponentPropertyKeys_args();
            args.setComponentID(componentID);
            sendBase("GetComponentPropertyKeys", args);
        }

        public List<String> recv_GetComponentPropertyKeys() throws org.apache.thrift.TException {
            GetComponentPropertyKeys_result result = new GetComponentPropertyKeys_result();
            receiveBase(result, "GetComponentPropertyKeys");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "GetComponentPropertyKeys failed: unknown result");
        }

        public String GetComponentProperty(String componentID, String key) throws org.apache.thrift.TException {
            send_GetComponentProperty(componentID, key);
            return recv_GetComponentProperty();
        }

        public void send_GetComponentProperty(String componentID, String key) throws org.apache.thrift.TException {
            GetComponentProperty_args args = new GetComponentProperty_args();
            args.setComponentID(componentID);
            args.setKey(key);
            sendBase("GetComponentProperty", args);
        }

        public String recv_GetComponentProperty() throws org.apache.thrift.TException {
            GetComponentProperty_result result = new GetComponentProperty_result();
            receiveBase(result, "GetComponentProperty");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "GetComponentProperty failed: unknown result");
        }

        public String SetComponentProperty(String componentID, String key, String value)
                throws org.apache.thrift.TException {
            send_SetComponentProperty(componentID, key, value);
            return recv_SetComponentProperty();
        }

        public void send_SetComponentProperty(String componentID, String key, String value)
                throws org.apache.thrift.TException {
            SetComponentProperty_args args = new SetComponentProperty_args();
            args.setComponentID(componentID);
            args.setKey(key);
            args.setValue(value);
            sendBase("SetComponentProperty", args);
        }

        public String recv_SetComponentProperty() throws org.apache.thrift.TException {
            SetComponentProperty_result result = new SetComponentProperty_result();
            receiveBase(result, "SetComponentProperty");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "SetComponentProperty failed: unknown result");
        }

        public List<String> GetPortPropertyKeys(String componentID, String portID) throws org.apache.thrift.TException {
            send_GetPortPropertyKeys(componentID, portID);
            return recv_GetPortPropertyKeys();
        }

        public void send_GetPortPropertyKeys(String componentID, String portID) throws org.apache.thrift.TException {
            GetPortPropertyKeys_args args = new GetPortPropertyKeys_args();
            args.setComponentID(componentID);
            args.setPortID(portID);
            sendBase("GetPortPropertyKeys", args);
        }

        public List<String> recv_GetPortPropertyKeys() throws org.apache.thrift.TException {
            GetPortPropertyKeys_result result = new GetPortPropertyKeys_result();
            receiveBase(result, "GetPortPropertyKeys");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "GetPortPropertyKeys failed: unknown result");
        }

        public String GetPortProperty(String componentID, String portID, String key)
                throws org.apache.thrift.TException {
            send_GetPortProperty(componentID, portID, key);
            return recv_GetPortProperty();
        }

        public void send_GetPortProperty(String componentID, String portID, String key)
                throws org.apache.thrift.TException {
            GetPortProperty_args args = new GetPortProperty_args();
            args.setComponentID(componentID);
            args.setPortID(portID);
            args.setKey(key);
            sendBase("GetPortProperty", args);
        }

        public String recv_GetPortProperty() throws org.apache.thrift.TException {
            GetPortProperty_result result = new GetPortProperty_result();
            receiveBase(result, "GetPortProperty");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "GetPortProperty failed: unknown result");
        }

        public String SetPortProperty(String componentID, String portID, String key, String value)
                throws org.apache.thrift.TException {
            send_SetPortProperty(componentID, portID, key, value);
            return recv_SetPortProperty();
        }

        public void send_SetPortProperty(String componentID, String portID, String key, String value)
                throws org.apache.thrift.TException {
            SetPortProperty_args args = new SetPortProperty_args();
            args.setComponentID(componentID);
            args.setPortID(portID);
            args.setKey(key);
            args.setValue(value);
            sendBase("SetPortProperty", args);
        }

        public String recv_SetPortProperty() throws org.apache.thrift.TException {
            SetPortProperty_result result = new SetPortProperty_result();
            receiveBase(result, "SetPortProperty");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "SetPortProperty failed: unknown result");
        }

        public List<String> GetChannelPropertyKeys(String channelID) throws org.apache.thrift.TException {
            send_GetChannelPropertyKeys(channelID);
            return recv_GetChannelPropertyKeys();
        }

        public void send_GetChannelPropertyKeys(String channelID) throws org.apache.thrift.TException {
            GetChannelPropertyKeys_args args = new GetChannelPropertyKeys_args();
            args.setChannelID(channelID);
            sendBase("GetChannelPropertyKeys", args);
        }

        public List<String> recv_GetChannelPropertyKeys() throws org.apache.thrift.TException {
            GetChannelPropertyKeys_result result = new GetChannelPropertyKeys_result();
            receiveBase(result, "GetChannelPropertyKeys");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "GetChannelPropertyKeys failed: unknown result");
        }

        public String GetChannelProperty(String channelID, String key) throws org.apache.thrift.TException {
            send_GetChannelProperty(channelID, key);
            return recv_GetChannelProperty();
        }

        public void send_GetChannelProperty(String channelID, String key) throws org.apache.thrift.TException {
            GetChannelProperty_args args = new GetChannelProperty_args();
            args.setChannelID(channelID);
            args.setKey(key);
            sendBase("GetChannelProperty", args);
        }

        public String recv_GetChannelProperty() throws org.apache.thrift.TException {
            GetChannelProperty_result result = new GetChannelProperty_result();
            receiveBase(result, "GetChannelProperty");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "GetChannelProperty failed: unknown result");
        }

        public String SetChannelProperty(String channelID, String key, String value)
                throws org.apache.thrift.TException {
            send_SetChannelProperty(channelID, key, value);
            return recv_SetChannelProperty();
        }

        public void send_SetChannelProperty(String channelID, String key, String value)
                throws org.apache.thrift.TException {
            SetChannelProperty_args args = new SetChannelProperty_args();
            args.setChannelID(channelID);
            args.setKey(key);
            args.setValue(value);
            sendBase("SetChannelProperty", args);
        }

        public String recv_SetChannelProperty() throws org.apache.thrift.TException {
            SetChannelProperty_result result = new SetChannelProperty_result();
            receiveBase(result, "SetChannelProperty");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "SetChannelProperty failed: unknown result");
        }

        public String RegisterRemoteConsumer(String sourceComponentID, String sourceOutputPortID)
                throws AsapiException, org.apache.thrift.TException {
            send_RegisterRemoteConsumer(sourceComponentID, sourceOutputPortID);
            return recv_RegisterRemoteConsumer();
        }

        public void send_RegisterRemoteConsumer(String sourceComponentID, String sourceOutputPortID)
                throws org.apache.thrift.TException {
            RegisterRemoteConsumer_args args = new RegisterRemoteConsumer_args();
            args.setSourceComponentID(sourceComponentID);
            args.setSourceOutputPortID(sourceOutputPortID);
            sendBase("RegisterRemoteConsumer", args);
        }

        public String recv_RegisterRemoteConsumer() throws AsapiException, org.apache.thrift.TException {
            RegisterRemoteConsumer_result result = new RegisterRemoteConsumer_result();
            receiveBase(result, "RegisterRemoteConsumer");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "RegisterRemoteConsumer failed: unknown result");
        }

        public void UnregisterRemoteConsumer(String remoteConsumerID)
                throws AsapiException, org.apache.thrift.TException {
            send_UnregisterRemoteConsumer(remoteConsumerID);
            recv_UnregisterRemoteConsumer();
        }

        public void send_UnregisterRemoteConsumer(String remoteConsumerID) throws org.apache.thrift.TException {
            UnregisterRemoteConsumer_args args = new UnregisterRemoteConsumer_args();
            args.setRemoteConsumerID(remoteConsumerID);
            sendBase("UnregisterRemoteConsumer", args);
        }

        public void recv_UnregisterRemoteConsumer() throws AsapiException, org.apache.thrift.TException {
            UnregisterRemoteConsumer_result result = new UnregisterRemoteConsumer_result();
            receiveBase(result, "UnregisterRemoteConsumer");
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            return;
        }

        public String RegisterRemoteProducer(String targetComponentID, String targetInputPortID)
                throws AsapiException, org.apache.thrift.TException {
            send_RegisterRemoteProducer(targetComponentID, targetInputPortID);
            return recv_RegisterRemoteProducer();
        }

        public void send_RegisterRemoteProducer(String targetComponentID, String targetInputPortID)
                throws org.apache.thrift.TException {
            RegisterRemoteProducer_args args = new RegisterRemoteProducer_args();
            args.setTargetComponentID(targetComponentID);
            args.setTargetInputPortID(targetInputPortID);
            sendBase("RegisterRemoteProducer", args);
        }

        public String recv_RegisterRemoteProducer() throws AsapiException, org.apache.thrift.TException {
            RegisterRemoteProducer_result result = new RegisterRemoteProducer_result();
            receiveBase(result, "RegisterRemoteProducer");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "RegisterRemoteProducer failed: unknown result");
        }

        public void UnregisterRemoteProducer(String remoteProducerID)
                throws AsapiException, org.apache.thrift.TException {
            send_UnregisterRemoteProducer(remoteProducerID);
            recv_UnregisterRemoteProducer();
        }

        public void send_UnregisterRemoteProducer(String remoteProducerID) throws org.apache.thrift.TException {
            UnregisterRemoteProducer_args args = new UnregisterRemoteProducer_args();
            args.setRemoteProducerID(remoteProducerID);
            sendBase("UnregisterRemoteProducer", args);
        }

        public void recv_UnregisterRemoteProducer() throws AsapiException, org.apache.thrift.TException {
            UnregisterRemoteProducer_result result = new UnregisterRemoteProducer_result();
            receiveBase(result, "UnregisterRemoteProducer");
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            return;
        }

        public ByteBuffer PollData(String courceComponentID, String sourceOutputPortID)
                throws AsapiException, org.apache.thrift.TException {
            send_PollData(courceComponentID, sourceOutputPortID);
            return recv_PollData();
        }

        public void send_PollData(String courceComponentID, String sourceOutputPortID)
                throws org.apache.thrift.TException {
            PollData_args args = new PollData_args();
            args.setCourceComponentID(courceComponentID);
            args.setSourceOutputPortID(sourceOutputPortID);
            sendBase("PollData", args);
        }

        public ByteBuffer recv_PollData() throws AsapiException, org.apache.thrift.TException {
            PollData_result result = new PollData_result();
            receiveBase(result, "PollData");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "PollData failed: unknown result");
        }

        public void SendData(String targetComponentID, String targetInputPortID, ByteBuffer data)
                throws AsapiException, org.apache.thrift.TException {
            send_SendData(targetComponentID, targetInputPortID, data);
            recv_SendData();
        }

        public void send_SendData(String targetComponentID, String targetInputPortID, ByteBuffer data)
                throws org.apache.thrift.TException {
            SendData_args args = new SendData_args();
            args.setTargetComponentID(targetComponentID);
            args.setTargetInputPortID(targetInputPortID);
            args.setData(data);
            sendBase("SendData", args);
        }

        public void recv_SendData() throws AsapiException, org.apache.thrift.TException {
            SendData_result result = new SendData_result();
            receiveBase(result, "SendData");
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            return;
        }

        public String RegisterLogListener() throws org.apache.thrift.TException {
            send_RegisterLogListener();
            return recv_RegisterLogListener();
        }

        public void send_RegisterLogListener() throws org.apache.thrift.TException {
            RegisterLogListener_args args = new RegisterLogListener_args();
            sendBase("RegisterLogListener", args);
        }

        public String recv_RegisterLogListener() throws org.apache.thrift.TException {
            RegisterLogListener_result result = new RegisterLogListener_result();
            receiveBase(result, "RegisterLogListener");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "RegisterLogListener failed: unknown result");
        }

        public void UnregisterLogListener(String logListenerID) throws org.apache.thrift.TException {
            send_UnregisterLogListener(logListenerID);
            recv_UnregisterLogListener();
        }

        public void send_UnregisterLogListener(String logListenerID) throws org.apache.thrift.TException {
            UnregisterLogListener_args args = new UnregisterLogListener_args();
            args.setLogListenerID(logListenerID);
            sendBase("UnregisterLogListener", args);
        }

        public void recv_UnregisterLogListener() throws org.apache.thrift.TException {
            UnregisterLogListener_result result = new UnregisterLogListener_result();
            receiveBase(result, "UnregisterLogListener");
            return;
        }

        public void storeModel(String modelInXML, String filename) throws AsapiException, org.apache.thrift.TException {
            send_storeModel(modelInXML, filename);
            recv_storeModel();
        }

        public void send_storeModel(String modelInXML, String filename) throws org.apache.thrift.TException {
            storeModel_args args = new storeModel_args();
            args.setModelInXML(modelInXML);
            args.setFilename(filename);
            sendBase("storeModel", args);
        }

        public void recv_storeModel() throws AsapiException, org.apache.thrift.TException {
            storeModel_result result = new storeModel_result();
            receiveBase(result, "storeModel");
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            return;
        }

        public boolean deleteModelFile(String filename) throws AsapiException, org.apache.thrift.TException {
            send_deleteModelFile(filename);
            return recv_deleteModelFile();
        }

        public void send_deleteModelFile(String filename) throws org.apache.thrift.TException {
            deleteModelFile_args args = new deleteModelFile_args();
            args.setFilename(filename);
            sendBase("deleteModelFile", args);
        }

        public boolean recv_deleteModelFile() throws AsapiException, org.apache.thrift.TException {
            deleteModelFile_result result = new deleteModelFile_result();
            receiveBase(result, "deleteModelFile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "deleteModelFile failed: unknown result");
        }

        public List<String> listAllStoredModels() throws AsapiException, org.apache.thrift.TException {
            send_listAllStoredModels();
            return recv_listAllStoredModels();
        }

        public void send_listAllStoredModels() throws org.apache.thrift.TException {
            listAllStoredModels_args args = new listAllStoredModels_args();
            sendBase("listAllStoredModels", args);
        }

        public List<String> recv_listAllStoredModels() throws AsapiException, org.apache.thrift.TException {
            listAllStoredModels_result result = new listAllStoredModels_result();
            receiveBase(result, "listAllStoredModels");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "listAllStoredModels failed: unknown result");
        }

        public String getModelFromFile(String filename) throws AsapiException, org.apache.thrift.TException {
            send_getModelFromFile(filename);
            return recv_getModelFromFile();
        }

        public void send_getModelFromFile(String filename) throws org.apache.thrift.TException {
            getModelFromFile_args args = new getModelFromFile_args();
            args.setFilename(filename);
            sendBase("getModelFromFile", args);
        }

        public String recv_getModelFromFile() throws AsapiException, org.apache.thrift.TException {
            getModelFromFile_result result = new getModelFromFile_result();
            receiveBase(result, "getModelFromFile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "getModelFromFile failed: unknown result");
        }

        public String getLogFile() throws org.apache.thrift.TException {
            send_getLogFile();
            return recv_getLogFile();
        }

        public void send_getLogFile() throws org.apache.thrift.TException {
            getLogFile_args args = new getLogFile_args();
            sendBase("getLogFile", args);
        }

        public String recv_getLogFile() throws org.apache.thrift.TException {
            getLogFile_result result = new getLogFile_result();
            receiveBase(result, "getLogFile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "getLogFile failed: unknown result");
        }

        public List<StatusObject> QueryStatus(boolean fullList) throws org.apache.thrift.TException {
            send_QueryStatus(fullList);
            return recv_QueryStatus();
        }

        public void send_QueryStatus(boolean fullList) throws org.apache.thrift.TException {
            QueryStatus_args args = new QueryStatus_args();
            args.setFullList(fullList);
            sendBase("QueryStatus", args);
        }

        public List<StatusObject> recv_QueryStatus() throws org.apache.thrift.TException {
            QueryStatus_result result = new QueryStatus_result();
            receiveBase(result, "QueryStatus");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "QueryStatus failed: unknown result");
        }

        public List<String> getRuntimePropertyList(String componentID, String key)
                throws AsapiException, org.apache.thrift.TException {
            send_getRuntimePropertyList(componentID, key);
            return recv_getRuntimePropertyList();
        }

        public void send_getRuntimePropertyList(String componentID, String key) throws org.apache.thrift.TException {
            getRuntimePropertyList_args args = new getRuntimePropertyList_args();
            args.setComponentID(componentID);
            args.setKey(key);
            sendBase("getRuntimePropertyList", args);
        }

        public List<String> recv_getRuntimePropertyList() throws AsapiException, org.apache.thrift.TException {
            getRuntimePropertyList_result result = new getRuntimePropertyList_result();
            receiveBase(result, "getRuntimePropertyList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "getRuntimePropertyList failed: unknown result");
        }

        public List<String> getBundleDescriptors() throws AsapiException, org.apache.thrift.TException {
            send_getBundleDescriptors();
            return recv_getBundleDescriptors();
        }

        public void send_getBundleDescriptors() throws org.apache.thrift.TException {
            getBundleDescriptors_args args = new getBundleDescriptors_args();
            sendBase("getBundleDescriptors", args);
        }

        public List<String> recv_getBundleDescriptors() throws AsapiException, org.apache.thrift.TException {
            getBundleDescriptors_result result = new getBundleDescriptors_result();
            receiveBase(result, "getBundleDescriptors");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "getBundleDescriptors failed: unknown result");
        }

        public int Ping() throws AsapiException, org.apache.thrift.TException {
            send_Ping();
            return recv_Ping();
        }

        public void send_Ping() throws org.apache.thrift.TException {
            Ping_args args = new Ping_args();
            sendBase("Ping", args);
        }

        public int recv_Ping() throws AsapiException, org.apache.thrift.TException {
            Ping_result result = new Ping_result();
            receiveBase(result, "Ping");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.asapiEx != null) {
                throw result.asapiEx;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "Ping failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.async.TAsyncClientManager clientManager,
                org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void GetAvailableComponentTypes(
                org.apache.thrift.async.AsyncMethodCallback<GetAvailableComponentTypes_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            GetAvailableComponentTypes_call method_call = new GetAvailableComponentTypes_call(resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class GetAvailableComponentTypes_call extends org.apache.thrift.async.TAsyncMethodCall {
            public GetAvailableComponentTypes_call(
                    org.apache.thrift.async.AsyncMethodCallback<GetAvailableComponentTypes_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAvailableComponentTypes",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                GetAvailableComponentTypes_args args = new GetAvailableComponentTypes_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<String> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_GetAvailableComponentTypes();
            }
        }

        public void GetModel(org.apache.thrift.async.AsyncMethodCallback<GetModel_call> resultHandler)
                throws org.apache.thrift.TException {
            checkReady();
            GetModel_call method_call = new GetModel_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class GetModel_call extends org.apache.thrift.async.TAsyncMethodCall {
            public GetModel_call(org.apache.thrift.async.AsyncMethodCallback<GetModel_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetModel",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                GetModel_args args = new GetModel_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_GetModel();
            }
        }

        public void DeployModel(String modelInXml,
                org.apache.thrift.async.AsyncMethodCallback<DeployModel_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            DeployModel_call method_call = new DeployModel_call(modelInXml, resultHandler, this, ___protocolFactory,
                    ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class DeployModel_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String modelInXml;

            public DeployModel_call(String modelInXml,
                    org.apache.thrift.async.AsyncMethodCallback<DeployModel_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.modelInXml = modelInXml;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeployModel",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                DeployModel_args args = new DeployModel_args();
                args.setModelInXml(modelInXml);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_DeployModel();
            }
        }

        public void DeployFile(String filename,
                org.apache.thrift.async.AsyncMethodCallback<DeployFile_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            DeployFile_call method_call = new DeployFile_call(filename, resultHandler, this, ___protocolFactory,
                    ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class DeployFile_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String filename;

            public DeployFile_call(String filename,
                    org.apache.thrift.async.AsyncMethodCallback<DeployFile_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.filename = filename;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeployFile",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                DeployFile_args args = new DeployFile_args();
                args.setFilename(filename);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_DeployFile();
            }
        }

        public void DeployModelWithFile(String filename, String modelInXml,
                org.apache.thrift.async.AsyncMethodCallback<DeployModelWithFile_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            DeployModelWithFile_call method_call = new DeployModelWithFile_call(filename, modelInXml, resultHandler,
                    this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class DeployModelWithFile_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String filename;
            private String modelInXml;

            public DeployModelWithFile_call(String filename, String modelInXml,
                    org.apache.thrift.async.AsyncMethodCallback<DeployModelWithFile_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.filename = filename;
                this.modelInXml = modelInXml;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeployModelWithFile",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                DeployModelWithFile_args args = new DeployModelWithFile_args();
                args.setFilename(filename);
                args.setModelInXml(modelInXml);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_DeployModelWithFile();
            }
        }

        public void NewModel(org.apache.thrift.async.AsyncMethodCallback<NewModel_call> resultHandler)
                throws org.apache.thrift.TException {
            checkReady();
            NewModel_call method_call = new NewModel_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class NewModel_call extends org.apache.thrift.async.TAsyncMethodCall {
            public NewModel_call(org.apache.thrift.async.AsyncMethodCallback<NewModel_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("NewModel",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                NewModel_args args = new NewModel_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_NewModel();
            }
        }

        public void RunModel(org.apache.thrift.async.AsyncMethodCallback<RunModel_call> resultHandler)
                throws org.apache.thrift.TException {
            checkReady();
            RunModel_call method_call = new RunModel_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class RunModel_call extends org.apache.thrift.async.TAsyncMethodCall {
            public RunModel_call(org.apache.thrift.async.AsyncMethodCallback<RunModel_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RunModel",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                RunModel_args args = new RunModel_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_RunModel();
            }
        }

        public void PauseModel(org.apache.thrift.async.AsyncMethodCallback<PauseModel_call> resultHandler)
                throws org.apache.thrift.TException {
            checkReady();
            PauseModel_call method_call = new PauseModel_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class PauseModel_call extends org.apache.thrift.async.TAsyncMethodCall {
            public PauseModel_call(org.apache.thrift.async.AsyncMethodCallback<PauseModel_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("PauseModel",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                PauseModel_args args = new PauseModel_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_PauseModel();
            }
        }

        public void StopModel(org.apache.thrift.async.AsyncMethodCallback<StopModel_call> resultHandler)
                throws org.apache.thrift.TException {
            checkReady();
            StopModel_call method_call = new StopModel_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class StopModel_call extends org.apache.thrift.async.TAsyncMethodCall {
            public StopModel_call(org.apache.thrift.async.AsyncMethodCallback<StopModel_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("StopModel",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                StopModel_args args = new StopModel_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_StopModel();
            }
        }

        public void GetComponents(org.apache.thrift.async.AsyncMethodCallback<GetComponents_call> resultHandler)
                throws org.apache.thrift.TException {
            checkReady();
            GetComponents_call method_call = new GetComponents_call(resultHandler, this, ___protocolFactory,
                    ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class GetComponents_call extends org.apache.thrift.async.TAsyncMethodCall {
            public GetComponents_call(org.apache.thrift.async.AsyncMethodCallback<GetComponents_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetComponents",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                GetComponents_args args = new GetComponents_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<String> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_GetComponents();
            }
        }

        public void GetChannels(String componentID,
                org.apache.thrift.async.AsyncMethodCallback<GetChannels_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            GetChannels_call method_call = new GetChannels_call(componentID, resultHandler, this, ___protocolFactory,
                    ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class GetChannels_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String componentID;

            public GetChannels_call(String componentID,
                    org.apache.thrift.async.AsyncMethodCallback<GetChannels_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.componentID = componentID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetChannels",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                GetChannels_args args = new GetChannels_args();
                args.setComponentID(componentID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<String> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_GetChannels();
            }
        }

        public void InsertComponent(String componentID, String componentType,
                org.apache.thrift.async.AsyncMethodCallback<InsertComponent_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            InsertComponent_call method_call = new InsertComponent_call(componentID, componentType, resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class InsertComponent_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String componentID;
            private String componentType;

            public InsertComponent_call(String componentID, String componentType,
                    org.apache.thrift.async.AsyncMethodCallback<InsertComponent_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.componentID = componentID;
                this.componentType = componentType;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("InsertComponent",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                InsertComponent_args args = new InsertComponent_args();
                args.setComponentID(componentID);
                args.setComponentType(componentType);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_InsertComponent();
            }
        }

        public void RemoveComponent(String componentID,
                org.apache.thrift.async.AsyncMethodCallback<RemoveComponent_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            RemoveComponent_call method_call = new RemoveComponent_call(componentID, resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class RemoveComponent_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String componentID;

            public RemoveComponent_call(String componentID,
                    org.apache.thrift.async.AsyncMethodCallback<RemoveComponent_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.componentID = componentID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RemoveComponent",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                RemoveComponent_args args = new RemoveComponent_args();
                args.setComponentID(componentID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_RemoveComponent();
            }
        }

        public void GetAllPorts(String componentID,
                org.apache.thrift.async.AsyncMethodCallback<GetAllPorts_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            GetAllPorts_call method_call = new GetAllPorts_call(componentID, resultHandler, this, ___protocolFactory,
                    ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class GetAllPorts_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String componentID;

            public GetAllPorts_call(String componentID,
                    org.apache.thrift.async.AsyncMethodCallback<GetAllPorts_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.componentID = componentID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAllPorts",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                GetAllPorts_args args = new GetAllPorts_args();
                args.setComponentID(componentID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<String> getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_GetAllPorts();
            }
        }

        public void GetInputPorts(String componentID,
                org.apache.thrift.async.AsyncMethodCallback<GetInputPorts_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            GetInputPorts_call method_call = new GetInputPorts_call(componentID, resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class GetInputPorts_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String componentID;

            public GetInputPorts_call(String componentID,
                    org.apache.thrift.async.AsyncMethodCallback<GetInputPorts_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.componentID = componentID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetInputPorts",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                GetInputPorts_args args = new GetInputPorts_args();
                args.setComponentID(componentID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<String> getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_GetInputPorts();
            }
        }

        public void GetOutputPorts(String componentID,
                org.apache.thrift.async.AsyncMethodCallback<GetOutputPorts_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            GetOutputPorts_call method_call = new GetOutputPorts_call(componentID, resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class GetOutputPorts_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String componentID;

            public GetOutputPorts_call(String componentID,
                    org.apache.thrift.async.AsyncMethodCallback<GetOutputPorts_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.componentID = componentID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetOutputPorts",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                GetOutputPorts_args args = new GetOutputPorts_args();
                args.setComponentID(componentID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<String> getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_GetOutputPorts();
            }
        }

        public void InsertChannel(String channelID, String sourceComponentID, String sourcePortID,
                String targetComponentID, String targetPortID,
                org.apache.thrift.async.AsyncMethodCallback<InsertChannel_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            InsertChannel_call method_call = new InsertChannel_call(channelID, sourceComponentID, sourcePortID,
                    targetComponentID, targetPortID, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class InsertChannel_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String channelID;
            private String sourceComponentID;
            private String sourcePortID;
            private String targetComponentID;
            private String targetPortID;

            public InsertChannel_call(String channelID, String sourceComponentID, String sourcePortID,
                    String targetComponentID, String targetPortID,
                    org.apache.thrift.async.AsyncMethodCallback<InsertChannel_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.channelID = channelID;
                this.sourceComponentID = sourceComponentID;
                this.sourcePortID = sourcePortID;
                this.targetComponentID = targetComponentID;
                this.targetPortID = targetPortID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("InsertChannel",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                InsertChannel_args args = new InsertChannel_args();
                args.setChannelID(channelID);
                args.setSourceComponentID(sourceComponentID);
                args.setSourcePortID(sourcePortID);
                args.setTargetComponentID(targetComponentID);
                args.setTargetPortID(targetPortID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_InsertChannel();
            }
        }

        public void RemoveChannel(String channelID,
                org.apache.thrift.async.AsyncMethodCallback<RemoveChannel_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            RemoveChannel_call method_call = new RemoveChannel_call(channelID, resultHandler, this, ___protocolFactory,
                    ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class RemoveChannel_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String channelID;

            public RemoveChannel_call(String channelID,
                    org.apache.thrift.async.AsyncMethodCallback<RemoveChannel_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.channelID = channelID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RemoveChannel",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                RemoveChannel_args args = new RemoveChannel_args();
                args.setChannelID(channelID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_RemoveChannel();
            }
        }

        public void GetComponentPropertyKeys(String componentID,
                org.apache.thrift.async.AsyncMethodCallback<GetComponentPropertyKeys_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            GetComponentPropertyKeys_call method_call = new GetComponentPropertyKeys_call(componentID, resultHandler,
                    this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class GetComponentPropertyKeys_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String componentID;

            public GetComponentPropertyKeys_call(String componentID,
                    org.apache.thrift.async.AsyncMethodCallback<GetComponentPropertyKeys_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.componentID = componentID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetComponentPropertyKeys",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                GetComponentPropertyKeys_args args = new GetComponentPropertyKeys_args();
                args.setComponentID(componentID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<String> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_GetComponentPropertyKeys();
            }
        }

        public void GetComponentProperty(String componentID, String key,
                org.apache.thrift.async.AsyncMethodCallback<GetComponentProperty_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            GetComponentProperty_call method_call = new GetComponentProperty_call(componentID, key, resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class GetComponentProperty_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String componentID;
            private String key;

            public GetComponentProperty_call(String componentID, String key,
                    org.apache.thrift.async.AsyncMethodCallback<GetComponentProperty_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.componentID = componentID;
                this.key = key;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetComponentProperty",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                GetComponentProperty_args args = new GetComponentProperty_args();
                args.setComponentID(componentID);
                args.setKey(key);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_GetComponentProperty();
            }
        }

        public void SetComponentProperty(String componentID, String key, String value,
                org.apache.thrift.async.AsyncMethodCallback<SetComponentProperty_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            SetComponentProperty_call method_call = new SetComponentProperty_call(componentID, key, value,
                    resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class SetComponentProperty_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String componentID;
            private String key;
            private String value;

            public SetComponentProperty_call(String componentID, String key, String value,
                    org.apache.thrift.async.AsyncMethodCallback<SetComponentProperty_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.componentID = componentID;
                this.key = key;
                this.value = value;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetComponentProperty",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                SetComponentProperty_args args = new SetComponentProperty_args();
                args.setComponentID(componentID);
                args.setKey(key);
                args.setValue(value);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_SetComponentProperty();
            }
        }

        public void GetPortPropertyKeys(String componentID, String portID,
                org.apache.thrift.async.AsyncMethodCallback<GetPortPropertyKeys_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            GetPortPropertyKeys_call method_call = new GetPortPropertyKeys_call(componentID, portID, resultHandler,
                    this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class GetPortPropertyKeys_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String componentID;
            private String portID;

            public GetPortPropertyKeys_call(String componentID, String portID,
                    org.apache.thrift.async.AsyncMethodCallback<GetPortPropertyKeys_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.componentID = componentID;
                this.portID = portID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetPortPropertyKeys",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                GetPortPropertyKeys_args args = new GetPortPropertyKeys_args();
                args.setComponentID(componentID);
                args.setPortID(portID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<String> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_GetPortPropertyKeys();
            }
        }

        public void GetPortProperty(String componentID, String portID, String key,
                org.apache.thrift.async.AsyncMethodCallback<GetPortProperty_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            GetPortProperty_call method_call = new GetPortProperty_call(componentID, portID, key, resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class GetPortProperty_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String componentID;
            private String portID;
            private String key;

            public GetPortProperty_call(String componentID, String portID, String key,
                    org.apache.thrift.async.AsyncMethodCallback<GetPortProperty_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.componentID = componentID;
                this.portID = portID;
                this.key = key;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetPortProperty",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                GetPortProperty_args args = new GetPortProperty_args();
                args.setComponentID(componentID);
                args.setPortID(portID);
                args.setKey(key);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_GetPortProperty();
            }
        }

        public void SetPortProperty(String componentID, String portID, String key, String value,
                org.apache.thrift.async.AsyncMethodCallback<SetPortProperty_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            SetPortProperty_call method_call = new SetPortProperty_call(componentID, portID, key, value, resultHandler,
                    this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class SetPortProperty_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String componentID;
            private String portID;
            private String key;
            private String value;

            public SetPortProperty_call(String componentID, String portID, String key, String value,
                    org.apache.thrift.async.AsyncMethodCallback<SetPortProperty_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.componentID = componentID;
                this.portID = portID;
                this.key = key;
                this.value = value;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetPortProperty",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                SetPortProperty_args args = new SetPortProperty_args();
                args.setComponentID(componentID);
                args.setPortID(portID);
                args.setKey(key);
                args.setValue(value);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_SetPortProperty();
            }
        }

        public void GetChannelPropertyKeys(String channelID,
                org.apache.thrift.async.AsyncMethodCallback<GetChannelPropertyKeys_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            GetChannelPropertyKeys_call method_call = new GetChannelPropertyKeys_call(channelID, resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class GetChannelPropertyKeys_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String channelID;

            public GetChannelPropertyKeys_call(String channelID,
                    org.apache.thrift.async.AsyncMethodCallback<GetChannelPropertyKeys_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.channelID = channelID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetChannelPropertyKeys",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                GetChannelPropertyKeys_args args = new GetChannelPropertyKeys_args();
                args.setChannelID(channelID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<String> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_GetChannelPropertyKeys();
            }
        }

        public void GetChannelProperty(String channelID, String key,
                org.apache.thrift.async.AsyncMethodCallback<GetChannelProperty_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            GetChannelProperty_call method_call = new GetChannelProperty_call(channelID, key, resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class GetChannelProperty_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String channelID;
            private String key;

            public GetChannelProperty_call(String channelID, String key,
                    org.apache.thrift.async.AsyncMethodCallback<GetChannelProperty_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.channelID = channelID;
                this.key = key;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetChannelProperty",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                GetChannelProperty_args args = new GetChannelProperty_args();
                args.setChannelID(channelID);
                args.setKey(key);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_GetChannelProperty();
            }
        }

        public void SetChannelProperty(String channelID, String key, String value,
                org.apache.thrift.async.AsyncMethodCallback<SetChannelProperty_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            SetChannelProperty_call method_call = new SetChannelProperty_call(channelID, key, value, resultHandler,
                    this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class SetChannelProperty_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String channelID;
            private String key;
            private String value;

            public SetChannelProperty_call(String channelID, String key, String value,
                    org.apache.thrift.async.AsyncMethodCallback<SetChannelProperty_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.channelID = channelID;
                this.key = key;
                this.value = value;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetChannelProperty",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                SetChannelProperty_args args = new SetChannelProperty_args();
                args.setChannelID(channelID);
                args.setKey(key);
                args.setValue(value);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_SetChannelProperty();
            }
        }

        public void RegisterRemoteConsumer(String sourceComponentID, String sourceOutputPortID,
                org.apache.thrift.async.AsyncMethodCallback<RegisterRemoteConsumer_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            RegisterRemoteConsumer_call method_call = new RegisterRemoteConsumer_call(sourceComponentID,
                    sourceOutputPortID, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class RegisterRemoteConsumer_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String sourceComponentID;
            private String sourceOutputPortID;

            public RegisterRemoteConsumer_call(String sourceComponentID, String sourceOutputPortID,
                    org.apache.thrift.async.AsyncMethodCallback<RegisterRemoteConsumer_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.sourceComponentID = sourceComponentID;
                this.sourceOutputPortID = sourceOutputPortID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RegisterRemoteConsumer",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                RegisterRemoteConsumer_args args = new RegisterRemoteConsumer_args();
                args.setSourceComponentID(sourceComponentID);
                args.setSourceOutputPortID(sourceOutputPortID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_RegisterRemoteConsumer();
            }
        }

        public void UnregisterRemoteConsumer(String remoteConsumerID,
                org.apache.thrift.async.AsyncMethodCallback<UnregisterRemoteConsumer_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            UnregisterRemoteConsumer_call method_call = new UnregisterRemoteConsumer_call(remoteConsumerID,
                    resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class UnregisterRemoteConsumer_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String remoteConsumerID;

            public UnregisterRemoteConsumer_call(String remoteConsumerID,
                    org.apache.thrift.async.AsyncMethodCallback<UnregisterRemoteConsumer_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.remoteConsumerID = remoteConsumerID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UnregisterRemoteConsumer",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                UnregisterRemoteConsumer_args args = new UnregisterRemoteConsumer_args();
                args.setRemoteConsumerID(remoteConsumerID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_UnregisterRemoteConsumer();
            }
        }

        public void RegisterRemoteProducer(String targetComponentID, String targetInputPortID,
                org.apache.thrift.async.AsyncMethodCallback<RegisterRemoteProducer_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            RegisterRemoteProducer_call method_call = new RegisterRemoteProducer_call(targetComponentID,
                    targetInputPortID, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class RegisterRemoteProducer_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String targetComponentID;
            private String targetInputPortID;

            public RegisterRemoteProducer_call(String targetComponentID, String targetInputPortID,
                    org.apache.thrift.async.AsyncMethodCallback<RegisterRemoteProducer_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.targetComponentID = targetComponentID;
                this.targetInputPortID = targetInputPortID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RegisterRemoteProducer",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                RegisterRemoteProducer_args args = new RegisterRemoteProducer_args();
                args.setTargetComponentID(targetComponentID);
                args.setTargetInputPortID(targetInputPortID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_RegisterRemoteProducer();
            }
        }

        public void UnregisterRemoteProducer(String remoteProducerID,
                org.apache.thrift.async.AsyncMethodCallback<UnregisterRemoteProducer_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            UnregisterRemoteProducer_call method_call = new UnregisterRemoteProducer_call(remoteProducerID,
                    resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class UnregisterRemoteProducer_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String remoteProducerID;

            public UnregisterRemoteProducer_call(String remoteProducerID,
                    org.apache.thrift.async.AsyncMethodCallback<UnregisterRemoteProducer_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.remoteProducerID = remoteProducerID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UnregisterRemoteProducer",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                UnregisterRemoteProducer_args args = new UnregisterRemoteProducer_args();
                args.setRemoteProducerID(remoteProducerID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_UnregisterRemoteProducer();
            }
        }

        public void PollData(String courceComponentID, String sourceOutputPortID,
                org.apache.thrift.async.AsyncMethodCallback<PollData_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            PollData_call method_call = new PollData_call(courceComponentID, sourceOutputPortID, resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class PollData_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String courceComponentID;
            private String sourceOutputPortID;

            public PollData_call(String courceComponentID, String sourceOutputPortID,
                    org.apache.thrift.async.AsyncMethodCallback<PollData_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.courceComponentID = courceComponentID;
                this.sourceOutputPortID = sourceOutputPortID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("PollData",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                PollData_args args = new PollData_args();
                args.setCourceComponentID(courceComponentID);
                args.setSourceOutputPortID(sourceOutputPortID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public ByteBuffer getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_PollData();
            }
        }

        public void SendData(String targetComponentID, String targetInputPortID, ByteBuffer data,
                org.apache.thrift.async.AsyncMethodCallback<SendData_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            SendData_call method_call = new SendData_call(targetComponentID, targetInputPortID, data, resultHandler,
                    this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class SendData_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String targetComponentID;
            private String targetInputPortID;
            private ByteBuffer data;

            public SendData_call(String targetComponentID, String targetInputPortID, ByteBuffer data,
                    org.apache.thrift.async.AsyncMethodCallback<SendData_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.targetComponentID = targetComponentID;
                this.targetInputPortID = targetInputPortID;
                this.data = data;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SendData",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                SendData_args args = new SendData_args();
                args.setTargetComponentID(targetComponentID);
                args.setTargetInputPortID(targetInputPortID);
                args.setData(data);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_SendData();
            }
        }

        public void RegisterLogListener(
                org.apache.thrift.async.AsyncMethodCallback<RegisterLogListener_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            RegisterLogListener_call method_call = new RegisterLogListener_call(resultHandler, this, ___protocolFactory,
                    ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class RegisterLogListener_call extends org.apache.thrift.async.TAsyncMethodCall {
            public RegisterLogListener_call(
                    org.apache.thrift.async.AsyncMethodCallback<RegisterLogListener_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RegisterLogListener",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                RegisterLogListener_args args = new RegisterLogListener_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_RegisterLogListener();
            }
        }

        public void UnregisterLogListener(String logListenerID,
                org.apache.thrift.async.AsyncMethodCallback<UnregisterLogListener_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            UnregisterLogListener_call method_call = new UnregisterLogListener_call(logListenerID, resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class UnregisterLogListener_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String logListenerID;

            public UnregisterLogListener_call(String logListenerID,
                    org.apache.thrift.async.AsyncMethodCallback<UnregisterLogListener_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.logListenerID = logListenerID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UnregisterLogListener",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                UnregisterLogListener_args args = new UnregisterLogListener_args();
                args.setLogListenerID(logListenerID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_UnregisterLogListener();
            }
        }

        public void storeModel(String modelInXML, String filename,
                org.apache.thrift.async.AsyncMethodCallback<storeModel_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            storeModel_call method_call = new storeModel_call(modelInXML, filename, resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class storeModel_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String modelInXML;
            private String filename;

            public storeModel_call(String modelInXML, String filename,
                    org.apache.thrift.async.AsyncMethodCallback<storeModel_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.modelInXML = modelInXML;
                this.filename = filename;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeModel",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                storeModel_args args = new storeModel_args();
                args.setModelInXML(modelInXML);
                args.setFilename(filename);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_storeModel();
            }
        }

        public void deleteModelFile(String filename,
                org.apache.thrift.async.AsyncMethodCallback<deleteModelFile_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            deleteModelFile_call method_call = new deleteModelFile_call(filename, resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class deleteModelFile_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String filename;

            public deleteModelFile_call(String filename,
                    org.apache.thrift.async.AsyncMethodCallback<deleteModelFile_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.filename = filename;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteModelFile",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                deleteModelFile_args args = new deleteModelFile_args();
                args.setFilename(filename);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_deleteModelFile();
            }
        }

        public void listAllStoredModels(
                org.apache.thrift.async.AsyncMethodCallback<listAllStoredModels_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            listAllStoredModels_call method_call = new listAllStoredModels_call(resultHandler, this, ___protocolFactory,
                    ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class listAllStoredModels_call extends org.apache.thrift.async.TAsyncMethodCall {
            public listAllStoredModels_call(
                    org.apache.thrift.async.AsyncMethodCallback<listAllStoredModels_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listAllStoredModels",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                listAllStoredModels_args args = new listAllStoredModels_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<String> getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_listAllStoredModels();
            }
        }

        public void getModelFromFile(String filename,
                org.apache.thrift.async.AsyncMethodCallback<getModelFromFile_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            getModelFromFile_call method_call = new getModelFromFile_call(filename, resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getModelFromFile_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String filename;

            public getModelFromFile_call(String filename,
                    org.apache.thrift.async.AsyncMethodCallback<getModelFromFile_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.filename = filename;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getModelFromFile",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                getModelFromFile_args args = new getModelFromFile_args();
                args.setFilename(filename);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getModelFromFile();
            }
        }

        public void getLogFile(org.apache.thrift.async.AsyncMethodCallback<getLogFile_call> resultHandler)
                throws org.apache.thrift.TException {
            checkReady();
            getLogFile_call method_call = new getLogFile_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getLogFile_call extends org.apache.thrift.async.TAsyncMethodCall {
            public getLogFile_call(org.apache.thrift.async.AsyncMethodCallback<getLogFile_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLogFile",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                getLogFile_args args = new getLogFile_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getLogFile();
            }
        }

        public void QueryStatus(boolean fullList,
                org.apache.thrift.async.AsyncMethodCallback<QueryStatus_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            QueryStatus_call method_call = new QueryStatus_call(fullList, resultHandler, this, ___protocolFactory,
                    ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class QueryStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
            private boolean fullList;

            public QueryStatus_call(boolean fullList,
                    org.apache.thrift.async.AsyncMethodCallback<QueryStatus_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.fullList = fullList;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QueryStatus",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                QueryStatus_args args = new QueryStatus_args();
                args.setFullList(fullList);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<StatusObject> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_QueryStatus();
            }
        }

        public void getRuntimePropertyList(String componentID, String key,
                org.apache.thrift.async.AsyncMethodCallback<getRuntimePropertyList_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            getRuntimePropertyList_call method_call = new getRuntimePropertyList_call(componentID, key, resultHandler,
                    this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getRuntimePropertyList_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String componentID;
            private String key;

            public getRuntimePropertyList_call(String componentID, String key,
                    org.apache.thrift.async.AsyncMethodCallback<getRuntimePropertyList_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.componentID = componentID;
                this.key = key;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRuntimePropertyList",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                getRuntimePropertyList_args args = new getRuntimePropertyList_args();
                args.setComponentID(componentID);
                args.setKey(key);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<String> getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getRuntimePropertyList();
            }
        }

        public void getBundleDescriptors(
                org.apache.thrift.async.AsyncMethodCallback<getBundleDescriptors_call> resultHandler)
                        throws org.apache.thrift.TException {
            checkReady();
            getBundleDescriptors_call method_call = new getBundleDescriptors_call(resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getBundleDescriptors_call extends org.apache.thrift.async.TAsyncMethodCall {
            public getBundleDescriptors_call(
                    org.apache.thrift.async.AsyncMethodCallback<getBundleDescriptors_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBundleDescriptors",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                getBundleDescriptors_args args = new getBundleDescriptors_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<String> getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getBundleDescriptors();
            }
        }

        public void Ping(org.apache.thrift.async.AsyncMethodCallback<Ping_call> resultHandler)
                throws org.apache.thrift.TException {
            checkReady();
            Ping_call method_call = new Ping_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class Ping_call extends org.apache.thrift.async.TAsyncMethodCall {
            public Ping_call(org.apache.thrift.async.AsyncMethodCallback<Ping_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Ping",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                Ping_args args = new Ping_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public int getResult() throws AsapiException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_Ping();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
            implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(
                    new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface,
                Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
                Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("GetAvailableComponentTypes", new GetAvailableComponentTypes());
            processMap.put("GetModel", new GetModel());
            processMap.put("DeployModel", new DeployModel());
            processMap.put("DeployFile", new DeployFile());
            processMap.put("DeployModelWithFile", new DeployModelWithFile());
            processMap.put("NewModel", new NewModel());
            processMap.put("RunModel", new RunModel());
            processMap.put("PauseModel", new PauseModel());
            processMap.put("StopModel", new StopModel());
            processMap.put("GetComponents", new GetComponents());
            processMap.put("GetChannels", new GetChannels());
            processMap.put("InsertComponent", new InsertComponent());
            processMap.put("RemoveComponent", new RemoveComponent());
            processMap.put("GetAllPorts", new GetAllPorts());
            processMap.put("GetInputPorts", new GetInputPorts());
            processMap.put("GetOutputPorts", new GetOutputPorts());
            processMap.put("InsertChannel", new InsertChannel());
            processMap.put("RemoveChannel", new RemoveChannel());
            processMap.put("GetComponentPropertyKeys", new GetComponentPropertyKeys());
            processMap.put("GetComponentProperty", new GetComponentProperty());
            processMap.put("SetComponentProperty", new SetComponentProperty());
            processMap.put("GetPortPropertyKeys", new GetPortPropertyKeys());
            processMap.put("GetPortProperty", new GetPortProperty());
            processMap.put("SetPortProperty", new SetPortProperty());
            processMap.put("GetChannelPropertyKeys", new GetChannelPropertyKeys());
            processMap.put("GetChannelProperty", new GetChannelProperty());
            processMap.put("SetChannelProperty", new SetChannelProperty());
            processMap.put("RegisterRemoteConsumer", new RegisterRemoteConsumer());
            processMap.put("UnregisterRemoteConsumer", new UnregisterRemoteConsumer());
            processMap.put("RegisterRemoteProducer", new RegisterRemoteProducer());
            processMap.put("UnregisterRemoteProducer", new UnregisterRemoteProducer());
            processMap.put("PollData", new PollData());
            processMap.put("SendData", new SendData());
            processMap.put("RegisterLogListener", new RegisterLogListener());
            processMap.put("UnregisterLogListener", new UnregisterLogListener());
            processMap.put("storeModel", new storeModel());
            processMap.put("deleteModelFile", new deleteModelFile());
            processMap.put("listAllStoredModels", new listAllStoredModels());
            processMap.put("getModelFromFile", new getModelFromFile());
            processMap.put("getLogFile", new getLogFile());
            processMap.put("QueryStatus", new QueryStatus());
            processMap.put("getRuntimePropertyList", new getRuntimePropertyList());
            processMap.put("getBundleDescriptors", new getBundleDescriptors());
            processMap.put("Ping", new Ping());
            return processMap;
        }

        private static class GetAvailableComponentTypes<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, GetAvailableComponentTypes_args> {
            public GetAvailableComponentTypes() {
                super("GetAvailableComponentTypes");
            }

            protected GetAvailableComponentTypes_args getEmptyArgsInstance() {
                return new GetAvailableComponentTypes_args();
            }

            protected GetAvailableComponentTypes_result getResult(I iface, GetAvailableComponentTypes_args args)
                    throws org.apache.thrift.TException {
                GetAvailableComponentTypes_result result = new GetAvailableComponentTypes_result();
                result.success = iface.GetAvailableComponentTypes();
                return result;
            }
        }

        private static class GetModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetModel_args> {
            public GetModel() {
                super("GetModel");
            }

            protected GetModel_args getEmptyArgsInstance() {
                return new GetModel_args();
            }

            protected GetModel_result getResult(I iface, GetModel_args args) throws org.apache.thrift.TException {
                GetModel_result result = new GetModel_result();
                result.success = iface.GetModel();
                return result;
            }
        }

        private static class DeployModel<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, DeployModel_args> {
            public DeployModel() {
                super("DeployModel");
            }

            protected DeployModel_args getEmptyArgsInstance() {
                return new DeployModel_args();
            }

            protected DeployModel_result getResult(I iface, DeployModel_args args) throws org.apache.thrift.TException {
                DeployModel_result result = new DeployModel_result();
                try {
                    iface.DeployModel(args.modelInXml);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class DeployFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeployFile_args> {
            public DeployFile() {
                super("DeployFile");
            }

            protected DeployFile_args getEmptyArgsInstance() {
                return new DeployFile_args();
            }

            protected DeployFile_result getResult(I iface, DeployFile_args args) throws org.apache.thrift.TException {
                DeployFile_result result = new DeployFile_result();
                try {
                    iface.DeployFile(args.filename);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class DeployModelWithFile<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, DeployModelWithFile_args> {
            public DeployModelWithFile() {
                super("DeployModelWithFile");
            }

            protected DeployModelWithFile_args getEmptyArgsInstance() {
                return new DeployModelWithFile_args();
            }

            protected DeployModelWithFile_result getResult(I iface, DeployModelWithFile_args args)
                    throws org.apache.thrift.TException {
                DeployModelWithFile_result result = new DeployModelWithFile_result();
                try {
                    iface.DeployModelWithFile(args.filename, args.modelInXml);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class NewModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, NewModel_args> {
            public NewModel() {
                super("NewModel");
            }

            protected NewModel_args getEmptyArgsInstance() {
                return new NewModel_args();
            }

            protected NewModel_result getResult(I iface, NewModel_args args) throws org.apache.thrift.TException {
                NewModel_result result = new NewModel_result();
                iface.NewModel();
                return result;
            }
        }

        private static class RunModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RunModel_args> {
            public RunModel() {
                super("RunModel");
            }

            protected RunModel_args getEmptyArgsInstance() {
                return new RunModel_args();
            }

            protected RunModel_result getResult(I iface, RunModel_args args) throws org.apache.thrift.TException {
                RunModel_result result = new RunModel_result();
                try {
                    iface.RunModel();
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class PauseModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, PauseModel_args> {
            public PauseModel() {
                super("PauseModel");
            }

            protected PauseModel_args getEmptyArgsInstance() {
                return new PauseModel_args();
            }

            protected PauseModel_result getResult(I iface, PauseModel_args args) throws org.apache.thrift.TException {
                PauseModel_result result = new PauseModel_result();
                try {
                    iface.PauseModel();
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class StopModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, StopModel_args> {
            public StopModel() {
                super("StopModel");
            }

            protected StopModel_args getEmptyArgsInstance() {
                return new StopModel_args();
            }

            protected StopModel_result getResult(I iface, StopModel_args args) throws org.apache.thrift.TException {
                StopModel_result result = new StopModel_result();
                try {
                    iface.StopModel();
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class GetComponents<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, GetComponents_args> {
            public GetComponents() {
                super("GetComponents");
            }

            protected GetComponents_args getEmptyArgsInstance() {
                return new GetComponents_args();
            }

            protected GetComponents_result getResult(I iface, GetComponents_args args)
                    throws org.apache.thrift.TException {
                GetComponents_result result = new GetComponents_result();
                result.success = iface.GetComponents();
                return result;
            }
        }

        private static class GetChannels<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, GetChannels_args> {
            public GetChannels() {
                super("GetChannels");
            }

            protected GetChannels_args getEmptyArgsInstance() {
                return new GetChannels_args();
            }

            protected GetChannels_result getResult(I iface, GetChannels_args args) throws org.apache.thrift.TException {
                GetChannels_result result = new GetChannels_result();
                result.success = iface.GetChannels(args.componentID);
                return result;
            }
        }

        private static class InsertComponent<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, InsertComponent_args> {
            public InsertComponent() {
                super("InsertComponent");
            }

            protected InsertComponent_args getEmptyArgsInstance() {
                return new InsertComponent_args();
            }

            protected InsertComponent_result getResult(I iface, InsertComponent_args args)
                    throws org.apache.thrift.TException {
                InsertComponent_result result = new InsertComponent_result();
                try {
                    iface.InsertComponent(args.componentID, args.componentType);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class RemoveComponent<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, RemoveComponent_args> {
            public RemoveComponent() {
                super("RemoveComponent");
            }

            protected RemoveComponent_args getEmptyArgsInstance() {
                return new RemoveComponent_args();
            }

            protected RemoveComponent_result getResult(I iface, RemoveComponent_args args)
                    throws org.apache.thrift.TException {
                RemoveComponent_result result = new RemoveComponent_result();
                try {
                    iface.RemoveComponent(args.componentID);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class GetAllPorts<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, GetAllPorts_args> {
            public GetAllPorts() {
                super("GetAllPorts");
            }

            protected GetAllPorts_args getEmptyArgsInstance() {
                return new GetAllPorts_args();
            }

            protected GetAllPorts_result getResult(I iface, GetAllPorts_args args) throws org.apache.thrift.TException {
                GetAllPorts_result result = new GetAllPorts_result();
                try {
                    result.success = iface.GetAllPorts(args.componentID);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class GetInputPorts<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, GetInputPorts_args> {
            public GetInputPorts() {
                super("GetInputPorts");
            }

            protected GetInputPorts_args getEmptyArgsInstance() {
                return new GetInputPorts_args();
            }

            protected GetInputPorts_result getResult(I iface, GetInputPorts_args args)
                    throws org.apache.thrift.TException {
                GetInputPorts_result result = new GetInputPorts_result();
                try {
                    result.success = iface.GetInputPorts(args.componentID);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class GetOutputPorts<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, GetOutputPorts_args> {
            public GetOutputPorts() {
                super("GetOutputPorts");
            }

            protected GetOutputPorts_args getEmptyArgsInstance() {
                return new GetOutputPorts_args();
            }

            protected GetOutputPorts_result getResult(I iface, GetOutputPorts_args args)
                    throws org.apache.thrift.TException {
                GetOutputPorts_result result = new GetOutputPorts_result();
                try {
                    result.success = iface.GetOutputPorts(args.componentID);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class InsertChannel<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, InsertChannel_args> {
            public InsertChannel() {
                super("InsertChannel");
            }

            protected InsertChannel_args getEmptyArgsInstance() {
                return new InsertChannel_args();
            }

            protected InsertChannel_result getResult(I iface, InsertChannel_args args)
                    throws org.apache.thrift.TException {
                InsertChannel_result result = new InsertChannel_result();
                try {
                    iface.InsertChannel(args.channelID, args.sourceComponentID, args.sourcePortID,
                            args.targetComponentID, args.targetPortID);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class RemoveChannel<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, RemoveChannel_args> {
            public RemoveChannel() {
                super("RemoveChannel");
            }

            protected RemoveChannel_args getEmptyArgsInstance() {
                return new RemoveChannel_args();
            }

            protected RemoveChannel_result getResult(I iface, RemoveChannel_args args)
                    throws org.apache.thrift.TException {
                RemoveChannel_result result = new RemoveChannel_result();
                try {
                    iface.RemoveChannel(args.channelID);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class GetComponentPropertyKeys<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, GetComponentPropertyKeys_args> {
            public GetComponentPropertyKeys() {
                super("GetComponentPropertyKeys");
            }

            protected GetComponentPropertyKeys_args getEmptyArgsInstance() {
                return new GetComponentPropertyKeys_args();
            }

            protected GetComponentPropertyKeys_result getResult(I iface, GetComponentPropertyKeys_args args)
                    throws org.apache.thrift.TException {
                GetComponentPropertyKeys_result result = new GetComponentPropertyKeys_result();
                result.success = iface.GetComponentPropertyKeys(args.componentID);
                return result;
            }
        }

        private static class GetComponentProperty<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, GetComponentProperty_args> {
            public GetComponentProperty() {
                super("GetComponentProperty");
            }

            protected GetComponentProperty_args getEmptyArgsInstance() {
                return new GetComponentProperty_args();
            }

            protected GetComponentProperty_result getResult(I iface, GetComponentProperty_args args)
                    throws org.apache.thrift.TException {
                GetComponentProperty_result result = new GetComponentProperty_result();
                result.success = iface.GetComponentProperty(args.componentID, args.key);
                return result;
            }
        }

        private static class SetComponentProperty<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, SetComponentProperty_args> {
            public SetComponentProperty() {
                super("SetComponentProperty");
            }

            protected SetComponentProperty_args getEmptyArgsInstance() {
                return new SetComponentProperty_args();
            }

            protected SetComponentProperty_result getResult(I iface, SetComponentProperty_args args)
                    throws org.apache.thrift.TException {
                SetComponentProperty_result result = new SetComponentProperty_result();
                result.success = iface.SetComponentProperty(args.componentID, args.key, args.value);
                return result;
            }
        }

        private static class GetPortPropertyKeys<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, GetPortPropertyKeys_args> {
            public GetPortPropertyKeys() {
                super("GetPortPropertyKeys");
            }

            protected GetPortPropertyKeys_args getEmptyArgsInstance() {
                return new GetPortPropertyKeys_args();
            }

            protected GetPortPropertyKeys_result getResult(I iface, GetPortPropertyKeys_args args)
                    throws org.apache.thrift.TException {
                GetPortPropertyKeys_result result = new GetPortPropertyKeys_result();
                result.success = iface.GetPortPropertyKeys(args.componentID, args.portID);
                return result;
            }
        }

        private static class GetPortProperty<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, GetPortProperty_args> {
            public GetPortProperty() {
                super("GetPortProperty");
            }

            protected GetPortProperty_args getEmptyArgsInstance() {
                return new GetPortProperty_args();
            }

            protected GetPortProperty_result getResult(I iface, GetPortProperty_args args)
                    throws org.apache.thrift.TException {
                GetPortProperty_result result = new GetPortProperty_result();
                result.success = iface.GetPortProperty(args.componentID, args.portID, args.key);
                return result;
            }
        }

        private static class SetPortProperty<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, SetPortProperty_args> {
            public SetPortProperty() {
                super("SetPortProperty");
            }

            protected SetPortProperty_args getEmptyArgsInstance() {
                return new SetPortProperty_args();
            }

            protected SetPortProperty_result getResult(I iface, SetPortProperty_args args)
                    throws org.apache.thrift.TException {
                SetPortProperty_result result = new SetPortProperty_result();
                result.success = iface.SetPortProperty(args.componentID, args.portID, args.key, args.value);
                return result;
            }
        }

        private static class GetChannelPropertyKeys<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, GetChannelPropertyKeys_args> {
            public GetChannelPropertyKeys() {
                super("GetChannelPropertyKeys");
            }

            protected GetChannelPropertyKeys_args getEmptyArgsInstance() {
                return new GetChannelPropertyKeys_args();
            }

            protected GetChannelPropertyKeys_result getResult(I iface, GetChannelPropertyKeys_args args)
                    throws org.apache.thrift.TException {
                GetChannelPropertyKeys_result result = new GetChannelPropertyKeys_result();
                result.success = iface.GetChannelPropertyKeys(args.channelID);
                return result;
            }
        }

        private static class GetChannelProperty<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, GetChannelProperty_args> {
            public GetChannelProperty() {
                super("GetChannelProperty");
            }

            protected GetChannelProperty_args getEmptyArgsInstance() {
                return new GetChannelProperty_args();
            }

            protected GetChannelProperty_result getResult(I iface, GetChannelProperty_args args)
                    throws org.apache.thrift.TException {
                GetChannelProperty_result result = new GetChannelProperty_result();
                result.success = iface.GetChannelProperty(args.channelID, args.key);
                return result;
            }
        }

        private static class SetChannelProperty<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, SetChannelProperty_args> {
            public SetChannelProperty() {
                super("SetChannelProperty");
            }

            protected SetChannelProperty_args getEmptyArgsInstance() {
                return new SetChannelProperty_args();
            }

            protected SetChannelProperty_result getResult(I iface, SetChannelProperty_args args)
                    throws org.apache.thrift.TException {
                SetChannelProperty_result result = new SetChannelProperty_result();
                result.success = iface.SetChannelProperty(args.channelID, args.key, args.value);
                return result;
            }
        }

        private static class RegisterRemoteConsumer<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, RegisterRemoteConsumer_args> {
            public RegisterRemoteConsumer() {
                super("RegisterRemoteConsumer");
            }

            protected RegisterRemoteConsumer_args getEmptyArgsInstance() {
                return new RegisterRemoteConsumer_args();
            }

            protected RegisterRemoteConsumer_result getResult(I iface, RegisterRemoteConsumer_args args)
                    throws org.apache.thrift.TException {
                RegisterRemoteConsumer_result result = new RegisterRemoteConsumer_result();
                try {
                    result.success = iface.RegisterRemoteConsumer(args.sourceComponentID, args.sourceOutputPortID);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class UnregisterRemoteConsumer<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, UnregisterRemoteConsumer_args> {
            public UnregisterRemoteConsumer() {
                super("UnregisterRemoteConsumer");
            }

            protected UnregisterRemoteConsumer_args getEmptyArgsInstance() {
                return new UnregisterRemoteConsumer_args();
            }

            protected UnregisterRemoteConsumer_result getResult(I iface, UnregisterRemoteConsumer_args args)
                    throws org.apache.thrift.TException {
                UnregisterRemoteConsumer_result result = new UnregisterRemoteConsumer_result();
                try {
                    iface.UnregisterRemoteConsumer(args.remoteConsumerID);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class RegisterRemoteProducer<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, RegisterRemoteProducer_args> {
            public RegisterRemoteProducer() {
                super("RegisterRemoteProducer");
            }

            protected RegisterRemoteProducer_args getEmptyArgsInstance() {
                return new RegisterRemoteProducer_args();
            }

            protected RegisterRemoteProducer_result getResult(I iface, RegisterRemoteProducer_args args)
                    throws org.apache.thrift.TException {
                RegisterRemoteProducer_result result = new RegisterRemoteProducer_result();
                try {
                    result.success = iface.RegisterRemoteProducer(args.targetComponentID, args.targetInputPortID);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class UnregisterRemoteProducer<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, UnregisterRemoteProducer_args> {
            public UnregisterRemoteProducer() {
                super("UnregisterRemoteProducer");
            }

            protected UnregisterRemoteProducer_args getEmptyArgsInstance() {
                return new UnregisterRemoteProducer_args();
            }

            protected UnregisterRemoteProducer_result getResult(I iface, UnregisterRemoteProducer_args args)
                    throws org.apache.thrift.TException {
                UnregisterRemoteProducer_result result = new UnregisterRemoteProducer_result();
                try {
                    iface.UnregisterRemoteProducer(args.remoteProducerID);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class PollData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, PollData_args> {
            public PollData() {
                super("PollData");
            }

            protected PollData_args getEmptyArgsInstance() {
                return new PollData_args();
            }

            protected PollData_result getResult(I iface, PollData_args args) throws org.apache.thrift.TException {
                PollData_result result = new PollData_result();
                try {
                    result.success = iface.PollData(args.courceComponentID, args.sourceOutputPortID);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class SendData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SendData_args> {
            public SendData() {
                super("SendData");
            }

            protected SendData_args getEmptyArgsInstance() {
                return new SendData_args();
            }

            protected SendData_result getResult(I iface, SendData_args args) throws org.apache.thrift.TException {
                SendData_result result = new SendData_result();
                try {
                    iface.SendData(args.targetComponentID, args.targetInputPortID, args.data);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class RegisterLogListener<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, RegisterLogListener_args> {
            public RegisterLogListener() {
                super("RegisterLogListener");
            }

            protected RegisterLogListener_args getEmptyArgsInstance() {
                return new RegisterLogListener_args();
            }

            protected RegisterLogListener_result getResult(I iface, RegisterLogListener_args args)
                    throws org.apache.thrift.TException {
                RegisterLogListener_result result = new RegisterLogListener_result();
                result.success = iface.RegisterLogListener();
                return result;
            }
        }

        private static class UnregisterLogListener<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, UnregisterLogListener_args> {
            public UnregisterLogListener() {
                super("UnregisterLogListener");
            }

            protected UnregisterLogListener_args getEmptyArgsInstance() {
                return new UnregisterLogListener_args();
            }

            protected UnregisterLogListener_result getResult(I iface, UnregisterLogListener_args args)
                    throws org.apache.thrift.TException {
                UnregisterLogListener_result result = new UnregisterLogListener_result();
                iface.UnregisterLogListener(args.logListenerID);
                return result;
            }
        }

        private static class storeModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeModel_args> {
            public storeModel() {
                super("storeModel");
            }

            protected storeModel_args getEmptyArgsInstance() {
                return new storeModel_args();
            }

            protected storeModel_result getResult(I iface, storeModel_args args) throws org.apache.thrift.TException {
                storeModel_result result = new storeModel_result();
                try {
                    iface.storeModel(args.modelInXML, args.filename);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class deleteModelFile<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, deleteModelFile_args> {
            public deleteModelFile() {
                super("deleteModelFile");
            }

            protected deleteModelFile_args getEmptyArgsInstance() {
                return new deleteModelFile_args();
            }

            protected deleteModelFile_result getResult(I iface, deleteModelFile_args args)
                    throws org.apache.thrift.TException {
                deleteModelFile_result result = new deleteModelFile_result();
                try {
                    result.success = iface.deleteModelFile(args.filename);
                    result.setSuccessIsSet(true);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class listAllStoredModels<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, listAllStoredModels_args> {
            public listAllStoredModels() {
                super("listAllStoredModels");
            }

            protected listAllStoredModels_args getEmptyArgsInstance() {
                return new listAllStoredModels_args();
            }

            protected listAllStoredModels_result getResult(I iface, listAllStoredModels_args args)
                    throws org.apache.thrift.TException {
                listAllStoredModels_result result = new listAllStoredModels_result();
                try {
                    result.success = iface.listAllStoredModels();
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class getModelFromFile<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, getModelFromFile_args> {
            public getModelFromFile() {
                super("getModelFromFile");
            }

            protected getModelFromFile_args getEmptyArgsInstance() {
                return new getModelFromFile_args();
            }

            protected getModelFromFile_result getResult(I iface, getModelFromFile_args args)
                    throws org.apache.thrift.TException {
                getModelFromFile_result result = new getModelFromFile_result();
                try {
                    result.success = iface.getModelFromFile(args.filename);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class getLogFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLogFile_args> {
            public getLogFile() {
                super("getLogFile");
            }

            protected getLogFile_args getEmptyArgsInstance() {
                return new getLogFile_args();
            }

            protected getLogFile_result getResult(I iface, getLogFile_args args) throws org.apache.thrift.TException {
                getLogFile_result result = new getLogFile_result();
                result.success = iface.getLogFile();
                return result;
            }
        }

        private static class QueryStatus<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, QueryStatus_args> {
            public QueryStatus() {
                super("QueryStatus");
            }

            protected QueryStatus_args getEmptyArgsInstance() {
                return new QueryStatus_args();
            }

            protected QueryStatus_result getResult(I iface, QueryStatus_args args) throws org.apache.thrift.TException {
                QueryStatus_result result = new QueryStatus_result();
                result.success = iface.QueryStatus(args.fullList);
                return result;
            }
        }

        private static class getRuntimePropertyList<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, getRuntimePropertyList_args> {
            public getRuntimePropertyList() {
                super("getRuntimePropertyList");
            }

            protected getRuntimePropertyList_args getEmptyArgsInstance() {
                return new getRuntimePropertyList_args();
            }

            protected getRuntimePropertyList_result getResult(I iface, getRuntimePropertyList_args args)
                    throws org.apache.thrift.TException {
                getRuntimePropertyList_result result = new getRuntimePropertyList_result();
                try {
                    result.success = iface.getRuntimePropertyList(args.componentID, args.key);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class getBundleDescriptors<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, getBundleDescriptors_args> {
            public getBundleDescriptors() {
                super("getBundleDescriptors");
            }

            protected getBundleDescriptors_args getEmptyArgsInstance() {
                return new getBundleDescriptors_args();
            }

            protected getBundleDescriptors_result getResult(I iface, getBundleDescriptors_args args)
                    throws org.apache.thrift.TException {
                getBundleDescriptors_result result = new getBundleDescriptors_result();
                try {
                    result.success = iface.getBundleDescriptors();
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

        private static class Ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Ping_args> {
            public Ping() {
                super("Ping");
            }

            protected Ping_args getEmptyArgsInstance() {
                return new Ping_args();
            }

            protected Ping_result getResult(I iface, Ping_args args) throws org.apache.thrift.TException {
                Ping_result result = new Ping_result();
                try {
                    result.success = iface.Ping();
                    result.setSuccessIsSet(true);
                } catch (AsapiException asapiEx) {
                    result.asapiEx = asapiEx;
                }
                return result;
            }
        }

    }

    public static class GetAvailableComponentTypes_args implements
            org.apache.thrift.TBase<GetAvailableComponentTypes_args, GetAvailableComponentTypes_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetAvailableComponentTypes_args");

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetAvailableComponentTypes_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetAvailableComponentTypes_argsTupleSchemeFactory());
        }

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAvailableComponentTypes_args.class,
                    metaDataMap);
        }

        public GetAvailableComponentTypes_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetAvailableComponentTypes_args(GetAvailableComponentTypes_args other) {
        }

        public GetAvailableComponentTypes_args deepCopy() {
            return new GetAvailableComponentTypes_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetAvailableComponentTypes_args)
                return this.equals((GetAvailableComponentTypes_args) that);
            return false;
        }

        public boolean equals(GetAvailableComponentTypes_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetAvailableComponentTypes_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetAvailableComponentTypes_args typedOther = (GetAvailableComponentTypes_args) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetAvailableComponentTypes_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetAvailableComponentTypes_argsStandardSchemeFactory implements SchemeFactory {
            public GetAvailableComponentTypes_argsStandardScheme getScheme() {
                return new GetAvailableComponentTypes_argsStandardScheme();
            }
        }

        private static class GetAvailableComponentTypes_argsStandardScheme
                extends StandardScheme<GetAvailableComponentTypes_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetAvailableComponentTypes_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetAvailableComponentTypes_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetAvailableComponentTypes_argsTupleSchemeFactory implements SchemeFactory {
            public GetAvailableComponentTypes_argsTupleScheme getScheme() {
                return new GetAvailableComponentTypes_argsTupleScheme();
            }
        }

        private static class GetAvailableComponentTypes_argsTupleScheme
                extends TupleScheme<GetAvailableComponentTypes_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetAvailableComponentTypes_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetAvailableComponentTypes_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class GetAvailableComponentTypes_result implements
            org.apache.thrift.TBase<GetAvailableComponentTypes_result, GetAvailableComponentTypes_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetAvailableComponentTypes_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetAvailableComponentTypes_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetAvailableComponentTypes_resultTupleSchemeFactory());
        }

        public List<String> success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                    new org.apache.thrift.meta_data.FieldMetaData("success",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                    new org.apache.thrift.meta_data.FieldValueMetaData(
                                            org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAvailableComponentTypes_result.class,
                    metaDataMap);
        }

        public GetAvailableComponentTypes_result() {
        }

        public GetAvailableComponentTypes_result(List<String> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetAvailableComponentTypes_result(GetAvailableComponentTypes_result other) {
            if (other.isSetSuccess()) {
                List<String> __this__success = new ArrayList<String>();
                for (String other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
        }

        public GetAvailableComponentTypes_result deepCopy() {
            return new GetAvailableComponentTypes_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(String elem) {
            if (this.success == null) {
                this.success = new ArrayList<String>();
            }
            this.success.add(elem);
        }

        public List<String> getSuccess() {
            return this.success;
        }

        public GetAvailableComponentTypes_result setSuccess(List<String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((List<String>) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetAvailableComponentTypes_result)
                return this.equals((GetAvailableComponentTypes_result) that);
            return false;
        }

        public boolean equals(GetAvailableComponentTypes_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetAvailableComponentTypes_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetAvailableComponentTypes_result typedOther = (GetAvailableComponentTypes_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetAvailableComponentTypes_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetAvailableComponentTypes_resultStandardSchemeFactory implements SchemeFactory {
            public GetAvailableComponentTypes_resultStandardScheme getScheme() {
                return new GetAvailableComponentTypes_resultStandardScheme();
            }
        }

        private static class GetAvailableComponentTypes_resultStandardScheme
                extends StandardScheme<GetAvailableComponentTypes_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetAvailableComponentTypes_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.success = new ArrayList<String>(_list0.size);
                                for (int _i1 = 0; _i1 < _list0.size; ++_i1) {
                                    String _elem2; // required
                                    _elem2 = iprot.readString();
                                    struct.success.add(_elem2);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetAvailableComponentTypes_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (String _iter3 : struct.success) {
                            oprot.writeString(_iter3);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetAvailableComponentTypes_resultTupleSchemeFactory implements SchemeFactory {
            public GetAvailableComponentTypes_resultTupleScheme getScheme() {
                return new GetAvailableComponentTypes_resultTupleScheme();
            }
        }

        private static class GetAvailableComponentTypes_resultTupleScheme
                extends TupleScheme<GetAvailableComponentTypes_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetAvailableComponentTypes_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (String _iter4 : struct.success) {
                            oprot.writeString(_iter4);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetAvailableComponentTypes_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new ArrayList<String>(_list5.size);
                        for (int _i6 = 0; _i6 < _list5.size; ++_i6) {
                            String _elem7; // required
                            _elem7 = iprot.readString();
                            struct.success.add(_elem7);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class GetModel_args
            implements org.apache.thrift.TBase<GetModel_args, GetModel_args._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetModel_args");

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetModel_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetModel_argsTupleSchemeFactory());
        }

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetModel_args.class, metaDataMap);
        }

        public GetModel_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetModel_args(GetModel_args other) {
        }

        public GetModel_args deepCopy() {
            return new GetModel_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetModel_args)
                return this.equals((GetModel_args) that);
            return false;
        }

        public boolean equals(GetModel_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetModel_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetModel_args typedOther = (GetModel_args) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetModel_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetModel_argsStandardSchemeFactory implements SchemeFactory {
            public GetModel_argsStandardScheme getScheme() {
                return new GetModel_argsStandardScheme();
            }
        }

        private static class GetModel_argsStandardScheme extends StandardScheme<GetModel_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetModel_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetModel_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetModel_argsTupleSchemeFactory implements SchemeFactory {
            public GetModel_argsTupleScheme getScheme() {
                return new GetModel_argsTupleScheme();
            }
        }

        private static class GetModel_argsTupleScheme extends TupleScheme<GetModel_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetModel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetModel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class GetModel_result implements org.apache.thrift.TBase<GetModel_result, GetModel_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetModel_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetModel_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetModel_resultTupleSchemeFactory());
        }

        public String success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetModel_result.class, metaDataMap);
        }

        public GetModel_result() {
        }

        public GetModel_result(String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetModel_result(GetModel_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public GetModel_result deepCopy() {
            return new GetModel_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public GetModel_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetModel_result)
                return this.equals((GetModel_result) that);
            return false;
        }

        public boolean equals(GetModel_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetModel_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetModel_result typedOther = (GetModel_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetModel_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetModel_resultStandardSchemeFactory implements SchemeFactory {
            public GetModel_resultStandardScheme getScheme() {
                return new GetModel_resultStandardScheme();
            }
        }

        private static class GetModel_resultStandardScheme extends StandardScheme<GetModel_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetModel_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.success = iprot.readString();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetModel_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetModel_resultTupleSchemeFactory implements SchemeFactory {
            public GetModel_resultTupleScheme getScheme() {
                return new GetModel_resultTupleScheme();
            }
        }

        private static class GetModel_resultTupleScheme extends TupleScheme<GetModel_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetModel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetModel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class DeployModel_args implements org.apache.thrift.TBase<DeployModel_args, DeployModel_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "DeployModel_args");

        private static final org.apache.thrift.protocol.TField MODEL_IN_XML_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "modelInXml", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new DeployModel_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new DeployModel_argsTupleSchemeFactory());
        }

        public String modelInXml; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MODEL_IN_XML((short) 1, "modelInXml");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // MODEL_IN_XML
                    return MODEL_IN_XML;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.MODEL_IN_XML, new org.apache.thrift.meta_data.FieldMetaData("modelInXml",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeployModel_args.class, metaDataMap);
        }

        public DeployModel_args() {
        }

        public DeployModel_args(String modelInXml) {
            this();
            this.modelInXml = modelInXml;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public DeployModel_args(DeployModel_args other) {
            if (other.isSetModelInXml()) {
                this.modelInXml = other.modelInXml;
            }
        }

        public DeployModel_args deepCopy() {
            return new DeployModel_args(this);
        }

        @Override
        public void clear() {
            this.modelInXml = null;
        }

        public String getModelInXml() {
            return this.modelInXml;
        }

        public DeployModel_args setModelInXml(String modelInXml) {
            this.modelInXml = modelInXml;
            return this;
        }

        public void unsetModelInXml() {
            this.modelInXml = null;
        }

        /**
         * Returns true if field modelInXml is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetModelInXml() {
            return this.modelInXml != null;
        }

        public void setModelInXmlIsSet(boolean value) {
            if (!value) {
                this.modelInXml = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case MODEL_IN_XML:
                if (value == null) {
                    unsetModelInXml();
                } else {
                    setModelInXml((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case MODEL_IN_XML:
                return getModelInXml();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case MODEL_IN_XML:
                return isSetModelInXml();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof DeployModel_args)
                return this.equals((DeployModel_args) that);
            return false;
        }

        public boolean equals(DeployModel_args that) {
            if (that == null)
                return false;

            boolean this_present_modelInXml = true && this.isSetModelInXml();
            boolean that_present_modelInXml = true && that.isSetModelInXml();
            if (this_present_modelInXml || that_present_modelInXml) {
                if (!(this_present_modelInXml && that_present_modelInXml))
                    return false;
                if (!this.modelInXml.equals(that.modelInXml))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(DeployModel_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            DeployModel_args typedOther = (DeployModel_args) other;

            lastComparison = Boolean.valueOf(isSetModelInXml()).compareTo(typedOther.isSetModelInXml());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetModelInXml()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelInXml, typedOther.modelInXml);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("DeployModel_args(");
            boolean first = true;

            sb.append("modelInXml:");
            if (this.modelInXml == null) {
                sb.append("null");
            } else {
                sb.append(this.modelInXml);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class DeployModel_argsStandardSchemeFactory implements SchemeFactory {
            public DeployModel_argsStandardScheme getScheme() {
                return new DeployModel_argsStandardScheme();
            }
        }

        private static class DeployModel_argsStandardScheme extends StandardScheme<DeployModel_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, DeployModel_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // MODEL_IN_XML
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.modelInXml = iprot.readString();
                            struct.setModelInXmlIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, DeployModel_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.modelInXml != null) {
                    oprot.writeFieldBegin(MODEL_IN_XML_FIELD_DESC);
                    oprot.writeString(struct.modelInXml);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class DeployModel_argsTupleSchemeFactory implements SchemeFactory {
            public DeployModel_argsTupleScheme getScheme() {
                return new DeployModel_argsTupleScheme();
            }
        }

        private static class DeployModel_argsTupleScheme extends TupleScheme<DeployModel_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, DeployModel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetModelInXml()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetModelInXml()) {
                    oprot.writeString(struct.modelInXml);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, DeployModel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.modelInXml = iprot.readString();
                    struct.setModelInXmlIsSet(true);
                }
            }
        }

    }

    public static class DeployModel_result implements
            org.apache.thrift.TBase<DeployModel_result, DeployModel_result._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "DeployModel_result");

        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new DeployModel_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new DeployModel_resultTupleSchemeFactory());
        }

        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeployModel_result.class, metaDataMap);
        }

        public DeployModel_result() {
        }

        public DeployModel_result(AsapiException asapiEx) {
            this();
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public DeployModel_result(DeployModel_result other) {
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public DeployModel_result deepCopy() {
            return new DeployModel_result(this);
        }

        @Override
        public void clear() {
            this.asapiEx = null;
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public DeployModel_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof DeployModel_result)
                return this.equals((DeployModel_result) that);
            return false;
        }

        public boolean equals(DeployModel_result that) {
            if (that == null)
                return false;

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(DeployModel_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            DeployModel_result typedOther = (DeployModel_result) other;

            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("DeployModel_result(");
            boolean first = true;

            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class DeployModel_resultStandardSchemeFactory implements SchemeFactory {
            public DeployModel_resultStandardScheme getScheme() {
                return new DeployModel_resultStandardScheme();
            }
        }

        private static class DeployModel_resultStandardScheme extends StandardScheme<DeployModel_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, DeployModel_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, DeployModel_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class DeployModel_resultTupleSchemeFactory implements SchemeFactory {
            public DeployModel_resultTupleScheme getScheme() {
                return new DeployModel_resultTupleScheme();
            }
        }

        private static class DeployModel_resultTupleScheme extends TupleScheme<DeployModel_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, DeployModel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetAsapiEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, DeployModel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class DeployFile_args implements org.apache.thrift.TBase<DeployFile_args, DeployFile_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "DeployFile_args");

        private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "filename", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new DeployFile_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new DeployFile_argsTupleSchemeFactory());
        }

        public String filename; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            FILENAME((short) 1, "filename");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // FILENAME
                    return FILENAME;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeployFile_args.class, metaDataMap);
        }

        public DeployFile_args() {
        }

        public DeployFile_args(String filename) {
            this();
            this.filename = filename;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public DeployFile_args(DeployFile_args other) {
            if (other.isSetFilename()) {
                this.filename = other.filename;
            }
        }

        public DeployFile_args deepCopy() {
            return new DeployFile_args(this);
        }

        @Override
        public void clear() {
            this.filename = null;
        }

        public String getFilename() {
            return this.filename;
        }

        public DeployFile_args setFilename(String filename) {
            this.filename = filename;
            return this;
        }

        public void unsetFilename() {
            this.filename = null;
        }

        /**
         * Returns true if field filename is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetFilename() {
            return this.filename != null;
        }

        public void setFilenameIsSet(boolean value) {
            if (!value) {
                this.filename = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case FILENAME:
                if (value == null) {
                    unsetFilename();
                } else {
                    setFilename((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case FILENAME:
                return getFilename();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case FILENAME:
                return isSetFilename();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof DeployFile_args)
                return this.equals((DeployFile_args) that);
            return false;
        }

        public boolean equals(DeployFile_args that) {
            if (that == null)
                return false;

            boolean this_present_filename = true && this.isSetFilename();
            boolean that_present_filename = true && that.isSetFilename();
            if (this_present_filename || that_present_filename) {
                if (!(this_present_filename && that_present_filename))
                    return false;
                if (!this.filename.equals(that.filename))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(DeployFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            DeployFile_args typedOther = (DeployFile_args) other;

            lastComparison = Boolean.valueOf(isSetFilename()).compareTo(typedOther.isSetFilename());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFilename()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, typedOther.filename);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("DeployFile_args(");
            boolean first = true;

            sb.append("filename:");
            if (this.filename == null) {
                sb.append("null");
            } else {
                sb.append(this.filename);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class DeployFile_argsStandardSchemeFactory implements SchemeFactory {
            public DeployFile_argsStandardScheme getScheme() {
                return new DeployFile_argsStandardScheme();
            }
        }

        private static class DeployFile_argsStandardScheme extends StandardScheme<DeployFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, DeployFile_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // FILENAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.filename = iprot.readString();
                            struct.setFilenameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, DeployFile_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.filename != null) {
                    oprot.writeFieldBegin(FILENAME_FIELD_DESC);
                    oprot.writeString(struct.filename);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class DeployFile_argsTupleSchemeFactory implements SchemeFactory {
            public DeployFile_argsTupleScheme getScheme() {
                return new DeployFile_argsTupleScheme();
            }
        }

        private static class DeployFile_argsTupleScheme extends TupleScheme<DeployFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, DeployFile_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFilename()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetFilename()) {
                    oprot.writeString(struct.filename);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, DeployFile_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.filename = iprot.readString();
                    struct.setFilenameIsSet(true);
                }
            }
        }

    }

    public static class DeployFile_result implements
            org.apache.thrift.TBase<DeployFile_result, DeployFile_result._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "DeployFile_result");

        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new DeployFile_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new DeployFile_resultTupleSchemeFactory());
        }

        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeployFile_result.class, metaDataMap);
        }

        public DeployFile_result() {
        }

        public DeployFile_result(AsapiException asapiEx) {
            this();
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public DeployFile_result(DeployFile_result other) {
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public DeployFile_result deepCopy() {
            return new DeployFile_result(this);
        }

        @Override
        public void clear() {
            this.asapiEx = null;
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public DeployFile_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof DeployFile_result)
                return this.equals((DeployFile_result) that);
            return false;
        }

        public boolean equals(DeployFile_result that) {
            if (that == null)
                return false;

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(DeployFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            DeployFile_result typedOther = (DeployFile_result) other;

            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("DeployFile_result(");
            boolean first = true;

            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class DeployFile_resultStandardSchemeFactory implements SchemeFactory {
            public DeployFile_resultStandardScheme getScheme() {
                return new DeployFile_resultStandardScheme();
            }
        }

        private static class DeployFile_resultStandardScheme extends StandardScheme<DeployFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, DeployFile_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, DeployFile_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class DeployFile_resultTupleSchemeFactory implements SchemeFactory {
            public DeployFile_resultTupleScheme getScheme() {
                return new DeployFile_resultTupleScheme();
            }
        }

        private static class DeployFile_resultTupleScheme extends TupleScheme<DeployFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, DeployFile_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetAsapiEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, DeployFile_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class DeployModelWithFile_args
            implements org.apache.thrift.TBase<DeployModelWithFile_args, DeployModelWithFile_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "DeployModelWithFile_args");

        private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "filename", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField MODEL_IN_XML_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "modelInXml", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new DeployModelWithFile_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new DeployModelWithFile_argsTupleSchemeFactory());
        }

        public String filename; // required
        public String modelInXml; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            FILENAME((short) 1, "filename"), MODEL_IN_XML((short) 2, "modelInXml");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // FILENAME
                    return FILENAME;
                case 2: // MODEL_IN_XML
                    return MODEL_IN_XML;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.MODEL_IN_XML, new org.apache.thrift.meta_data.FieldMetaData("modelInXml",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeployModelWithFile_args.class, metaDataMap);
        }

        public DeployModelWithFile_args() {
        }

        public DeployModelWithFile_args(String filename, String modelInXml) {
            this();
            this.filename = filename;
            this.modelInXml = modelInXml;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public DeployModelWithFile_args(DeployModelWithFile_args other) {
            if (other.isSetFilename()) {
                this.filename = other.filename;
            }
            if (other.isSetModelInXml()) {
                this.modelInXml = other.modelInXml;
            }
        }

        public DeployModelWithFile_args deepCopy() {
            return new DeployModelWithFile_args(this);
        }

        @Override
        public void clear() {
            this.filename = null;
            this.modelInXml = null;
        }

        public String getFilename() {
            return this.filename;
        }

        public DeployModelWithFile_args setFilename(String filename) {
            this.filename = filename;
            return this;
        }

        public void unsetFilename() {
            this.filename = null;
        }

        /**
         * Returns true if field filename is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetFilename() {
            return this.filename != null;
        }

        public void setFilenameIsSet(boolean value) {
            if (!value) {
                this.filename = null;
            }
        }

        public String getModelInXml() {
            return this.modelInXml;
        }

        public DeployModelWithFile_args setModelInXml(String modelInXml) {
            this.modelInXml = modelInXml;
            return this;
        }

        public void unsetModelInXml() {
            this.modelInXml = null;
        }

        /**
         * Returns true if field modelInXml is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetModelInXml() {
            return this.modelInXml != null;
        }

        public void setModelInXmlIsSet(boolean value) {
            if (!value) {
                this.modelInXml = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case FILENAME:
                if (value == null) {
                    unsetFilename();
                } else {
                    setFilename((String) value);
                }
                break;

            case MODEL_IN_XML:
                if (value == null) {
                    unsetModelInXml();
                } else {
                    setModelInXml((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case FILENAME:
                return getFilename();

            case MODEL_IN_XML:
                return getModelInXml();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case FILENAME:
                return isSetFilename();
            case MODEL_IN_XML:
                return isSetModelInXml();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof DeployModelWithFile_args)
                return this.equals((DeployModelWithFile_args) that);
            return false;
        }

        public boolean equals(DeployModelWithFile_args that) {
            if (that == null)
                return false;

            boolean this_present_filename = true && this.isSetFilename();
            boolean that_present_filename = true && that.isSetFilename();
            if (this_present_filename || that_present_filename) {
                if (!(this_present_filename && that_present_filename))
                    return false;
                if (!this.filename.equals(that.filename))
                    return false;
            }

            boolean this_present_modelInXml = true && this.isSetModelInXml();
            boolean that_present_modelInXml = true && that.isSetModelInXml();
            if (this_present_modelInXml || that_present_modelInXml) {
                if (!(this_present_modelInXml && that_present_modelInXml))
                    return false;
                if (!this.modelInXml.equals(that.modelInXml))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(DeployModelWithFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            DeployModelWithFile_args typedOther = (DeployModelWithFile_args) other;

            lastComparison = Boolean.valueOf(isSetFilename()).compareTo(typedOther.isSetFilename());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFilename()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, typedOther.filename);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetModelInXml()).compareTo(typedOther.isSetModelInXml());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetModelInXml()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelInXml, typedOther.modelInXml);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("DeployModelWithFile_args(");
            boolean first = true;

            sb.append("filename:");
            if (this.filename == null) {
                sb.append("null");
            } else {
                sb.append(this.filename);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("modelInXml:");
            if (this.modelInXml == null) {
                sb.append("null");
            } else {
                sb.append(this.modelInXml);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class DeployModelWithFile_argsStandardSchemeFactory implements SchemeFactory {
            public DeployModelWithFile_argsStandardScheme getScheme() {
                return new DeployModelWithFile_argsStandardScheme();
            }
        }

        private static class DeployModelWithFile_argsStandardScheme extends StandardScheme<DeployModelWithFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, DeployModelWithFile_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // FILENAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.filename = iprot.readString();
                            struct.setFilenameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // MODEL_IN_XML
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.modelInXml = iprot.readString();
                            struct.setModelInXmlIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, DeployModelWithFile_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.filename != null) {
                    oprot.writeFieldBegin(FILENAME_FIELD_DESC);
                    oprot.writeString(struct.filename);
                    oprot.writeFieldEnd();
                }
                if (struct.modelInXml != null) {
                    oprot.writeFieldBegin(MODEL_IN_XML_FIELD_DESC);
                    oprot.writeString(struct.modelInXml);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class DeployModelWithFile_argsTupleSchemeFactory implements SchemeFactory {
            public DeployModelWithFile_argsTupleScheme getScheme() {
                return new DeployModelWithFile_argsTupleScheme();
            }
        }

        private static class DeployModelWithFile_argsTupleScheme extends TupleScheme<DeployModelWithFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, DeployModelWithFile_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFilename()) {
                    optionals.set(0);
                }
                if (struct.isSetModelInXml()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetFilename()) {
                    oprot.writeString(struct.filename);
                }
                if (struct.isSetModelInXml()) {
                    oprot.writeString(struct.modelInXml);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, DeployModelWithFile_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.filename = iprot.readString();
                    struct.setFilenameIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.modelInXml = iprot.readString();
                    struct.setModelInXmlIsSet(true);
                }
            }
        }

    }

    public static class DeployModelWithFile_result
            implements org.apache.thrift.TBase<DeployModelWithFile_result, DeployModelWithFile_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "DeployModelWithFile_result");

        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new DeployModelWithFile_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new DeployModelWithFile_resultTupleSchemeFactory());
        }

        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeployModelWithFile_result.class,
                    metaDataMap);
        }

        public DeployModelWithFile_result() {
        }

        public DeployModelWithFile_result(AsapiException asapiEx) {
            this();
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public DeployModelWithFile_result(DeployModelWithFile_result other) {
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public DeployModelWithFile_result deepCopy() {
            return new DeployModelWithFile_result(this);
        }

        @Override
        public void clear() {
            this.asapiEx = null;
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public DeployModelWithFile_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof DeployModelWithFile_result)
                return this.equals((DeployModelWithFile_result) that);
            return false;
        }

        public boolean equals(DeployModelWithFile_result that) {
            if (that == null)
                return false;

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(DeployModelWithFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            DeployModelWithFile_result typedOther = (DeployModelWithFile_result) other;

            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("DeployModelWithFile_result(");
            boolean first = true;

            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class DeployModelWithFile_resultStandardSchemeFactory implements SchemeFactory {
            public DeployModelWithFile_resultStandardScheme getScheme() {
                return new DeployModelWithFile_resultStandardScheme();
            }
        }

        private static class DeployModelWithFile_resultStandardScheme
                extends StandardScheme<DeployModelWithFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, DeployModelWithFile_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, DeployModelWithFile_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class DeployModelWithFile_resultTupleSchemeFactory implements SchemeFactory {
            public DeployModelWithFile_resultTupleScheme getScheme() {
                return new DeployModelWithFile_resultTupleScheme();
            }
        }

        private static class DeployModelWithFile_resultTupleScheme extends TupleScheme<DeployModelWithFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, DeployModelWithFile_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetAsapiEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, DeployModelWithFile_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class NewModel_args
            implements org.apache.thrift.TBase<NewModel_args, NewModel_args._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "NewModel_args");

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new NewModel_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new NewModel_argsTupleSchemeFactory());
        }

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NewModel_args.class, metaDataMap);
        }

        public NewModel_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public NewModel_args(NewModel_args other) {
        }

        public NewModel_args deepCopy() {
            return new NewModel_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof NewModel_args)
                return this.equals((NewModel_args) that);
            return false;
        }

        public boolean equals(NewModel_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(NewModel_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            NewModel_args typedOther = (NewModel_args) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("NewModel_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class NewModel_argsStandardSchemeFactory implements SchemeFactory {
            public NewModel_argsStandardScheme getScheme() {
                return new NewModel_argsStandardScheme();
            }
        }

        private static class NewModel_argsStandardScheme extends StandardScheme<NewModel_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, NewModel_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, NewModel_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class NewModel_argsTupleSchemeFactory implements SchemeFactory {
            public NewModel_argsTupleScheme getScheme() {
                return new NewModel_argsTupleScheme();
            }
        }

        private static class NewModel_argsTupleScheme extends TupleScheme<NewModel_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, NewModel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, NewModel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class NewModel_result implements org.apache.thrift.TBase<NewModel_result, NewModel_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "NewModel_result");

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new NewModel_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new NewModel_resultTupleSchemeFactory());
        }

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NewModel_result.class, metaDataMap);
        }

        public NewModel_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public NewModel_result(NewModel_result other) {
        }

        public NewModel_result deepCopy() {
            return new NewModel_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof NewModel_result)
                return this.equals((NewModel_result) that);
            return false;
        }

        public boolean equals(NewModel_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(NewModel_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            NewModel_result typedOther = (NewModel_result) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("NewModel_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class NewModel_resultStandardSchemeFactory implements SchemeFactory {
            public NewModel_resultStandardScheme getScheme() {
                return new NewModel_resultStandardScheme();
            }
        }

        private static class NewModel_resultStandardScheme extends StandardScheme<NewModel_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, NewModel_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, NewModel_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class NewModel_resultTupleSchemeFactory implements SchemeFactory {
            public NewModel_resultTupleScheme getScheme() {
                return new NewModel_resultTupleScheme();
            }
        }

        private static class NewModel_resultTupleScheme extends TupleScheme<NewModel_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, NewModel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, NewModel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class RunModel_args
            implements org.apache.thrift.TBase<RunModel_args, RunModel_args._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "RunModel_args");

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new RunModel_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new RunModel_argsTupleSchemeFactory());
        }

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RunModel_args.class, metaDataMap);
        }

        public RunModel_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public RunModel_args(RunModel_args other) {
        }

        public RunModel_args deepCopy() {
            return new RunModel_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof RunModel_args)
                return this.equals((RunModel_args) that);
            return false;
        }

        public boolean equals(RunModel_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(RunModel_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            RunModel_args typedOther = (RunModel_args) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("RunModel_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class RunModel_argsStandardSchemeFactory implements SchemeFactory {
            public RunModel_argsStandardScheme getScheme() {
                return new RunModel_argsStandardScheme();
            }
        }

        private static class RunModel_argsStandardScheme extends StandardScheme<RunModel_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, RunModel_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, RunModel_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class RunModel_argsTupleSchemeFactory implements SchemeFactory {
            public RunModel_argsTupleScheme getScheme() {
                return new RunModel_argsTupleScheme();
            }
        }

        private static class RunModel_argsTupleScheme extends TupleScheme<RunModel_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, RunModel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, RunModel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class RunModel_result implements org.apache.thrift.TBase<RunModel_result, RunModel_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "RunModel_result");

        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new RunModel_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new RunModel_resultTupleSchemeFactory());
        }

        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RunModel_result.class, metaDataMap);
        }

        public RunModel_result() {
        }

        public RunModel_result(AsapiException asapiEx) {
            this();
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public RunModel_result(RunModel_result other) {
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public RunModel_result deepCopy() {
            return new RunModel_result(this);
        }

        @Override
        public void clear() {
            this.asapiEx = null;
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public RunModel_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof RunModel_result)
                return this.equals((RunModel_result) that);
            return false;
        }

        public boolean equals(RunModel_result that) {
            if (that == null)
                return false;

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(RunModel_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            RunModel_result typedOther = (RunModel_result) other;

            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("RunModel_result(");
            boolean first = true;

            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class RunModel_resultStandardSchemeFactory implements SchemeFactory {
            public RunModel_resultStandardScheme getScheme() {
                return new RunModel_resultStandardScheme();
            }
        }

        private static class RunModel_resultStandardScheme extends StandardScheme<RunModel_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, RunModel_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, RunModel_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class RunModel_resultTupleSchemeFactory implements SchemeFactory {
            public RunModel_resultTupleScheme getScheme() {
                return new RunModel_resultTupleScheme();
            }
        }

        private static class RunModel_resultTupleScheme extends TupleScheme<RunModel_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, RunModel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetAsapiEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, RunModel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class PauseModel_args implements org.apache.thrift.TBase<PauseModel_args, PauseModel_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "PauseModel_args");

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new PauseModel_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new PauseModel_argsTupleSchemeFactory());
        }

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PauseModel_args.class, metaDataMap);
        }

        public PauseModel_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public PauseModel_args(PauseModel_args other) {
        }

        public PauseModel_args deepCopy() {
            return new PauseModel_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof PauseModel_args)
                return this.equals((PauseModel_args) that);
            return false;
        }

        public boolean equals(PauseModel_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(PauseModel_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            PauseModel_args typedOther = (PauseModel_args) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("PauseModel_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class PauseModel_argsStandardSchemeFactory implements SchemeFactory {
            public PauseModel_argsStandardScheme getScheme() {
                return new PauseModel_argsStandardScheme();
            }
        }

        private static class PauseModel_argsStandardScheme extends StandardScheme<PauseModel_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, PauseModel_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, PauseModel_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class PauseModel_argsTupleSchemeFactory implements SchemeFactory {
            public PauseModel_argsTupleScheme getScheme() {
                return new PauseModel_argsTupleScheme();
            }
        }

        private static class PauseModel_argsTupleScheme extends TupleScheme<PauseModel_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, PauseModel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, PauseModel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class PauseModel_result implements
            org.apache.thrift.TBase<PauseModel_result, PauseModel_result._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "PauseModel_result");

        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new PauseModel_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new PauseModel_resultTupleSchemeFactory());
        }

        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PauseModel_result.class, metaDataMap);
        }

        public PauseModel_result() {
        }

        public PauseModel_result(AsapiException asapiEx) {
            this();
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public PauseModel_result(PauseModel_result other) {
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public PauseModel_result deepCopy() {
            return new PauseModel_result(this);
        }

        @Override
        public void clear() {
            this.asapiEx = null;
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public PauseModel_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof PauseModel_result)
                return this.equals((PauseModel_result) that);
            return false;
        }

        public boolean equals(PauseModel_result that) {
            if (that == null)
                return false;

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(PauseModel_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            PauseModel_result typedOther = (PauseModel_result) other;

            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("PauseModel_result(");
            boolean first = true;

            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class PauseModel_resultStandardSchemeFactory implements SchemeFactory {
            public PauseModel_resultStandardScheme getScheme() {
                return new PauseModel_resultStandardScheme();
            }
        }

        private static class PauseModel_resultStandardScheme extends StandardScheme<PauseModel_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, PauseModel_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, PauseModel_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class PauseModel_resultTupleSchemeFactory implements SchemeFactory {
            public PauseModel_resultTupleScheme getScheme() {
                return new PauseModel_resultTupleScheme();
            }
        }

        private static class PauseModel_resultTupleScheme extends TupleScheme<PauseModel_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, PauseModel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetAsapiEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, PauseModel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class StopModel_args implements org.apache.thrift.TBase<StopModel_args, StopModel_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "StopModel_args");

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new StopModel_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new StopModel_argsTupleSchemeFactory());
        }

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StopModel_args.class, metaDataMap);
        }

        public StopModel_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public StopModel_args(StopModel_args other) {
        }

        public StopModel_args deepCopy() {
            return new StopModel_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof StopModel_args)
                return this.equals((StopModel_args) that);
            return false;
        }

        public boolean equals(StopModel_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(StopModel_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            StopModel_args typedOther = (StopModel_args) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("StopModel_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class StopModel_argsStandardSchemeFactory implements SchemeFactory {
            public StopModel_argsStandardScheme getScheme() {
                return new StopModel_argsStandardScheme();
            }
        }

        private static class StopModel_argsStandardScheme extends StandardScheme<StopModel_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, StopModel_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, StopModel_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class StopModel_argsTupleSchemeFactory implements SchemeFactory {
            public StopModel_argsTupleScheme getScheme() {
                return new StopModel_argsTupleScheme();
            }
        }

        private static class StopModel_argsTupleScheme extends TupleScheme<StopModel_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, StopModel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, StopModel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class StopModel_result implements org.apache.thrift.TBase<StopModel_result, StopModel_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "StopModel_result");

        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new StopModel_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new StopModel_resultTupleSchemeFactory());
        }

        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StopModel_result.class, metaDataMap);
        }

        public StopModel_result() {
        }

        public StopModel_result(AsapiException asapiEx) {
            this();
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public StopModel_result(StopModel_result other) {
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public StopModel_result deepCopy() {
            return new StopModel_result(this);
        }

        @Override
        public void clear() {
            this.asapiEx = null;
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public StopModel_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof StopModel_result)
                return this.equals((StopModel_result) that);
            return false;
        }

        public boolean equals(StopModel_result that) {
            if (that == null)
                return false;

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(StopModel_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            StopModel_result typedOther = (StopModel_result) other;

            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("StopModel_result(");
            boolean first = true;

            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class StopModel_resultStandardSchemeFactory implements SchemeFactory {
            public StopModel_resultStandardScheme getScheme() {
                return new StopModel_resultStandardScheme();
            }
        }

        private static class StopModel_resultStandardScheme extends StandardScheme<StopModel_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, StopModel_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, StopModel_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class StopModel_resultTupleSchemeFactory implements SchemeFactory {
            public StopModel_resultTupleScheme getScheme() {
                return new StopModel_resultTupleScheme();
            }
        }

        private static class StopModel_resultTupleScheme extends TupleScheme<StopModel_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, StopModel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetAsapiEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, StopModel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class GetComponents_args implements
            org.apache.thrift.TBase<GetComponents_args, GetComponents_args._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetComponents_args");

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetComponents_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetComponents_argsTupleSchemeFactory());
        }

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetComponents_args.class, metaDataMap);
        }

        public GetComponents_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetComponents_args(GetComponents_args other) {
        }

        public GetComponents_args deepCopy() {
            return new GetComponents_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetComponents_args)
                return this.equals((GetComponents_args) that);
            return false;
        }

        public boolean equals(GetComponents_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetComponents_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetComponents_args typedOther = (GetComponents_args) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetComponents_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetComponents_argsStandardSchemeFactory implements SchemeFactory {
            public GetComponents_argsStandardScheme getScheme() {
                return new GetComponents_argsStandardScheme();
            }
        }

        private static class GetComponents_argsStandardScheme extends StandardScheme<GetComponents_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetComponents_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetComponents_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetComponents_argsTupleSchemeFactory implements SchemeFactory {
            public GetComponents_argsTupleScheme getScheme() {
                return new GetComponents_argsTupleScheme();
            }
        }

        private static class GetComponents_argsTupleScheme extends TupleScheme<GetComponents_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetComponents_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetComponents_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class GetComponents_result
            implements org.apache.thrift.TBase<GetComponents_result, GetComponents_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetComponents_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetComponents_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetComponents_resultTupleSchemeFactory());
        }

        public List<String> success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                    new org.apache.thrift.meta_data.FieldMetaData("success",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                    new org.apache.thrift.meta_data.FieldValueMetaData(
                                            org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetComponents_result.class, metaDataMap);
        }

        public GetComponents_result() {
        }

        public GetComponents_result(List<String> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetComponents_result(GetComponents_result other) {
            if (other.isSetSuccess()) {
                List<String> __this__success = new ArrayList<String>();
                for (String other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
        }

        public GetComponents_result deepCopy() {
            return new GetComponents_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(String elem) {
            if (this.success == null) {
                this.success = new ArrayList<String>();
            }
            this.success.add(elem);
        }

        public List<String> getSuccess() {
            return this.success;
        }

        public GetComponents_result setSuccess(List<String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((List<String>) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetComponents_result)
                return this.equals((GetComponents_result) that);
            return false;
        }

        public boolean equals(GetComponents_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetComponents_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetComponents_result typedOther = (GetComponents_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetComponents_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetComponents_resultStandardSchemeFactory implements SchemeFactory {
            public GetComponents_resultStandardScheme getScheme() {
                return new GetComponents_resultStandardScheme();
            }
        }

        private static class GetComponents_resultStandardScheme extends StandardScheme<GetComponents_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetComponents_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                                struct.success = new ArrayList<String>(_list8.size);
                                for (int _i9 = 0; _i9 < _list8.size; ++_i9) {
                                    String _elem10; // required
                                    _elem10 = iprot.readString();
                                    struct.success.add(_elem10);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetComponents_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (String _iter11 : struct.success) {
                            oprot.writeString(_iter11);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetComponents_resultTupleSchemeFactory implements SchemeFactory {
            public GetComponents_resultTupleScheme getScheme() {
                return new GetComponents_resultTupleScheme();
            }
        }

        private static class GetComponents_resultTupleScheme extends TupleScheme<GetComponents_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetComponents_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (String _iter12 : struct.success) {
                            oprot.writeString(_iter12);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetComponents_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new ArrayList<String>(_list13.size);
                        for (int _i14 = 0; _i14 < _list13.size; ++_i14) {
                            String _elem15; // required
                            _elem15 = iprot.readString();
                            struct.success.add(_elem15);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class GetChannels_args implements org.apache.thrift.TBase<GetChannels_args, GetChannels_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetChannels_args");

        private static final org.apache.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "componentID", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetChannels_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetChannels_argsTupleSchemeFactory());
        }

        public String componentID; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPONENT_ID((short) 1, "componentID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // COMPONENT_ID
                    return COMPONENT_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("componentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetChannels_args.class, metaDataMap);
        }

        public GetChannels_args() {
        }

        public GetChannels_args(String componentID) {
            this();
            this.componentID = componentID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetChannels_args(GetChannels_args other) {
            if (other.isSetComponentID()) {
                this.componentID = other.componentID;
            }
        }

        public GetChannels_args deepCopy() {
            return new GetChannels_args(this);
        }

        @Override
        public void clear() {
            this.componentID = null;
        }

        public String getComponentID() {
            return this.componentID;
        }

        public GetChannels_args setComponentID(String componentID) {
            this.componentID = componentID;
            return this;
        }

        public void unsetComponentID() {
            this.componentID = null;
        }

        /**
         * Returns true if field componentID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetComponentID() {
            return this.componentID != null;
        }

        public void setComponentIDIsSet(boolean value) {
            if (!value) {
                this.componentID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case COMPONENT_ID:
                if (value == null) {
                    unsetComponentID();
                } else {
                    setComponentID((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case COMPONENT_ID:
                return getComponentID();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case COMPONENT_ID:
                return isSetComponentID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetChannels_args)
                return this.equals((GetChannels_args) that);
            return false;
        }

        public boolean equals(GetChannels_args that) {
            if (that == null)
                return false;

            boolean this_present_componentID = true && this.isSetComponentID();
            boolean that_present_componentID = true && that.isSetComponentID();
            if (this_present_componentID || that_present_componentID) {
                if (!(this_present_componentID && that_present_componentID))
                    return false;
                if (!this.componentID.equals(that.componentID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetChannels_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetChannels_args typedOther = (GetChannels_args) other;

            lastComparison = Boolean.valueOf(isSetComponentID()).compareTo(typedOther.isSetComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentID, typedOther.componentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetChannels_args(");
            boolean first = true;

            sb.append("componentID:");
            if (this.componentID == null) {
                sb.append("null");
            } else {
                sb.append(this.componentID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetChannels_argsStandardSchemeFactory implements SchemeFactory {
            public GetChannels_argsStandardScheme getScheme() {
                return new GetChannels_argsStandardScheme();
            }
        }

        private static class GetChannels_argsStandardScheme extends StandardScheme<GetChannels_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetChannels_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.componentID = iprot.readString();
                            struct.setComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetChannels_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.componentID != null) {
                    oprot.writeFieldBegin(COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.componentID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetChannels_argsTupleSchemeFactory implements SchemeFactory {
            public GetChannels_argsTupleScheme getScheme() {
                return new GetChannels_argsTupleScheme();
            }
        }

        private static class GetChannels_argsTupleScheme extends TupleScheme<GetChannels_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetChannels_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetComponentID()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetComponentID()) {
                    oprot.writeString(struct.componentID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetChannels_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.componentID = iprot.readString();
                    struct.setComponentIDIsSet(true);
                }
            }
        }

    }

    public static class GetChannels_result implements
            org.apache.thrift.TBase<GetChannels_result, GetChannels_result._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetChannels_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetChannels_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetChannels_resultTupleSchemeFactory());
        }

        public List<String> success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                    new org.apache.thrift.meta_data.FieldMetaData("success",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                    new org.apache.thrift.meta_data.FieldValueMetaData(
                                            org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetChannels_result.class, metaDataMap);
        }

        public GetChannels_result() {
        }

        public GetChannels_result(List<String> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetChannels_result(GetChannels_result other) {
            if (other.isSetSuccess()) {
                List<String> __this__success = new ArrayList<String>();
                for (String other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
        }

        public GetChannels_result deepCopy() {
            return new GetChannels_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(String elem) {
            if (this.success == null) {
                this.success = new ArrayList<String>();
            }
            this.success.add(elem);
        }

        public List<String> getSuccess() {
            return this.success;
        }

        public GetChannels_result setSuccess(List<String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((List<String>) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetChannels_result)
                return this.equals((GetChannels_result) that);
            return false;
        }

        public boolean equals(GetChannels_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetChannels_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetChannels_result typedOther = (GetChannels_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetChannels_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetChannels_resultStandardSchemeFactory implements SchemeFactory {
            public GetChannels_resultStandardScheme getScheme() {
                return new GetChannels_resultStandardScheme();
            }
        }

        private static class GetChannels_resultStandardScheme extends StandardScheme<GetChannels_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetChannels_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                                struct.success = new ArrayList<String>(_list16.size);
                                for (int _i17 = 0; _i17 < _list16.size; ++_i17) {
                                    String _elem18; // required
                                    _elem18 = iprot.readString();
                                    struct.success.add(_elem18);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetChannels_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (String _iter19 : struct.success) {
                            oprot.writeString(_iter19);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetChannels_resultTupleSchemeFactory implements SchemeFactory {
            public GetChannels_resultTupleScheme getScheme() {
                return new GetChannels_resultTupleScheme();
            }
        }

        private static class GetChannels_resultTupleScheme extends TupleScheme<GetChannels_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetChannels_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (String _iter20 : struct.success) {
                            oprot.writeString(_iter20);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetChannels_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new ArrayList<String>(_list21.size);
                        for (int _i22 = 0; _i22 < _list21.size; ++_i22) {
                            String _elem23; // required
                            _elem23 = iprot.readString();
                            struct.success.add(_elem23);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class InsertComponent_args
            implements org.apache.thrift.TBase<InsertComponent_args, InsertComponent_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "InsertComponent_args");

        private static final org.apache.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "componentID", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField COMPONENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "componentType", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new InsertComponent_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new InsertComponent_argsTupleSchemeFactory());
        }

        public String componentID; // required
        public String componentType; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPONENT_ID((short) 1, "componentID"), COMPONENT_TYPE((short) 2, "componentType");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // COMPONENT_ID
                    return COMPONENT_ID;
                case 2: // COMPONENT_TYPE
                    return COMPONENT_TYPE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("componentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.COMPONENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("componentType",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InsertComponent_args.class, metaDataMap);
        }

        public InsertComponent_args() {
        }

        public InsertComponent_args(String componentID, String componentType) {
            this();
            this.componentID = componentID;
            this.componentType = componentType;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public InsertComponent_args(InsertComponent_args other) {
            if (other.isSetComponentID()) {
                this.componentID = other.componentID;
            }
            if (other.isSetComponentType()) {
                this.componentType = other.componentType;
            }
        }

        public InsertComponent_args deepCopy() {
            return new InsertComponent_args(this);
        }

        @Override
        public void clear() {
            this.componentID = null;
            this.componentType = null;
        }

        public String getComponentID() {
            return this.componentID;
        }

        public InsertComponent_args setComponentID(String componentID) {
            this.componentID = componentID;
            return this;
        }

        public void unsetComponentID() {
            this.componentID = null;
        }

        /**
         * Returns true if field componentID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetComponentID() {
            return this.componentID != null;
        }

        public void setComponentIDIsSet(boolean value) {
            if (!value) {
                this.componentID = null;
            }
        }

        public String getComponentType() {
            return this.componentType;
        }

        public InsertComponent_args setComponentType(String componentType) {
            this.componentType = componentType;
            return this;
        }

        public void unsetComponentType() {
            this.componentType = null;
        }

        /**
         * Returns true if field componentType is set (has been assigned a
         * value) and false otherwise
         */
        public boolean isSetComponentType() {
            return this.componentType != null;
        }

        public void setComponentTypeIsSet(boolean value) {
            if (!value) {
                this.componentType = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case COMPONENT_ID:
                if (value == null) {
                    unsetComponentID();
                } else {
                    setComponentID((String) value);
                }
                break;

            case COMPONENT_TYPE:
                if (value == null) {
                    unsetComponentType();
                } else {
                    setComponentType((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case COMPONENT_ID:
                return getComponentID();

            case COMPONENT_TYPE:
                return getComponentType();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case COMPONENT_ID:
                return isSetComponentID();
            case COMPONENT_TYPE:
                return isSetComponentType();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof InsertComponent_args)
                return this.equals((InsertComponent_args) that);
            return false;
        }

        public boolean equals(InsertComponent_args that) {
            if (that == null)
                return false;

            boolean this_present_componentID = true && this.isSetComponentID();
            boolean that_present_componentID = true && that.isSetComponentID();
            if (this_present_componentID || that_present_componentID) {
                if (!(this_present_componentID && that_present_componentID))
                    return false;
                if (!this.componentID.equals(that.componentID))
                    return false;
            }

            boolean this_present_componentType = true && this.isSetComponentType();
            boolean that_present_componentType = true && that.isSetComponentType();
            if (this_present_componentType || that_present_componentType) {
                if (!(this_present_componentType && that_present_componentType))
                    return false;
                if (!this.componentType.equals(that.componentType))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(InsertComponent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            InsertComponent_args typedOther = (InsertComponent_args) other;

            lastComparison = Boolean.valueOf(isSetComponentID()).compareTo(typedOther.isSetComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentID, typedOther.componentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetComponentType()).compareTo(typedOther.isSetComponentType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetComponentType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentType, typedOther.componentType);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("InsertComponent_args(");
            boolean first = true;

            sb.append("componentID:");
            if (this.componentID == null) {
                sb.append("null");
            } else {
                sb.append(this.componentID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("componentType:");
            if (this.componentType == null) {
                sb.append("null");
            } else {
                sb.append(this.componentType);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class InsertComponent_argsStandardSchemeFactory implements SchemeFactory {
            public InsertComponent_argsStandardScheme getScheme() {
                return new InsertComponent_argsStandardScheme();
            }
        }

        private static class InsertComponent_argsStandardScheme extends StandardScheme<InsertComponent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, InsertComponent_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.componentID = iprot.readString();
                            struct.setComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // COMPONENT_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.componentType = iprot.readString();
                            struct.setComponentTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, InsertComponent_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.componentID != null) {
                    oprot.writeFieldBegin(COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.componentID);
                    oprot.writeFieldEnd();
                }
                if (struct.componentType != null) {
                    oprot.writeFieldBegin(COMPONENT_TYPE_FIELD_DESC);
                    oprot.writeString(struct.componentType);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class InsertComponent_argsTupleSchemeFactory implements SchemeFactory {
            public InsertComponent_argsTupleScheme getScheme() {
                return new InsertComponent_argsTupleScheme();
            }
        }

        private static class InsertComponent_argsTupleScheme extends TupleScheme<InsertComponent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, InsertComponent_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetComponentID()) {
                    optionals.set(0);
                }
                if (struct.isSetComponentType()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetComponentID()) {
                    oprot.writeString(struct.componentID);
                }
                if (struct.isSetComponentType()) {
                    oprot.writeString(struct.componentType);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, InsertComponent_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.componentID = iprot.readString();
                    struct.setComponentIDIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.componentType = iprot.readString();
                    struct.setComponentTypeIsSet(true);
                }
            }
        }

    }

    public static class InsertComponent_result
            implements org.apache.thrift.TBase<InsertComponent_result, InsertComponent_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "InsertComponent_result");

        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new InsertComponent_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new InsertComponent_resultTupleSchemeFactory());
        }

        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InsertComponent_result.class, metaDataMap);
        }

        public InsertComponent_result() {
        }

        public InsertComponent_result(AsapiException asapiEx) {
            this();
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public InsertComponent_result(InsertComponent_result other) {
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public InsertComponent_result deepCopy() {
            return new InsertComponent_result(this);
        }

        @Override
        public void clear() {
            this.asapiEx = null;
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public InsertComponent_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof InsertComponent_result)
                return this.equals((InsertComponent_result) that);
            return false;
        }

        public boolean equals(InsertComponent_result that) {
            if (that == null)
                return false;

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(InsertComponent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            InsertComponent_result typedOther = (InsertComponent_result) other;

            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("InsertComponent_result(");
            boolean first = true;

            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class InsertComponent_resultStandardSchemeFactory implements SchemeFactory {
            public InsertComponent_resultStandardScheme getScheme() {
                return new InsertComponent_resultStandardScheme();
            }
        }

        private static class InsertComponent_resultStandardScheme extends StandardScheme<InsertComponent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, InsertComponent_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, InsertComponent_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class InsertComponent_resultTupleSchemeFactory implements SchemeFactory {
            public InsertComponent_resultTupleScheme getScheme() {
                return new InsertComponent_resultTupleScheme();
            }
        }

        private static class InsertComponent_resultTupleScheme extends TupleScheme<InsertComponent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, InsertComponent_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetAsapiEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, InsertComponent_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class RemoveComponent_args
            implements org.apache.thrift.TBase<RemoveComponent_args, RemoveComponent_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "RemoveComponent_args");

        private static final org.apache.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "componentID", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new RemoveComponent_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new RemoveComponent_argsTupleSchemeFactory());
        }

        public String componentID; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPONENT_ID((short) 1, "componentID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // COMPONENT_ID
                    return COMPONENT_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("componentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveComponent_args.class, metaDataMap);
        }

        public RemoveComponent_args() {
        }

        public RemoveComponent_args(String componentID) {
            this();
            this.componentID = componentID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public RemoveComponent_args(RemoveComponent_args other) {
            if (other.isSetComponentID()) {
                this.componentID = other.componentID;
            }
        }

        public RemoveComponent_args deepCopy() {
            return new RemoveComponent_args(this);
        }

        @Override
        public void clear() {
            this.componentID = null;
        }

        public String getComponentID() {
            return this.componentID;
        }

        public RemoveComponent_args setComponentID(String componentID) {
            this.componentID = componentID;
            return this;
        }

        public void unsetComponentID() {
            this.componentID = null;
        }

        /**
         * Returns true if field componentID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetComponentID() {
            return this.componentID != null;
        }

        public void setComponentIDIsSet(boolean value) {
            if (!value) {
                this.componentID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case COMPONENT_ID:
                if (value == null) {
                    unsetComponentID();
                } else {
                    setComponentID((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case COMPONENT_ID:
                return getComponentID();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case COMPONENT_ID:
                return isSetComponentID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof RemoveComponent_args)
                return this.equals((RemoveComponent_args) that);
            return false;
        }

        public boolean equals(RemoveComponent_args that) {
            if (that == null)
                return false;

            boolean this_present_componentID = true && this.isSetComponentID();
            boolean that_present_componentID = true && that.isSetComponentID();
            if (this_present_componentID || that_present_componentID) {
                if (!(this_present_componentID && that_present_componentID))
                    return false;
                if (!this.componentID.equals(that.componentID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(RemoveComponent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            RemoveComponent_args typedOther = (RemoveComponent_args) other;

            lastComparison = Boolean.valueOf(isSetComponentID()).compareTo(typedOther.isSetComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentID, typedOther.componentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("RemoveComponent_args(");
            boolean first = true;

            sb.append("componentID:");
            if (this.componentID == null) {
                sb.append("null");
            } else {
                sb.append(this.componentID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class RemoveComponent_argsStandardSchemeFactory implements SchemeFactory {
            public RemoveComponent_argsStandardScheme getScheme() {
                return new RemoveComponent_argsStandardScheme();
            }
        }

        private static class RemoveComponent_argsStandardScheme extends StandardScheme<RemoveComponent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveComponent_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.componentID = iprot.readString();
                            struct.setComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveComponent_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.componentID != null) {
                    oprot.writeFieldBegin(COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.componentID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class RemoveComponent_argsTupleSchemeFactory implements SchemeFactory {
            public RemoveComponent_argsTupleScheme getScheme() {
                return new RemoveComponent_argsTupleScheme();
            }
        }

        private static class RemoveComponent_argsTupleScheme extends TupleScheme<RemoveComponent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, RemoveComponent_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetComponentID()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetComponentID()) {
                    oprot.writeString(struct.componentID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, RemoveComponent_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.componentID = iprot.readString();
                    struct.setComponentIDIsSet(true);
                }
            }
        }

    }

    public static class RemoveComponent_result
            implements org.apache.thrift.TBase<RemoveComponent_result, RemoveComponent_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "RemoveComponent_result");

        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new RemoveComponent_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new RemoveComponent_resultTupleSchemeFactory());
        }

        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveComponent_result.class, metaDataMap);
        }

        public RemoveComponent_result() {
        }

        public RemoveComponent_result(AsapiException asapiEx) {
            this();
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public RemoveComponent_result(RemoveComponent_result other) {
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public RemoveComponent_result deepCopy() {
            return new RemoveComponent_result(this);
        }

        @Override
        public void clear() {
            this.asapiEx = null;
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public RemoveComponent_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof RemoveComponent_result)
                return this.equals((RemoveComponent_result) that);
            return false;
        }

        public boolean equals(RemoveComponent_result that) {
            if (that == null)
                return false;

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(RemoveComponent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            RemoveComponent_result typedOther = (RemoveComponent_result) other;

            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("RemoveComponent_result(");
            boolean first = true;

            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class RemoveComponent_resultStandardSchemeFactory implements SchemeFactory {
            public RemoveComponent_resultStandardScheme getScheme() {
                return new RemoveComponent_resultStandardScheme();
            }
        }

        private static class RemoveComponent_resultStandardScheme extends StandardScheme<RemoveComponent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveComponent_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveComponent_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class RemoveComponent_resultTupleSchemeFactory implements SchemeFactory {
            public RemoveComponent_resultTupleScheme getScheme() {
                return new RemoveComponent_resultTupleScheme();
            }
        }

        private static class RemoveComponent_resultTupleScheme extends TupleScheme<RemoveComponent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, RemoveComponent_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetAsapiEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, RemoveComponent_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class GetAllPorts_args implements org.apache.thrift.TBase<GetAllPorts_args, GetAllPorts_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetAllPorts_args");

        private static final org.apache.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "componentID", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetAllPorts_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetAllPorts_argsTupleSchemeFactory());
        }

        public String componentID; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPONENT_ID((short) 1, "componentID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // COMPONENT_ID
                    return COMPONENT_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("componentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAllPorts_args.class, metaDataMap);
        }

        public GetAllPorts_args() {
        }

        public GetAllPorts_args(String componentID) {
            this();
            this.componentID = componentID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetAllPorts_args(GetAllPorts_args other) {
            if (other.isSetComponentID()) {
                this.componentID = other.componentID;
            }
        }

        public GetAllPorts_args deepCopy() {
            return new GetAllPorts_args(this);
        }

        @Override
        public void clear() {
            this.componentID = null;
        }

        public String getComponentID() {
            return this.componentID;
        }

        public GetAllPorts_args setComponentID(String componentID) {
            this.componentID = componentID;
            return this;
        }

        public void unsetComponentID() {
            this.componentID = null;
        }

        /**
         * Returns true if field componentID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetComponentID() {
            return this.componentID != null;
        }

        public void setComponentIDIsSet(boolean value) {
            if (!value) {
                this.componentID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case COMPONENT_ID:
                if (value == null) {
                    unsetComponentID();
                } else {
                    setComponentID((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case COMPONENT_ID:
                return getComponentID();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case COMPONENT_ID:
                return isSetComponentID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetAllPorts_args)
                return this.equals((GetAllPorts_args) that);
            return false;
        }

        public boolean equals(GetAllPorts_args that) {
            if (that == null)
                return false;

            boolean this_present_componentID = true && this.isSetComponentID();
            boolean that_present_componentID = true && that.isSetComponentID();
            if (this_present_componentID || that_present_componentID) {
                if (!(this_present_componentID && that_present_componentID))
                    return false;
                if (!this.componentID.equals(that.componentID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetAllPorts_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetAllPorts_args typedOther = (GetAllPorts_args) other;

            lastComparison = Boolean.valueOf(isSetComponentID()).compareTo(typedOther.isSetComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentID, typedOther.componentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetAllPorts_args(");
            boolean first = true;

            sb.append("componentID:");
            if (this.componentID == null) {
                sb.append("null");
            } else {
                sb.append(this.componentID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetAllPorts_argsStandardSchemeFactory implements SchemeFactory {
            public GetAllPorts_argsStandardScheme getScheme() {
                return new GetAllPorts_argsStandardScheme();
            }
        }

        private static class GetAllPorts_argsStandardScheme extends StandardScheme<GetAllPorts_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllPorts_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.componentID = iprot.readString();
                            struct.setComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllPorts_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.componentID != null) {
                    oprot.writeFieldBegin(COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.componentID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetAllPorts_argsTupleSchemeFactory implements SchemeFactory {
            public GetAllPorts_argsTupleScheme getScheme() {
                return new GetAllPorts_argsTupleScheme();
            }
        }

        private static class GetAllPorts_argsTupleScheme extends TupleScheme<GetAllPorts_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetAllPorts_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetComponentID()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetComponentID()) {
                    oprot.writeString(struct.componentID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetAllPorts_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.componentID = iprot.readString();
                    struct.setComponentIDIsSet(true);
                }
            }
        }

    }

    public static class GetAllPorts_result implements
            org.apache.thrift.TBase<GetAllPorts_result, GetAllPorts_result._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetAllPorts_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetAllPorts_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetAllPorts_resultTupleSchemeFactory());
        }

        public List<String> success; // required
        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"), ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                    new org.apache.thrift.meta_data.FieldMetaData("success",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                    new org.apache.thrift.meta_data.FieldValueMetaData(
                                            org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAllPorts_result.class, metaDataMap);
        }

        public GetAllPorts_result() {
        }

        public GetAllPorts_result(List<String> success, AsapiException asapiEx) {
            this();
            this.success = success;
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetAllPorts_result(GetAllPorts_result other) {
            if (other.isSetSuccess()) {
                List<String> __this__success = new ArrayList<String>();
                for (String other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public GetAllPorts_result deepCopy() {
            return new GetAllPorts_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.asapiEx = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(String elem) {
            if (this.success == null) {
                this.success = new ArrayList<String>();
            }
            this.success.add(elem);
        }

        public List<String> getSuccess() {
            return this.success;
        }

        public GetAllPorts_result setSuccess(List<String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public GetAllPorts_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((List<String>) value);
                }
                break;

            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetAllPorts_result)
                return this.equals((GetAllPorts_result) that);
            return false;
        }

        public boolean equals(GetAllPorts_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetAllPorts_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetAllPorts_result typedOther = (GetAllPorts_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetAllPorts_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetAllPorts_resultStandardSchemeFactory implements SchemeFactory {
            public GetAllPorts_resultStandardScheme getScheme() {
                return new GetAllPorts_resultStandardScheme();
            }
        }

        private static class GetAllPorts_resultStandardScheme extends StandardScheme<GetAllPorts_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllPorts_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                                struct.success = new ArrayList<String>(_list24.size);
                                for (int _i25 = 0; _i25 < _list24.size; ++_i25) {
                                    String _elem26; // required
                                    _elem26 = iprot.readString();
                                    struct.success.add(_elem26);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllPorts_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (String _iter27 : struct.success) {
                            oprot.writeString(_iter27);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetAllPorts_resultTupleSchemeFactory implements SchemeFactory {
            public GetAllPorts_resultTupleScheme getScheme() {
                return new GetAllPorts_resultTupleScheme();
            }
        }

        private static class GetAllPorts_resultTupleScheme extends TupleScheme<GetAllPorts_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetAllPorts_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAsapiEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (String _iter28 : struct.success) {
                            oprot.writeString(_iter28);
                        }
                    }
                }
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetAllPorts_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new ArrayList<String>(_list29.size);
                        for (int _i30 = 0; _i30 < _list29.size; ++_i30) {
                            String _elem31; // required
                            _elem31 = iprot.readString();
                            struct.success.add(_elem31);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class GetInputPorts_args implements
            org.apache.thrift.TBase<GetInputPorts_args, GetInputPorts_args._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetInputPorts_args");

        private static final org.apache.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "componentID", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetInputPorts_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetInputPorts_argsTupleSchemeFactory());
        }

        public String componentID; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPONENT_ID((short) 1, "componentID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // COMPONENT_ID
                    return COMPONENT_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("componentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetInputPorts_args.class, metaDataMap);
        }

        public GetInputPorts_args() {
        }

        public GetInputPorts_args(String componentID) {
            this();
            this.componentID = componentID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetInputPorts_args(GetInputPorts_args other) {
            if (other.isSetComponentID()) {
                this.componentID = other.componentID;
            }
        }

        public GetInputPorts_args deepCopy() {
            return new GetInputPorts_args(this);
        }

        @Override
        public void clear() {
            this.componentID = null;
        }

        public String getComponentID() {
            return this.componentID;
        }

        public GetInputPorts_args setComponentID(String componentID) {
            this.componentID = componentID;
            return this;
        }

        public void unsetComponentID() {
            this.componentID = null;
        }

        /**
         * Returns true if field componentID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetComponentID() {
            return this.componentID != null;
        }

        public void setComponentIDIsSet(boolean value) {
            if (!value) {
                this.componentID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case COMPONENT_ID:
                if (value == null) {
                    unsetComponentID();
                } else {
                    setComponentID((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case COMPONENT_ID:
                return getComponentID();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case COMPONENT_ID:
                return isSetComponentID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetInputPorts_args)
                return this.equals((GetInputPorts_args) that);
            return false;
        }

        public boolean equals(GetInputPorts_args that) {
            if (that == null)
                return false;

            boolean this_present_componentID = true && this.isSetComponentID();
            boolean that_present_componentID = true && that.isSetComponentID();
            if (this_present_componentID || that_present_componentID) {
                if (!(this_present_componentID && that_present_componentID))
                    return false;
                if (!this.componentID.equals(that.componentID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetInputPorts_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetInputPorts_args typedOther = (GetInputPorts_args) other;

            lastComparison = Boolean.valueOf(isSetComponentID()).compareTo(typedOther.isSetComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentID, typedOther.componentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetInputPorts_args(");
            boolean first = true;

            sb.append("componentID:");
            if (this.componentID == null) {
                sb.append("null");
            } else {
                sb.append(this.componentID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetInputPorts_argsStandardSchemeFactory implements SchemeFactory {
            public GetInputPorts_argsStandardScheme getScheme() {
                return new GetInputPorts_argsStandardScheme();
            }
        }

        private static class GetInputPorts_argsStandardScheme extends StandardScheme<GetInputPorts_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetInputPorts_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.componentID = iprot.readString();
                            struct.setComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetInputPorts_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.componentID != null) {
                    oprot.writeFieldBegin(COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.componentID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetInputPorts_argsTupleSchemeFactory implements SchemeFactory {
            public GetInputPorts_argsTupleScheme getScheme() {
                return new GetInputPorts_argsTupleScheme();
            }
        }

        private static class GetInputPorts_argsTupleScheme extends TupleScheme<GetInputPorts_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetInputPorts_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetComponentID()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetComponentID()) {
                    oprot.writeString(struct.componentID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetInputPorts_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.componentID = iprot.readString();
                    struct.setComponentIDIsSet(true);
                }
            }
        }

    }

    public static class GetInputPorts_result
            implements org.apache.thrift.TBase<GetInputPorts_result, GetInputPorts_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetInputPorts_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetInputPorts_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetInputPorts_resultTupleSchemeFactory());
        }

        public List<String> success; // required
        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"), ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                    new org.apache.thrift.meta_data.FieldMetaData("success",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                    new org.apache.thrift.meta_data.FieldValueMetaData(
                                            org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetInputPorts_result.class, metaDataMap);
        }

        public GetInputPorts_result() {
        }

        public GetInputPorts_result(List<String> success, AsapiException asapiEx) {
            this();
            this.success = success;
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetInputPorts_result(GetInputPorts_result other) {
            if (other.isSetSuccess()) {
                List<String> __this__success = new ArrayList<String>();
                for (String other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public GetInputPorts_result deepCopy() {
            return new GetInputPorts_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.asapiEx = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(String elem) {
            if (this.success == null) {
                this.success = new ArrayList<String>();
            }
            this.success.add(elem);
        }

        public List<String> getSuccess() {
            return this.success;
        }

        public GetInputPorts_result setSuccess(List<String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public GetInputPorts_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((List<String>) value);
                }
                break;

            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetInputPorts_result)
                return this.equals((GetInputPorts_result) that);
            return false;
        }

        public boolean equals(GetInputPorts_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetInputPorts_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetInputPorts_result typedOther = (GetInputPorts_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetInputPorts_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetInputPorts_resultStandardSchemeFactory implements SchemeFactory {
            public GetInputPorts_resultStandardScheme getScheme() {
                return new GetInputPorts_resultStandardScheme();
            }
        }

        private static class GetInputPorts_resultStandardScheme extends StandardScheme<GetInputPorts_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetInputPorts_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                                struct.success = new ArrayList<String>(_list32.size);
                                for (int _i33 = 0; _i33 < _list32.size; ++_i33) {
                                    String _elem34; // required
                                    _elem34 = iprot.readString();
                                    struct.success.add(_elem34);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetInputPorts_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (String _iter35 : struct.success) {
                            oprot.writeString(_iter35);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetInputPorts_resultTupleSchemeFactory implements SchemeFactory {
            public GetInputPorts_resultTupleScheme getScheme() {
                return new GetInputPorts_resultTupleScheme();
            }
        }

        private static class GetInputPorts_resultTupleScheme extends TupleScheme<GetInputPorts_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetInputPorts_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAsapiEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (String _iter36 : struct.success) {
                            oprot.writeString(_iter36);
                        }
                    }
                }
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetInputPorts_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new ArrayList<String>(_list37.size);
                        for (int _i38 = 0; _i38 < _list37.size; ++_i38) {
                            String _elem39; // required
                            _elem39 = iprot.readString();
                            struct.success.add(_elem39);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class GetOutputPorts_args implements
            org.apache.thrift.TBase<GetOutputPorts_args, GetOutputPorts_args._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetOutputPorts_args");

        private static final org.apache.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "componentID", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetOutputPorts_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetOutputPorts_argsTupleSchemeFactory());
        }

        public String componentID; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPONENT_ID((short) 1, "componentID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // COMPONENT_ID
                    return COMPONENT_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("componentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetOutputPorts_args.class, metaDataMap);
        }

        public GetOutputPorts_args() {
        }

        public GetOutputPorts_args(String componentID) {
            this();
            this.componentID = componentID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetOutputPorts_args(GetOutputPorts_args other) {
            if (other.isSetComponentID()) {
                this.componentID = other.componentID;
            }
        }

        public GetOutputPorts_args deepCopy() {
            return new GetOutputPorts_args(this);
        }

        @Override
        public void clear() {
            this.componentID = null;
        }

        public String getComponentID() {
            return this.componentID;
        }

        public GetOutputPorts_args setComponentID(String componentID) {
            this.componentID = componentID;
            return this;
        }

        public void unsetComponentID() {
            this.componentID = null;
        }

        /**
         * Returns true if field componentID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetComponentID() {
            return this.componentID != null;
        }

        public void setComponentIDIsSet(boolean value) {
            if (!value) {
                this.componentID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case COMPONENT_ID:
                if (value == null) {
                    unsetComponentID();
                } else {
                    setComponentID((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case COMPONENT_ID:
                return getComponentID();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case COMPONENT_ID:
                return isSetComponentID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetOutputPorts_args)
                return this.equals((GetOutputPorts_args) that);
            return false;
        }

        public boolean equals(GetOutputPorts_args that) {
            if (that == null)
                return false;

            boolean this_present_componentID = true && this.isSetComponentID();
            boolean that_present_componentID = true && that.isSetComponentID();
            if (this_present_componentID || that_present_componentID) {
                if (!(this_present_componentID && that_present_componentID))
                    return false;
                if (!this.componentID.equals(that.componentID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetOutputPorts_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetOutputPorts_args typedOther = (GetOutputPorts_args) other;

            lastComparison = Boolean.valueOf(isSetComponentID()).compareTo(typedOther.isSetComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentID, typedOther.componentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetOutputPorts_args(");
            boolean first = true;

            sb.append("componentID:");
            if (this.componentID == null) {
                sb.append("null");
            } else {
                sb.append(this.componentID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetOutputPorts_argsStandardSchemeFactory implements SchemeFactory {
            public GetOutputPorts_argsStandardScheme getScheme() {
                return new GetOutputPorts_argsStandardScheme();
            }
        }

        private static class GetOutputPorts_argsStandardScheme extends StandardScheme<GetOutputPorts_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetOutputPorts_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.componentID = iprot.readString();
                            struct.setComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetOutputPorts_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.componentID != null) {
                    oprot.writeFieldBegin(COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.componentID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetOutputPorts_argsTupleSchemeFactory implements SchemeFactory {
            public GetOutputPorts_argsTupleScheme getScheme() {
                return new GetOutputPorts_argsTupleScheme();
            }
        }

        private static class GetOutputPorts_argsTupleScheme extends TupleScheme<GetOutputPorts_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetOutputPorts_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetComponentID()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetComponentID()) {
                    oprot.writeString(struct.componentID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetOutputPorts_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.componentID = iprot.readString();
                    struct.setComponentIDIsSet(true);
                }
            }
        }

    }

    public static class GetOutputPorts_result
            implements org.apache.thrift.TBase<GetOutputPorts_result, GetOutputPorts_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetOutputPorts_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetOutputPorts_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetOutputPorts_resultTupleSchemeFactory());
        }

        public List<String> success; // required
        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"), ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                    new org.apache.thrift.meta_data.FieldMetaData("success",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                    new org.apache.thrift.meta_data.FieldValueMetaData(
                                            org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetOutputPorts_result.class, metaDataMap);
        }

        public GetOutputPorts_result() {
        }

        public GetOutputPorts_result(List<String> success, AsapiException asapiEx) {
            this();
            this.success = success;
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetOutputPorts_result(GetOutputPorts_result other) {
            if (other.isSetSuccess()) {
                List<String> __this__success = new ArrayList<String>();
                for (String other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public GetOutputPorts_result deepCopy() {
            return new GetOutputPorts_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.asapiEx = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(String elem) {
            if (this.success == null) {
                this.success = new ArrayList<String>();
            }
            this.success.add(elem);
        }

        public List<String> getSuccess() {
            return this.success;
        }

        public GetOutputPorts_result setSuccess(List<String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public GetOutputPorts_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((List<String>) value);
                }
                break;

            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetOutputPorts_result)
                return this.equals((GetOutputPorts_result) that);
            return false;
        }

        public boolean equals(GetOutputPorts_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetOutputPorts_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetOutputPorts_result typedOther = (GetOutputPorts_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetOutputPorts_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetOutputPorts_resultStandardSchemeFactory implements SchemeFactory {
            public GetOutputPorts_resultStandardScheme getScheme() {
                return new GetOutputPorts_resultStandardScheme();
            }
        }

        private static class GetOutputPorts_resultStandardScheme extends StandardScheme<GetOutputPorts_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetOutputPorts_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                                struct.success = new ArrayList<String>(_list40.size);
                                for (int _i41 = 0; _i41 < _list40.size; ++_i41) {
                                    String _elem42; // required
                                    _elem42 = iprot.readString();
                                    struct.success.add(_elem42);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetOutputPorts_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (String _iter43 : struct.success) {
                            oprot.writeString(_iter43);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetOutputPorts_resultTupleSchemeFactory implements SchemeFactory {
            public GetOutputPorts_resultTupleScheme getScheme() {
                return new GetOutputPorts_resultTupleScheme();
            }
        }

        private static class GetOutputPorts_resultTupleScheme extends TupleScheme<GetOutputPorts_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetOutputPorts_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAsapiEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (String _iter44 : struct.success) {
                            oprot.writeString(_iter44);
                        }
                    }
                }
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetOutputPorts_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new ArrayList<String>(_list45.size);
                        for (int _i46 = 0; _i46 < _list45.size; ++_i46) {
                            String _elem47; // required
                            _elem47 = iprot.readString();
                            struct.success.add(_elem47);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class InsertChannel_args implements
            org.apache.thrift.TBase<InsertChannel_args, InsertChannel_args._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "InsertChannel_args");

        private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "channelID", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField SOURCE_COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "sourceComponentID", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField SOURCE_PORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "sourcePortID", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final org.apache.thrift.protocol.TField TARGET_COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "targetComponentID", org.apache.thrift.protocol.TType.STRING, (short) 4);
        private static final org.apache.thrift.protocol.TField TARGET_PORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "targetPortID", org.apache.thrift.protocol.TType.STRING, (short) 5);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new InsertChannel_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new InsertChannel_argsTupleSchemeFactory());
        }

        public String channelID; // required
        public String sourceComponentID; // required
        public String sourcePortID; // required
        public String targetComponentID; // required
        public String targetPortID; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CHANNEL_ID((short) 1, "channelID"), SOURCE_COMPONENT_ID((short) 2,
                    "sourceComponentID"), SOURCE_PORT_ID((short) 3, "sourcePortID"), TARGET_COMPONENT_ID((short) 4,
                            "targetComponentID"), TARGET_PORT_ID((short) 5, "targetPortID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // CHANNEL_ID
                    return CHANNEL_ID;
                case 2: // SOURCE_COMPONENT_ID
                    return SOURCE_COMPONENT_ID;
                case 3: // SOURCE_PORT_ID
                    return SOURCE_PORT_ID;
                case 4: // TARGET_COMPONENT_ID
                    return TARGET_COMPONENT_ID;
                case 5: // TARGET_PORT_ID
                    return TARGET_PORT_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.SOURCE_COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceComponentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.SOURCE_PORT_ID, new org.apache.thrift.meta_data.FieldMetaData("sourcePortID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.TARGET_COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("targetComponentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.TARGET_PORT_ID, new org.apache.thrift.meta_data.FieldMetaData("targetPortID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InsertChannel_args.class, metaDataMap);
        }

        public InsertChannel_args() {
        }

        public InsertChannel_args(String channelID, String sourceComponentID, String sourcePortID,
                String targetComponentID, String targetPortID) {
            this();
            this.channelID = channelID;
            this.sourceComponentID = sourceComponentID;
            this.sourcePortID = sourcePortID;
            this.targetComponentID = targetComponentID;
            this.targetPortID = targetPortID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public InsertChannel_args(InsertChannel_args other) {
            if (other.isSetChannelID()) {
                this.channelID = other.channelID;
            }
            if (other.isSetSourceComponentID()) {
                this.sourceComponentID = other.sourceComponentID;
            }
            if (other.isSetSourcePortID()) {
                this.sourcePortID = other.sourcePortID;
            }
            if (other.isSetTargetComponentID()) {
                this.targetComponentID = other.targetComponentID;
            }
            if (other.isSetTargetPortID()) {
                this.targetPortID = other.targetPortID;
            }
        }

        public InsertChannel_args deepCopy() {
            return new InsertChannel_args(this);
        }

        @Override
        public void clear() {
            this.channelID = null;
            this.sourceComponentID = null;
            this.sourcePortID = null;
            this.targetComponentID = null;
            this.targetPortID = null;
        }

        public String getChannelID() {
            return this.channelID;
        }

        public InsertChannel_args setChannelID(String channelID) {
            this.channelID = channelID;
            return this;
        }

        public void unsetChannelID() {
            this.channelID = null;
        }

        /**
         * Returns true if field channelID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetChannelID() {
            return this.channelID != null;
        }

        public void setChannelIDIsSet(boolean value) {
            if (!value) {
                this.channelID = null;
            }
        }

        public String getSourceComponentID() {
            return this.sourceComponentID;
        }

        public InsertChannel_args setSourceComponentID(String sourceComponentID) {
            this.sourceComponentID = sourceComponentID;
            return this;
        }

        public void unsetSourceComponentID() {
            this.sourceComponentID = null;
        }

        /**
         * Returns true if field sourceComponentID is set (has been assigned a
         * value) and false otherwise
         */
        public boolean isSetSourceComponentID() {
            return this.sourceComponentID != null;
        }

        public void setSourceComponentIDIsSet(boolean value) {
            if (!value) {
                this.sourceComponentID = null;
            }
        }

        public String getSourcePortID() {
            return this.sourcePortID;
        }

        public InsertChannel_args setSourcePortID(String sourcePortID) {
            this.sourcePortID = sourcePortID;
            return this;
        }

        public void unsetSourcePortID() {
            this.sourcePortID = null;
        }

        /**
         * Returns true if field sourcePortID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetSourcePortID() {
            return this.sourcePortID != null;
        }

        public void setSourcePortIDIsSet(boolean value) {
            if (!value) {
                this.sourcePortID = null;
            }
        }

        public String getTargetComponentID() {
            return this.targetComponentID;
        }

        public InsertChannel_args setTargetComponentID(String targetComponentID) {
            this.targetComponentID = targetComponentID;
            return this;
        }

        public void unsetTargetComponentID() {
            this.targetComponentID = null;
        }

        /**
         * Returns true if field targetComponentID is set (has been assigned a
         * value) and false otherwise
         */
        public boolean isSetTargetComponentID() {
            return this.targetComponentID != null;
        }

        public void setTargetComponentIDIsSet(boolean value) {
            if (!value) {
                this.targetComponentID = null;
            }
        }

        public String getTargetPortID() {
            return this.targetPortID;
        }

        public InsertChannel_args setTargetPortID(String targetPortID) {
            this.targetPortID = targetPortID;
            return this;
        }

        public void unsetTargetPortID() {
            this.targetPortID = null;
        }

        /**
         * Returns true if field targetPortID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetTargetPortID() {
            return this.targetPortID != null;
        }

        public void setTargetPortIDIsSet(boolean value) {
            if (!value) {
                this.targetPortID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case CHANNEL_ID:
                if (value == null) {
                    unsetChannelID();
                } else {
                    setChannelID((String) value);
                }
                break;

            case SOURCE_COMPONENT_ID:
                if (value == null) {
                    unsetSourceComponentID();
                } else {
                    setSourceComponentID((String) value);
                }
                break;

            case SOURCE_PORT_ID:
                if (value == null) {
                    unsetSourcePortID();
                } else {
                    setSourcePortID((String) value);
                }
                break;

            case TARGET_COMPONENT_ID:
                if (value == null) {
                    unsetTargetComponentID();
                } else {
                    setTargetComponentID((String) value);
                }
                break;

            case TARGET_PORT_ID:
                if (value == null) {
                    unsetTargetPortID();
                } else {
                    setTargetPortID((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case CHANNEL_ID:
                return getChannelID();

            case SOURCE_COMPONENT_ID:
                return getSourceComponentID();

            case SOURCE_PORT_ID:
                return getSourcePortID();

            case TARGET_COMPONENT_ID:
                return getTargetComponentID();

            case TARGET_PORT_ID:
                return getTargetPortID();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case CHANNEL_ID:
                return isSetChannelID();
            case SOURCE_COMPONENT_ID:
                return isSetSourceComponentID();
            case SOURCE_PORT_ID:
                return isSetSourcePortID();
            case TARGET_COMPONENT_ID:
                return isSetTargetComponentID();
            case TARGET_PORT_ID:
                return isSetTargetPortID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof InsertChannel_args)
                return this.equals((InsertChannel_args) that);
            return false;
        }

        public boolean equals(InsertChannel_args that) {
            if (that == null)
                return false;

            boolean this_present_channelID = true && this.isSetChannelID();
            boolean that_present_channelID = true && that.isSetChannelID();
            if (this_present_channelID || that_present_channelID) {
                if (!(this_present_channelID && that_present_channelID))
                    return false;
                if (!this.channelID.equals(that.channelID))
                    return false;
            }

            boolean this_present_sourceComponentID = true && this.isSetSourceComponentID();
            boolean that_present_sourceComponentID = true && that.isSetSourceComponentID();
            if (this_present_sourceComponentID || that_present_sourceComponentID) {
                if (!(this_present_sourceComponentID && that_present_sourceComponentID))
                    return false;
                if (!this.sourceComponentID.equals(that.sourceComponentID))
                    return false;
            }

            boolean this_present_sourcePortID = true && this.isSetSourcePortID();
            boolean that_present_sourcePortID = true && that.isSetSourcePortID();
            if (this_present_sourcePortID || that_present_sourcePortID) {
                if (!(this_present_sourcePortID && that_present_sourcePortID))
                    return false;
                if (!this.sourcePortID.equals(that.sourcePortID))
                    return false;
            }

            boolean this_present_targetComponentID = true && this.isSetTargetComponentID();
            boolean that_present_targetComponentID = true && that.isSetTargetComponentID();
            if (this_present_targetComponentID || that_present_targetComponentID) {
                if (!(this_present_targetComponentID && that_present_targetComponentID))
                    return false;
                if (!this.targetComponentID.equals(that.targetComponentID))
                    return false;
            }

            boolean this_present_targetPortID = true && this.isSetTargetPortID();
            boolean that_present_targetPortID = true && that.isSetTargetPortID();
            if (this_present_targetPortID || that_present_targetPortID) {
                if (!(this_present_targetPortID && that_present_targetPortID))
                    return false;
                if (!this.targetPortID.equals(that.targetPortID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(InsertChannel_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            InsertChannel_args typedOther = (InsertChannel_args) other;

            lastComparison = Boolean.valueOf(isSetChannelID()).compareTo(typedOther.isSetChannelID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetChannelID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelID, typedOther.channelID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSourceComponentID()).compareTo(typedOther.isSetSourceComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSourceComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceComponentID,
                        typedOther.sourceComponentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSourcePortID()).compareTo(typedOther.isSetSourcePortID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSourcePortID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourcePortID, typedOther.sourcePortID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetTargetComponentID()).compareTo(typedOther.isSetTargetComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTargetComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetComponentID,
                        typedOther.targetComponentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetTargetPortID()).compareTo(typedOther.isSetTargetPortID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTargetPortID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetPortID, typedOther.targetPortID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("InsertChannel_args(");
            boolean first = true;

            sb.append("channelID:");
            if (this.channelID == null) {
                sb.append("null");
            } else {
                sb.append(this.channelID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("sourceComponentID:");
            if (this.sourceComponentID == null) {
                sb.append("null");
            } else {
                sb.append(this.sourceComponentID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("sourcePortID:");
            if (this.sourcePortID == null) {
                sb.append("null");
            } else {
                sb.append(this.sourcePortID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("targetComponentID:");
            if (this.targetComponentID == null) {
                sb.append("null");
            } else {
                sb.append(this.targetComponentID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("targetPortID:");
            if (this.targetPortID == null) {
                sb.append("null");
            } else {
                sb.append(this.targetPortID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class InsertChannel_argsStandardSchemeFactory implements SchemeFactory {
            public InsertChannel_argsStandardScheme getScheme() {
                return new InsertChannel_argsStandardScheme();
            }
        }

        private static class InsertChannel_argsStandardScheme extends StandardScheme<InsertChannel_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, InsertChannel_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // CHANNEL_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.channelID = iprot.readString();
                            struct.setChannelIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // SOURCE_COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.sourceComponentID = iprot.readString();
                            struct.setSourceComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // SOURCE_PORT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.sourcePortID = iprot.readString();
                            struct.setSourcePortIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // TARGET_COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.targetComponentID = iprot.readString();
                            struct.setTargetComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // TARGET_PORT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.targetPortID = iprot.readString();
                            struct.setTargetPortIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, InsertChannel_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.channelID != null) {
                    oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
                    oprot.writeString(struct.channelID);
                    oprot.writeFieldEnd();
                }
                if (struct.sourceComponentID != null) {
                    oprot.writeFieldBegin(SOURCE_COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.sourceComponentID);
                    oprot.writeFieldEnd();
                }
                if (struct.sourcePortID != null) {
                    oprot.writeFieldBegin(SOURCE_PORT_ID_FIELD_DESC);
                    oprot.writeString(struct.sourcePortID);
                    oprot.writeFieldEnd();
                }
                if (struct.targetComponentID != null) {
                    oprot.writeFieldBegin(TARGET_COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.targetComponentID);
                    oprot.writeFieldEnd();
                }
                if (struct.targetPortID != null) {
                    oprot.writeFieldBegin(TARGET_PORT_ID_FIELD_DESC);
                    oprot.writeString(struct.targetPortID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class InsertChannel_argsTupleSchemeFactory implements SchemeFactory {
            public InsertChannel_argsTupleScheme getScheme() {
                return new InsertChannel_argsTupleScheme();
            }
        }

        private static class InsertChannel_argsTupleScheme extends TupleScheme<InsertChannel_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, InsertChannel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetChannelID()) {
                    optionals.set(0);
                }
                if (struct.isSetSourceComponentID()) {
                    optionals.set(1);
                }
                if (struct.isSetSourcePortID()) {
                    optionals.set(2);
                }
                if (struct.isSetTargetComponentID()) {
                    optionals.set(3);
                }
                if (struct.isSetTargetPortID()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetChannelID()) {
                    oprot.writeString(struct.channelID);
                }
                if (struct.isSetSourceComponentID()) {
                    oprot.writeString(struct.sourceComponentID);
                }
                if (struct.isSetSourcePortID()) {
                    oprot.writeString(struct.sourcePortID);
                }
                if (struct.isSetTargetComponentID()) {
                    oprot.writeString(struct.targetComponentID);
                }
                if (struct.isSetTargetPortID()) {
                    oprot.writeString(struct.targetPortID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, InsertChannel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.channelID = iprot.readString();
                    struct.setChannelIDIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.sourceComponentID = iprot.readString();
                    struct.setSourceComponentIDIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.sourcePortID = iprot.readString();
                    struct.setSourcePortIDIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.targetComponentID = iprot.readString();
                    struct.setTargetComponentIDIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.targetPortID = iprot.readString();
                    struct.setTargetPortIDIsSet(true);
                }
            }
        }

    }

    public static class InsertChannel_result
            implements org.apache.thrift.TBase<InsertChannel_result, InsertChannel_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "InsertChannel_result");

        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new InsertChannel_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new InsertChannel_resultTupleSchemeFactory());
        }

        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InsertChannel_result.class, metaDataMap);
        }

        public InsertChannel_result() {
        }

        public InsertChannel_result(AsapiException asapiEx) {
            this();
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public InsertChannel_result(InsertChannel_result other) {
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public InsertChannel_result deepCopy() {
            return new InsertChannel_result(this);
        }

        @Override
        public void clear() {
            this.asapiEx = null;
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public InsertChannel_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof InsertChannel_result)
                return this.equals((InsertChannel_result) that);
            return false;
        }

        public boolean equals(InsertChannel_result that) {
            if (that == null)
                return false;

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(InsertChannel_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            InsertChannel_result typedOther = (InsertChannel_result) other;

            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("InsertChannel_result(");
            boolean first = true;

            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class InsertChannel_resultStandardSchemeFactory implements SchemeFactory {
            public InsertChannel_resultStandardScheme getScheme() {
                return new InsertChannel_resultStandardScheme();
            }
        }

        private static class InsertChannel_resultStandardScheme extends StandardScheme<InsertChannel_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, InsertChannel_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, InsertChannel_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class InsertChannel_resultTupleSchemeFactory implements SchemeFactory {
            public InsertChannel_resultTupleScheme getScheme() {
                return new InsertChannel_resultTupleScheme();
            }
        }

        private static class InsertChannel_resultTupleScheme extends TupleScheme<InsertChannel_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, InsertChannel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetAsapiEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, InsertChannel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class RemoveChannel_args implements
            org.apache.thrift.TBase<RemoveChannel_args, RemoveChannel_args._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "RemoveChannel_args");

        private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "channelID", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new RemoveChannel_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new RemoveChannel_argsTupleSchemeFactory());
        }

        public String channelID; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CHANNEL_ID((short) 1, "channelID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // CHANNEL_ID
                    return CHANNEL_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveChannel_args.class, metaDataMap);
        }

        public RemoveChannel_args() {
        }

        public RemoveChannel_args(String channelID) {
            this();
            this.channelID = channelID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public RemoveChannel_args(RemoveChannel_args other) {
            if (other.isSetChannelID()) {
                this.channelID = other.channelID;
            }
        }

        public RemoveChannel_args deepCopy() {
            return new RemoveChannel_args(this);
        }

        @Override
        public void clear() {
            this.channelID = null;
        }

        public String getChannelID() {
            return this.channelID;
        }

        public RemoveChannel_args setChannelID(String channelID) {
            this.channelID = channelID;
            return this;
        }

        public void unsetChannelID() {
            this.channelID = null;
        }

        /**
         * Returns true if field channelID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetChannelID() {
            return this.channelID != null;
        }

        public void setChannelIDIsSet(boolean value) {
            if (!value) {
                this.channelID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case CHANNEL_ID:
                if (value == null) {
                    unsetChannelID();
                } else {
                    setChannelID((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case CHANNEL_ID:
                return getChannelID();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case CHANNEL_ID:
                return isSetChannelID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof RemoveChannel_args)
                return this.equals((RemoveChannel_args) that);
            return false;
        }

        public boolean equals(RemoveChannel_args that) {
            if (that == null)
                return false;

            boolean this_present_channelID = true && this.isSetChannelID();
            boolean that_present_channelID = true && that.isSetChannelID();
            if (this_present_channelID || that_present_channelID) {
                if (!(this_present_channelID && that_present_channelID))
                    return false;
                if (!this.channelID.equals(that.channelID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(RemoveChannel_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            RemoveChannel_args typedOther = (RemoveChannel_args) other;

            lastComparison = Boolean.valueOf(isSetChannelID()).compareTo(typedOther.isSetChannelID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetChannelID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelID, typedOther.channelID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("RemoveChannel_args(");
            boolean first = true;

            sb.append("channelID:");
            if (this.channelID == null) {
                sb.append("null");
            } else {
                sb.append(this.channelID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class RemoveChannel_argsStandardSchemeFactory implements SchemeFactory {
            public RemoveChannel_argsStandardScheme getScheme() {
                return new RemoveChannel_argsStandardScheme();
            }
        }

        private static class RemoveChannel_argsStandardScheme extends StandardScheme<RemoveChannel_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveChannel_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // CHANNEL_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.channelID = iprot.readString();
                            struct.setChannelIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveChannel_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.channelID != null) {
                    oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
                    oprot.writeString(struct.channelID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class RemoveChannel_argsTupleSchemeFactory implements SchemeFactory {
            public RemoveChannel_argsTupleScheme getScheme() {
                return new RemoveChannel_argsTupleScheme();
            }
        }

        private static class RemoveChannel_argsTupleScheme extends TupleScheme<RemoveChannel_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, RemoveChannel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetChannelID()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetChannelID()) {
                    oprot.writeString(struct.channelID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, RemoveChannel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.channelID = iprot.readString();
                    struct.setChannelIDIsSet(true);
                }
            }
        }

    }

    public static class RemoveChannel_result
            implements org.apache.thrift.TBase<RemoveChannel_result, RemoveChannel_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "RemoveChannel_result");

        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new RemoveChannel_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new RemoveChannel_resultTupleSchemeFactory());
        }

        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveChannel_result.class, metaDataMap);
        }

        public RemoveChannel_result() {
        }

        public RemoveChannel_result(AsapiException asapiEx) {
            this();
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public RemoveChannel_result(RemoveChannel_result other) {
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public RemoveChannel_result deepCopy() {
            return new RemoveChannel_result(this);
        }

        @Override
        public void clear() {
            this.asapiEx = null;
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public RemoveChannel_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof RemoveChannel_result)
                return this.equals((RemoveChannel_result) that);
            return false;
        }

        public boolean equals(RemoveChannel_result that) {
            if (that == null)
                return false;

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(RemoveChannel_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            RemoveChannel_result typedOther = (RemoveChannel_result) other;

            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("RemoveChannel_result(");
            boolean first = true;

            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class RemoveChannel_resultStandardSchemeFactory implements SchemeFactory {
            public RemoveChannel_resultStandardScheme getScheme() {
                return new RemoveChannel_resultStandardScheme();
            }
        }

        private static class RemoveChannel_resultStandardScheme extends StandardScheme<RemoveChannel_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveChannel_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveChannel_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class RemoveChannel_resultTupleSchemeFactory implements SchemeFactory {
            public RemoveChannel_resultTupleScheme getScheme() {
                return new RemoveChannel_resultTupleScheme();
            }
        }

        private static class RemoveChannel_resultTupleScheme extends TupleScheme<RemoveChannel_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, RemoveChannel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetAsapiEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, RemoveChannel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class GetComponentPropertyKeys_args
            implements org.apache.thrift.TBase<GetComponentPropertyKeys_args, GetComponentPropertyKeys_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetComponentPropertyKeys_args");

        private static final org.apache.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "componentID", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetComponentPropertyKeys_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetComponentPropertyKeys_argsTupleSchemeFactory());
        }

        public String componentID; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPONENT_ID((short) 1, "componentID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // COMPONENT_ID
                    return COMPONENT_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("componentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetComponentPropertyKeys_args.class,
                    metaDataMap);
        }

        public GetComponentPropertyKeys_args() {
        }

        public GetComponentPropertyKeys_args(String componentID) {
            this();
            this.componentID = componentID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetComponentPropertyKeys_args(GetComponentPropertyKeys_args other) {
            if (other.isSetComponentID()) {
                this.componentID = other.componentID;
            }
        }

        public GetComponentPropertyKeys_args deepCopy() {
            return new GetComponentPropertyKeys_args(this);
        }

        @Override
        public void clear() {
            this.componentID = null;
        }

        public String getComponentID() {
            return this.componentID;
        }

        public GetComponentPropertyKeys_args setComponentID(String componentID) {
            this.componentID = componentID;
            return this;
        }

        public void unsetComponentID() {
            this.componentID = null;
        }

        /**
         * Returns true if field componentID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetComponentID() {
            return this.componentID != null;
        }

        public void setComponentIDIsSet(boolean value) {
            if (!value) {
                this.componentID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case COMPONENT_ID:
                if (value == null) {
                    unsetComponentID();
                } else {
                    setComponentID((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case COMPONENT_ID:
                return getComponentID();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case COMPONENT_ID:
                return isSetComponentID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetComponentPropertyKeys_args)
                return this.equals((GetComponentPropertyKeys_args) that);
            return false;
        }

        public boolean equals(GetComponentPropertyKeys_args that) {
            if (that == null)
                return false;

            boolean this_present_componentID = true && this.isSetComponentID();
            boolean that_present_componentID = true && that.isSetComponentID();
            if (this_present_componentID || that_present_componentID) {
                if (!(this_present_componentID && that_present_componentID))
                    return false;
                if (!this.componentID.equals(that.componentID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetComponentPropertyKeys_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetComponentPropertyKeys_args typedOther = (GetComponentPropertyKeys_args) other;

            lastComparison = Boolean.valueOf(isSetComponentID()).compareTo(typedOther.isSetComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentID, typedOther.componentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetComponentPropertyKeys_args(");
            boolean first = true;

            sb.append("componentID:");
            if (this.componentID == null) {
                sb.append("null");
            } else {
                sb.append(this.componentID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetComponentPropertyKeys_argsStandardSchemeFactory implements SchemeFactory {
            public GetComponentPropertyKeys_argsStandardScheme getScheme() {
                return new GetComponentPropertyKeys_argsStandardScheme();
            }
        }

        private static class GetComponentPropertyKeys_argsStandardScheme
                extends StandardScheme<GetComponentPropertyKeys_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetComponentPropertyKeys_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.componentID = iprot.readString();
                            struct.setComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetComponentPropertyKeys_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.componentID != null) {
                    oprot.writeFieldBegin(COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.componentID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetComponentPropertyKeys_argsTupleSchemeFactory implements SchemeFactory {
            public GetComponentPropertyKeys_argsTupleScheme getScheme() {
                return new GetComponentPropertyKeys_argsTupleScheme();
            }
        }

        private static class GetComponentPropertyKeys_argsTupleScheme
                extends TupleScheme<GetComponentPropertyKeys_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetComponentPropertyKeys_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetComponentID()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetComponentID()) {
                    oprot.writeString(struct.componentID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetComponentPropertyKeys_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.componentID = iprot.readString();
                    struct.setComponentIDIsSet(true);
                }
            }
        }

    }

    public static class GetComponentPropertyKeys_result implements
            org.apache.thrift.TBase<GetComponentPropertyKeys_result, GetComponentPropertyKeys_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetComponentPropertyKeys_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetComponentPropertyKeys_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetComponentPropertyKeys_resultTupleSchemeFactory());
        }

        public List<String> success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                    new org.apache.thrift.meta_data.FieldMetaData("success",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                    new org.apache.thrift.meta_data.FieldValueMetaData(
                                            org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetComponentPropertyKeys_result.class,
                    metaDataMap);
        }

        public GetComponentPropertyKeys_result() {
        }

        public GetComponentPropertyKeys_result(List<String> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetComponentPropertyKeys_result(GetComponentPropertyKeys_result other) {
            if (other.isSetSuccess()) {
                List<String> __this__success = new ArrayList<String>();
                for (String other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
        }

        public GetComponentPropertyKeys_result deepCopy() {
            return new GetComponentPropertyKeys_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(String elem) {
            if (this.success == null) {
                this.success = new ArrayList<String>();
            }
            this.success.add(elem);
        }

        public List<String> getSuccess() {
            return this.success;
        }

        public GetComponentPropertyKeys_result setSuccess(List<String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((List<String>) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetComponentPropertyKeys_result)
                return this.equals((GetComponentPropertyKeys_result) that);
            return false;
        }

        public boolean equals(GetComponentPropertyKeys_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetComponentPropertyKeys_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetComponentPropertyKeys_result typedOther = (GetComponentPropertyKeys_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetComponentPropertyKeys_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetComponentPropertyKeys_resultStandardSchemeFactory implements SchemeFactory {
            public GetComponentPropertyKeys_resultStandardScheme getScheme() {
                return new GetComponentPropertyKeys_resultStandardScheme();
            }
        }

        private static class GetComponentPropertyKeys_resultStandardScheme
                extends StandardScheme<GetComponentPropertyKeys_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetComponentPropertyKeys_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                                struct.success = new ArrayList<String>(_list48.size);
                                for (int _i49 = 0; _i49 < _list48.size; ++_i49) {
                                    String _elem50; // required
                                    _elem50 = iprot.readString();
                                    struct.success.add(_elem50);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetComponentPropertyKeys_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (String _iter51 : struct.success) {
                            oprot.writeString(_iter51);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetComponentPropertyKeys_resultTupleSchemeFactory implements SchemeFactory {
            public GetComponentPropertyKeys_resultTupleScheme getScheme() {
                return new GetComponentPropertyKeys_resultTupleScheme();
            }
        }

        private static class GetComponentPropertyKeys_resultTupleScheme
                extends TupleScheme<GetComponentPropertyKeys_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetComponentPropertyKeys_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (String _iter52 : struct.success) {
                            oprot.writeString(_iter52);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetComponentPropertyKeys_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new ArrayList<String>(_list53.size);
                        for (int _i54 = 0; _i54 < _list53.size; ++_i54) {
                            String _elem55; // required
                            _elem55 = iprot.readString();
                            struct.success.add(_elem55);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class GetComponentProperty_args
            implements org.apache.thrift.TBase<GetComponentProperty_args, GetComponentProperty_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetComponentProperty_args");

        private static final org.apache.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "componentID", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "key", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetComponentProperty_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetComponentProperty_argsTupleSchemeFactory());
        }

        public String componentID; // required
        public String key; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPONENT_ID((short) 1, "componentID"), KEY((short) 2, "key");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // COMPONENT_ID
                    return COMPONENT_ID;
                case 2: // KEY
                    return KEY;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("componentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetComponentProperty_args.class,
                    metaDataMap);
        }

        public GetComponentProperty_args() {
        }

        public GetComponentProperty_args(String componentID, String key) {
            this();
            this.componentID = componentID;
            this.key = key;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetComponentProperty_args(GetComponentProperty_args other) {
            if (other.isSetComponentID()) {
                this.componentID = other.componentID;
            }
            if (other.isSetKey()) {
                this.key = other.key;
            }
        }

        public GetComponentProperty_args deepCopy() {
            return new GetComponentProperty_args(this);
        }

        @Override
        public void clear() {
            this.componentID = null;
            this.key = null;
        }

        public String getComponentID() {
            return this.componentID;
        }

        public GetComponentProperty_args setComponentID(String componentID) {
            this.componentID = componentID;
            return this;
        }

        public void unsetComponentID() {
            this.componentID = null;
        }

        /**
         * Returns true if field componentID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetComponentID() {
            return this.componentID != null;
        }

        public void setComponentIDIsSet(boolean value) {
            if (!value) {
                this.componentID = null;
            }
        }

        public String getKey() {
            return this.key;
        }

        public GetComponentProperty_args setKey(String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /**
         * Returns true if field key is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case COMPONENT_ID:
                if (value == null) {
                    unsetComponentID();
                } else {
                    setComponentID((String) value);
                }
                break;

            case KEY:
                if (value == null) {
                    unsetKey();
                } else {
                    setKey((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case COMPONENT_ID:
                return getComponentID();

            case KEY:
                return getKey();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case COMPONENT_ID:
                return isSetComponentID();
            case KEY:
                return isSetKey();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetComponentProperty_args)
                return this.equals((GetComponentProperty_args) that);
            return false;
        }

        public boolean equals(GetComponentProperty_args that) {
            if (that == null)
                return false;

            boolean this_present_componentID = true && this.isSetComponentID();
            boolean that_present_componentID = true && that.isSetComponentID();
            if (this_present_componentID || that_present_componentID) {
                if (!(this_present_componentID && that_present_componentID))
                    return false;
                if (!this.componentID.equals(that.componentID))
                    return false;
            }

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetComponentProperty_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetComponentProperty_args typedOther = (GetComponentProperty_args) other;

            lastComparison = Boolean.valueOf(isSetComponentID()).compareTo(typedOther.isSetComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentID, typedOther.componentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetComponentProperty_args(");
            boolean first = true;

            sb.append("componentID:");
            if (this.componentID == null) {
                sb.append("null");
            } else {
                sb.append(this.componentID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetComponentProperty_argsStandardSchemeFactory implements SchemeFactory {
            public GetComponentProperty_argsStandardScheme getScheme() {
                return new GetComponentProperty_argsStandardScheme();
            }
        }

        private static class GetComponentProperty_argsStandardScheme extends StandardScheme<GetComponentProperty_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetComponentProperty_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.componentID = iprot.readString();
                            struct.setComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // KEY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.key = iprot.readString();
                            struct.setKeyIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetComponentProperty_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.componentID != null) {
                    oprot.writeFieldBegin(COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.componentID);
                    oprot.writeFieldEnd();
                }
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetComponentProperty_argsTupleSchemeFactory implements SchemeFactory {
            public GetComponentProperty_argsTupleScheme getScheme() {
                return new GetComponentProperty_argsTupleScheme();
            }
        }

        private static class GetComponentProperty_argsTupleScheme extends TupleScheme<GetComponentProperty_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetComponentProperty_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetComponentID()) {
                    optionals.set(0);
                }
                if (struct.isSetKey()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetComponentID()) {
                    oprot.writeString(struct.componentID);
                }
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetComponentProperty_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.componentID = iprot.readString();
                    struct.setComponentIDIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
            }
        }

    }

    public static class GetComponentProperty_result
            implements org.apache.thrift.TBase<GetComponentProperty_result, GetComponentProperty_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetComponentProperty_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetComponentProperty_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetComponentProperty_resultTupleSchemeFactory());
        }

        public String success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetComponentProperty_result.class,
                    metaDataMap);
        }

        public GetComponentProperty_result() {
        }

        public GetComponentProperty_result(String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetComponentProperty_result(GetComponentProperty_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public GetComponentProperty_result deepCopy() {
            return new GetComponentProperty_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public GetComponentProperty_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetComponentProperty_result)
                return this.equals((GetComponentProperty_result) that);
            return false;
        }

        public boolean equals(GetComponentProperty_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetComponentProperty_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetComponentProperty_result typedOther = (GetComponentProperty_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetComponentProperty_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetComponentProperty_resultStandardSchemeFactory implements SchemeFactory {
            public GetComponentProperty_resultStandardScheme getScheme() {
                return new GetComponentProperty_resultStandardScheme();
            }
        }

        private static class GetComponentProperty_resultStandardScheme
                extends StandardScheme<GetComponentProperty_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetComponentProperty_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.success = iprot.readString();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetComponentProperty_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetComponentProperty_resultTupleSchemeFactory implements SchemeFactory {
            public GetComponentProperty_resultTupleScheme getScheme() {
                return new GetComponentProperty_resultTupleScheme();
            }
        }

        private static class GetComponentProperty_resultTupleScheme extends TupleScheme<GetComponentProperty_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetComponentProperty_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetComponentProperty_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class SetComponentProperty_args
            implements org.apache.thrift.TBase<SetComponentProperty_args, SetComponentProperty_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "SetComponentProperty_args");

        private static final org.apache.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "componentID", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "key", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "value", org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new SetComponentProperty_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new SetComponentProperty_argsTupleSchemeFactory());
        }

        public String componentID; // required
        public String key; // required
        public String value; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPONENT_ID((short) 1, "componentID"), KEY((short) 2, "key"), VALUE((short) 3, "value");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // COMPONENT_ID
                    return COMPONENT_ID;
                case 2: // KEY
                    return KEY;
                case 3: // VALUE
                    return VALUE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("componentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetComponentProperty_args.class,
                    metaDataMap);
        }

        public SetComponentProperty_args() {
        }

        public SetComponentProperty_args(String componentID, String key, String value) {
            this();
            this.componentID = componentID;
            this.key = key;
            this.value = value;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public SetComponentProperty_args(SetComponentProperty_args other) {
            if (other.isSetComponentID()) {
                this.componentID = other.componentID;
            }
            if (other.isSetKey()) {
                this.key = other.key;
            }
            if (other.isSetValue()) {
                this.value = other.value;
            }
        }

        public SetComponentProperty_args deepCopy() {
            return new SetComponentProperty_args(this);
        }

        @Override
        public void clear() {
            this.componentID = null;
            this.key = null;
            this.value = null;
        }

        public String getComponentID() {
            return this.componentID;
        }

        public SetComponentProperty_args setComponentID(String componentID) {
            this.componentID = componentID;
            return this;
        }

        public void unsetComponentID() {
            this.componentID = null;
        }

        /**
         * Returns true if field componentID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetComponentID() {
            return this.componentID != null;
        }

        public void setComponentIDIsSet(boolean value) {
            if (!value) {
                this.componentID = null;
            }
        }

        public String getKey() {
            return this.key;
        }

        public SetComponentProperty_args setKey(String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /**
         * Returns true if field key is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        public String getValue() {
            return this.value;
        }

        public SetComponentProperty_args setValue(String value) {
            this.value = value;
            return this;
        }

        public void unsetValue() {
            this.value = null;
        }

        /**
         * Returns true if field value is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetValue() {
            return this.value != null;
        }

        public void setValueIsSet(boolean value) {
            if (!value) {
                this.value = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case COMPONENT_ID:
                if (value == null) {
                    unsetComponentID();
                } else {
                    setComponentID((String) value);
                }
                break;

            case KEY:
                if (value == null) {
                    unsetKey();
                } else {
                    setKey((String) value);
                }
                break;

            case VALUE:
                if (value == null) {
                    unsetValue();
                } else {
                    setValue((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case COMPONENT_ID:
                return getComponentID();

            case KEY:
                return getKey();

            case VALUE:
                return getValue();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case COMPONENT_ID:
                return isSetComponentID();
            case KEY:
                return isSetKey();
            case VALUE:
                return isSetValue();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof SetComponentProperty_args)
                return this.equals((SetComponentProperty_args) that);
            return false;
        }

        public boolean equals(SetComponentProperty_args that) {
            if (that == null)
                return false;

            boolean this_present_componentID = true && this.isSetComponentID();
            boolean that_present_componentID = true && that.isSetComponentID();
            if (this_present_componentID || that_present_componentID) {
                if (!(this_present_componentID && that_present_componentID))
                    return false;
                if (!this.componentID.equals(that.componentID))
                    return false;
            }

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            boolean this_present_value = true && this.isSetValue();
            boolean that_present_value = true && that.isSetValue();
            if (this_present_value || that_present_value) {
                if (!(this_present_value && that_present_value))
                    return false;
                if (!this.value.equals(that.value))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(SetComponentProperty_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            SetComponentProperty_args typedOther = (SetComponentProperty_args) other;

            lastComparison = Boolean.valueOf(isSetComponentID()).compareTo(typedOther.isSetComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentID, typedOther.componentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetValue()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("SetComponentProperty_args(");
            boolean first = true;

            sb.append("componentID:");
            if (this.componentID == null) {
                sb.append("null");
            } else {
                sb.append(this.componentID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("value:");
            if (this.value == null) {
                sb.append("null");
            } else {
                sb.append(this.value);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class SetComponentProperty_argsStandardSchemeFactory implements SchemeFactory {
            public SetComponentProperty_argsStandardScheme getScheme() {
                return new SetComponentProperty_argsStandardScheme();
            }
        }

        private static class SetComponentProperty_argsStandardScheme extends StandardScheme<SetComponentProperty_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, SetComponentProperty_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.componentID = iprot.readString();
                            struct.setComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // KEY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.key = iprot.readString();
                            struct.setKeyIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // VALUE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.value = iprot.readString();
                            struct.setValueIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, SetComponentProperty_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.componentID != null) {
                    oprot.writeFieldBegin(COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.componentID);
                    oprot.writeFieldEnd();
                }
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                if (struct.value != null) {
                    oprot.writeFieldBegin(VALUE_FIELD_DESC);
                    oprot.writeString(struct.value);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class SetComponentProperty_argsTupleSchemeFactory implements SchemeFactory {
            public SetComponentProperty_argsTupleScheme getScheme() {
                return new SetComponentProperty_argsTupleScheme();
            }
        }

        private static class SetComponentProperty_argsTupleScheme extends TupleScheme<SetComponentProperty_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, SetComponentProperty_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetComponentID()) {
                    optionals.set(0);
                }
                if (struct.isSetKey()) {
                    optionals.set(1);
                }
                if (struct.isSetValue()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetComponentID()) {
                    oprot.writeString(struct.componentID);
                }
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
                if (struct.isSetValue()) {
                    oprot.writeString(struct.value);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, SetComponentProperty_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.componentID = iprot.readString();
                    struct.setComponentIDIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.value = iprot.readString();
                    struct.setValueIsSet(true);
                }
            }
        }

    }

    public static class SetComponentProperty_result
            implements org.apache.thrift.TBase<SetComponentProperty_result, SetComponentProperty_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "SetComponentProperty_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new SetComponentProperty_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new SetComponentProperty_resultTupleSchemeFactory());
        }

        public String success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetComponentProperty_result.class,
                    metaDataMap);
        }

        public SetComponentProperty_result() {
        }

        public SetComponentProperty_result(String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public SetComponentProperty_result(SetComponentProperty_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public SetComponentProperty_result deepCopy() {
            return new SetComponentProperty_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public SetComponentProperty_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof SetComponentProperty_result)
                return this.equals((SetComponentProperty_result) that);
            return false;
        }

        public boolean equals(SetComponentProperty_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(SetComponentProperty_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            SetComponentProperty_result typedOther = (SetComponentProperty_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("SetComponentProperty_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class SetComponentProperty_resultStandardSchemeFactory implements SchemeFactory {
            public SetComponentProperty_resultStandardScheme getScheme() {
                return new SetComponentProperty_resultStandardScheme();
            }
        }

        private static class SetComponentProperty_resultStandardScheme
                extends StandardScheme<SetComponentProperty_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, SetComponentProperty_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.success = iprot.readString();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, SetComponentProperty_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class SetComponentProperty_resultTupleSchemeFactory implements SchemeFactory {
            public SetComponentProperty_resultTupleScheme getScheme() {
                return new SetComponentProperty_resultTupleScheme();
            }
        }

        private static class SetComponentProperty_resultTupleScheme extends TupleScheme<SetComponentProperty_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, SetComponentProperty_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, SetComponentProperty_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class GetPortPropertyKeys_args
            implements org.apache.thrift.TBase<GetPortPropertyKeys_args, GetPortPropertyKeys_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetPortPropertyKeys_args");

        private static final org.apache.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "componentID", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "portID", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetPortPropertyKeys_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetPortPropertyKeys_argsTupleSchemeFactory());
        }

        public String componentID; // required
        public String portID; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPONENT_ID((short) 1, "componentID"), PORT_ID((short) 2, "portID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // COMPONENT_ID
                    return COMPONENT_ID;
                case 2: // PORT_ID
                    return PORT_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("componentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PORT_ID, new org.apache.thrift.meta_data.FieldMetaData("portID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPortPropertyKeys_args.class, metaDataMap);
        }

        public GetPortPropertyKeys_args() {
        }

        public GetPortPropertyKeys_args(String componentID, String portID) {
            this();
            this.componentID = componentID;
            this.portID = portID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetPortPropertyKeys_args(GetPortPropertyKeys_args other) {
            if (other.isSetComponentID()) {
                this.componentID = other.componentID;
            }
            if (other.isSetPortID()) {
                this.portID = other.portID;
            }
        }

        public GetPortPropertyKeys_args deepCopy() {
            return new GetPortPropertyKeys_args(this);
        }

        @Override
        public void clear() {
            this.componentID = null;
            this.portID = null;
        }

        public String getComponentID() {
            return this.componentID;
        }

        public GetPortPropertyKeys_args setComponentID(String componentID) {
            this.componentID = componentID;
            return this;
        }

        public void unsetComponentID() {
            this.componentID = null;
        }

        /**
         * Returns true if field componentID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetComponentID() {
            return this.componentID != null;
        }

        public void setComponentIDIsSet(boolean value) {
            if (!value) {
                this.componentID = null;
            }
        }

        public String getPortID() {
            return this.portID;
        }

        public GetPortPropertyKeys_args setPortID(String portID) {
            this.portID = portID;
            return this;
        }

        public void unsetPortID() {
            this.portID = null;
        }

        /**
         * Returns true if field portID is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetPortID() {
            return this.portID != null;
        }

        public void setPortIDIsSet(boolean value) {
            if (!value) {
                this.portID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case COMPONENT_ID:
                if (value == null) {
                    unsetComponentID();
                } else {
                    setComponentID((String) value);
                }
                break;

            case PORT_ID:
                if (value == null) {
                    unsetPortID();
                } else {
                    setPortID((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case COMPONENT_ID:
                return getComponentID();

            case PORT_ID:
                return getPortID();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case COMPONENT_ID:
                return isSetComponentID();
            case PORT_ID:
                return isSetPortID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetPortPropertyKeys_args)
                return this.equals((GetPortPropertyKeys_args) that);
            return false;
        }

        public boolean equals(GetPortPropertyKeys_args that) {
            if (that == null)
                return false;

            boolean this_present_componentID = true && this.isSetComponentID();
            boolean that_present_componentID = true && that.isSetComponentID();
            if (this_present_componentID || that_present_componentID) {
                if (!(this_present_componentID && that_present_componentID))
                    return false;
                if (!this.componentID.equals(that.componentID))
                    return false;
            }

            boolean this_present_portID = true && this.isSetPortID();
            boolean that_present_portID = true && that.isSetPortID();
            if (this_present_portID || that_present_portID) {
                if (!(this_present_portID && that_present_portID))
                    return false;
                if (!this.portID.equals(that.portID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetPortPropertyKeys_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetPortPropertyKeys_args typedOther = (GetPortPropertyKeys_args) other;

            lastComparison = Boolean.valueOf(isSetComponentID()).compareTo(typedOther.isSetComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentID, typedOther.componentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPortID()).compareTo(typedOther.isSetPortID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPortID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portID, typedOther.portID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetPortPropertyKeys_args(");
            boolean first = true;

            sb.append("componentID:");
            if (this.componentID == null) {
                sb.append("null");
            } else {
                sb.append(this.componentID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("portID:");
            if (this.portID == null) {
                sb.append("null");
            } else {
                sb.append(this.portID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetPortPropertyKeys_argsStandardSchemeFactory implements SchemeFactory {
            public GetPortPropertyKeys_argsStandardScheme getScheme() {
                return new GetPortPropertyKeys_argsStandardScheme();
            }
        }

        private static class GetPortPropertyKeys_argsStandardScheme extends StandardScheme<GetPortPropertyKeys_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetPortPropertyKeys_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.componentID = iprot.readString();
                            struct.setComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // PORT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.portID = iprot.readString();
                            struct.setPortIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetPortPropertyKeys_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.componentID != null) {
                    oprot.writeFieldBegin(COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.componentID);
                    oprot.writeFieldEnd();
                }
                if (struct.portID != null) {
                    oprot.writeFieldBegin(PORT_ID_FIELD_DESC);
                    oprot.writeString(struct.portID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetPortPropertyKeys_argsTupleSchemeFactory implements SchemeFactory {
            public GetPortPropertyKeys_argsTupleScheme getScheme() {
                return new GetPortPropertyKeys_argsTupleScheme();
            }
        }

        private static class GetPortPropertyKeys_argsTupleScheme extends TupleScheme<GetPortPropertyKeys_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetPortPropertyKeys_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetComponentID()) {
                    optionals.set(0);
                }
                if (struct.isSetPortID()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetComponentID()) {
                    oprot.writeString(struct.componentID);
                }
                if (struct.isSetPortID()) {
                    oprot.writeString(struct.portID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetPortPropertyKeys_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.componentID = iprot.readString();
                    struct.setComponentIDIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.portID = iprot.readString();
                    struct.setPortIDIsSet(true);
                }
            }
        }

    }

    public static class GetPortPropertyKeys_result
            implements org.apache.thrift.TBase<GetPortPropertyKeys_result, GetPortPropertyKeys_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetPortPropertyKeys_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetPortPropertyKeys_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetPortPropertyKeys_resultTupleSchemeFactory());
        }

        public List<String> success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                    new org.apache.thrift.meta_data.FieldMetaData("success",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                    new org.apache.thrift.meta_data.FieldValueMetaData(
                                            org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPortPropertyKeys_result.class,
                    metaDataMap);
        }

        public GetPortPropertyKeys_result() {
        }

        public GetPortPropertyKeys_result(List<String> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetPortPropertyKeys_result(GetPortPropertyKeys_result other) {
            if (other.isSetSuccess()) {
                List<String> __this__success = new ArrayList<String>();
                for (String other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
        }

        public GetPortPropertyKeys_result deepCopy() {
            return new GetPortPropertyKeys_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(String elem) {
            if (this.success == null) {
                this.success = new ArrayList<String>();
            }
            this.success.add(elem);
        }

        public List<String> getSuccess() {
            return this.success;
        }

        public GetPortPropertyKeys_result setSuccess(List<String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((List<String>) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetPortPropertyKeys_result)
                return this.equals((GetPortPropertyKeys_result) that);
            return false;
        }

        public boolean equals(GetPortPropertyKeys_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetPortPropertyKeys_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetPortPropertyKeys_result typedOther = (GetPortPropertyKeys_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetPortPropertyKeys_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetPortPropertyKeys_resultStandardSchemeFactory implements SchemeFactory {
            public GetPortPropertyKeys_resultStandardScheme getScheme() {
                return new GetPortPropertyKeys_resultStandardScheme();
            }
        }

        private static class GetPortPropertyKeys_resultStandardScheme
                extends StandardScheme<GetPortPropertyKeys_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetPortPropertyKeys_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                                struct.success = new ArrayList<String>(_list56.size);
                                for (int _i57 = 0; _i57 < _list56.size; ++_i57) {
                                    String _elem58; // required
                                    _elem58 = iprot.readString();
                                    struct.success.add(_elem58);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetPortPropertyKeys_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (String _iter59 : struct.success) {
                            oprot.writeString(_iter59);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetPortPropertyKeys_resultTupleSchemeFactory implements SchemeFactory {
            public GetPortPropertyKeys_resultTupleScheme getScheme() {
                return new GetPortPropertyKeys_resultTupleScheme();
            }
        }

        private static class GetPortPropertyKeys_resultTupleScheme extends TupleScheme<GetPortPropertyKeys_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetPortPropertyKeys_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (String _iter60 : struct.success) {
                            oprot.writeString(_iter60);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetPortPropertyKeys_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new ArrayList<String>(_list61.size);
                        for (int _i62 = 0; _i62 < _list61.size; ++_i62) {
                            String _elem63; // required
                            _elem63 = iprot.readString();
                            struct.success.add(_elem63);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class GetPortProperty_args
            implements org.apache.thrift.TBase<GetPortProperty_args, GetPortProperty_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetPortProperty_args");

        private static final org.apache.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "componentID", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "portID", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "key", org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetPortProperty_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetPortProperty_argsTupleSchemeFactory());
        }

        public String componentID; // required
        public String portID; // required
        public String key; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPONENT_ID((short) 1, "componentID"), PORT_ID((short) 2, "portID"), KEY((short) 3, "key");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // COMPONENT_ID
                    return COMPONENT_ID;
                case 2: // PORT_ID
                    return PORT_ID;
                case 3: // KEY
                    return KEY;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("componentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PORT_ID, new org.apache.thrift.meta_data.FieldMetaData("portID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPortProperty_args.class, metaDataMap);
        }

        public GetPortProperty_args() {
        }

        public GetPortProperty_args(String componentID, String portID, String key) {
            this();
            this.componentID = componentID;
            this.portID = portID;
            this.key = key;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetPortProperty_args(GetPortProperty_args other) {
            if (other.isSetComponentID()) {
                this.componentID = other.componentID;
            }
            if (other.isSetPortID()) {
                this.portID = other.portID;
            }
            if (other.isSetKey()) {
                this.key = other.key;
            }
        }

        public GetPortProperty_args deepCopy() {
            return new GetPortProperty_args(this);
        }

        @Override
        public void clear() {
            this.componentID = null;
            this.portID = null;
            this.key = null;
        }

        public String getComponentID() {
            return this.componentID;
        }

        public GetPortProperty_args setComponentID(String componentID) {
            this.componentID = componentID;
            return this;
        }

        public void unsetComponentID() {
            this.componentID = null;
        }

        /**
         * Returns true if field componentID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetComponentID() {
            return this.componentID != null;
        }

        public void setComponentIDIsSet(boolean value) {
            if (!value) {
                this.componentID = null;
            }
        }

        public String getPortID() {
            return this.portID;
        }

        public GetPortProperty_args setPortID(String portID) {
            this.portID = portID;
            return this;
        }

        public void unsetPortID() {
            this.portID = null;
        }

        /**
         * Returns true if field portID is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetPortID() {
            return this.portID != null;
        }

        public void setPortIDIsSet(boolean value) {
            if (!value) {
                this.portID = null;
            }
        }

        public String getKey() {
            return this.key;
        }

        public GetPortProperty_args setKey(String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /**
         * Returns true if field key is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case COMPONENT_ID:
                if (value == null) {
                    unsetComponentID();
                } else {
                    setComponentID((String) value);
                }
                break;

            case PORT_ID:
                if (value == null) {
                    unsetPortID();
                } else {
                    setPortID((String) value);
                }
                break;

            case KEY:
                if (value == null) {
                    unsetKey();
                } else {
                    setKey((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case COMPONENT_ID:
                return getComponentID();

            case PORT_ID:
                return getPortID();

            case KEY:
                return getKey();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case COMPONENT_ID:
                return isSetComponentID();
            case PORT_ID:
                return isSetPortID();
            case KEY:
                return isSetKey();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetPortProperty_args)
                return this.equals((GetPortProperty_args) that);
            return false;
        }

        public boolean equals(GetPortProperty_args that) {
            if (that == null)
                return false;

            boolean this_present_componentID = true && this.isSetComponentID();
            boolean that_present_componentID = true && that.isSetComponentID();
            if (this_present_componentID || that_present_componentID) {
                if (!(this_present_componentID && that_present_componentID))
                    return false;
                if (!this.componentID.equals(that.componentID))
                    return false;
            }

            boolean this_present_portID = true && this.isSetPortID();
            boolean that_present_portID = true && that.isSetPortID();
            if (this_present_portID || that_present_portID) {
                if (!(this_present_portID && that_present_portID))
                    return false;
                if (!this.portID.equals(that.portID))
                    return false;
            }

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetPortProperty_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetPortProperty_args typedOther = (GetPortProperty_args) other;

            lastComparison = Boolean.valueOf(isSetComponentID()).compareTo(typedOther.isSetComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentID, typedOther.componentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPortID()).compareTo(typedOther.isSetPortID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPortID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portID, typedOther.portID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetPortProperty_args(");
            boolean first = true;

            sb.append("componentID:");
            if (this.componentID == null) {
                sb.append("null");
            } else {
                sb.append(this.componentID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("portID:");
            if (this.portID == null) {
                sb.append("null");
            } else {
                sb.append(this.portID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetPortProperty_argsStandardSchemeFactory implements SchemeFactory {
            public GetPortProperty_argsStandardScheme getScheme() {
                return new GetPortProperty_argsStandardScheme();
            }
        }

        private static class GetPortProperty_argsStandardScheme extends StandardScheme<GetPortProperty_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetPortProperty_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.componentID = iprot.readString();
                            struct.setComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // PORT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.portID = iprot.readString();
                            struct.setPortIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // KEY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.key = iprot.readString();
                            struct.setKeyIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetPortProperty_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.componentID != null) {
                    oprot.writeFieldBegin(COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.componentID);
                    oprot.writeFieldEnd();
                }
                if (struct.portID != null) {
                    oprot.writeFieldBegin(PORT_ID_FIELD_DESC);
                    oprot.writeString(struct.portID);
                    oprot.writeFieldEnd();
                }
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetPortProperty_argsTupleSchemeFactory implements SchemeFactory {
            public GetPortProperty_argsTupleScheme getScheme() {
                return new GetPortProperty_argsTupleScheme();
            }
        }

        private static class GetPortProperty_argsTupleScheme extends TupleScheme<GetPortProperty_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetPortProperty_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetComponentID()) {
                    optionals.set(0);
                }
                if (struct.isSetPortID()) {
                    optionals.set(1);
                }
                if (struct.isSetKey()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetComponentID()) {
                    oprot.writeString(struct.componentID);
                }
                if (struct.isSetPortID()) {
                    oprot.writeString(struct.portID);
                }
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetPortProperty_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.componentID = iprot.readString();
                    struct.setComponentIDIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.portID = iprot.readString();
                    struct.setPortIDIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
            }
        }

    }

    public static class GetPortProperty_result
            implements org.apache.thrift.TBase<GetPortProperty_result, GetPortProperty_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetPortProperty_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetPortProperty_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetPortProperty_resultTupleSchemeFactory());
        }

        public String success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPortProperty_result.class, metaDataMap);
        }

        public GetPortProperty_result() {
        }

        public GetPortProperty_result(String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetPortProperty_result(GetPortProperty_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public GetPortProperty_result deepCopy() {
            return new GetPortProperty_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public GetPortProperty_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetPortProperty_result)
                return this.equals((GetPortProperty_result) that);
            return false;
        }

        public boolean equals(GetPortProperty_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetPortProperty_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetPortProperty_result typedOther = (GetPortProperty_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetPortProperty_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetPortProperty_resultStandardSchemeFactory implements SchemeFactory {
            public GetPortProperty_resultStandardScheme getScheme() {
                return new GetPortProperty_resultStandardScheme();
            }
        }

        private static class GetPortProperty_resultStandardScheme extends StandardScheme<GetPortProperty_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetPortProperty_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.success = iprot.readString();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetPortProperty_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetPortProperty_resultTupleSchemeFactory implements SchemeFactory {
            public GetPortProperty_resultTupleScheme getScheme() {
                return new GetPortProperty_resultTupleScheme();
            }
        }

        private static class GetPortProperty_resultTupleScheme extends TupleScheme<GetPortProperty_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetPortProperty_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetPortProperty_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class SetPortProperty_args
            implements org.apache.thrift.TBase<SetPortProperty_args, SetPortProperty_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "SetPortProperty_args");

        private static final org.apache.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "componentID", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "portID", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "key", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "value", org.apache.thrift.protocol.TType.STRING, (short) 4);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new SetPortProperty_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new SetPortProperty_argsTupleSchemeFactory());
        }

        public String componentID; // required
        public String portID; // required
        public String key; // required
        public String value; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPONENT_ID((short) 1, "componentID"), PORT_ID((short) 2, "portID"), KEY((short) 3,
                    "key"), VALUE((short) 4, "value");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // COMPONENT_ID
                    return COMPONENT_ID;
                case 2: // PORT_ID
                    return PORT_ID;
                case 3: // KEY
                    return KEY;
                case 4: // VALUE
                    return VALUE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("componentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PORT_ID, new org.apache.thrift.meta_data.FieldMetaData("portID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetPortProperty_args.class, metaDataMap);
        }

        public SetPortProperty_args() {
        }

        public SetPortProperty_args(String componentID, String portID, String key, String value) {
            this();
            this.componentID = componentID;
            this.portID = portID;
            this.key = key;
            this.value = value;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public SetPortProperty_args(SetPortProperty_args other) {
            if (other.isSetComponentID()) {
                this.componentID = other.componentID;
            }
            if (other.isSetPortID()) {
                this.portID = other.portID;
            }
            if (other.isSetKey()) {
                this.key = other.key;
            }
            if (other.isSetValue()) {
                this.value = other.value;
            }
        }

        public SetPortProperty_args deepCopy() {
            return new SetPortProperty_args(this);
        }

        @Override
        public void clear() {
            this.componentID = null;
            this.portID = null;
            this.key = null;
            this.value = null;
        }

        public String getComponentID() {
            return this.componentID;
        }

        public SetPortProperty_args setComponentID(String componentID) {
            this.componentID = componentID;
            return this;
        }

        public void unsetComponentID() {
            this.componentID = null;
        }

        /**
         * Returns true if field componentID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetComponentID() {
            return this.componentID != null;
        }

        public void setComponentIDIsSet(boolean value) {
            if (!value) {
                this.componentID = null;
            }
        }

        public String getPortID() {
            return this.portID;
        }

        public SetPortProperty_args setPortID(String portID) {
            this.portID = portID;
            return this;
        }

        public void unsetPortID() {
            this.portID = null;
        }

        /**
         * Returns true if field portID is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetPortID() {
            return this.portID != null;
        }

        public void setPortIDIsSet(boolean value) {
            if (!value) {
                this.portID = null;
            }
        }

        public String getKey() {
            return this.key;
        }

        public SetPortProperty_args setKey(String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /**
         * Returns true if field key is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        public String getValue() {
            return this.value;
        }

        public SetPortProperty_args setValue(String value) {
            this.value = value;
            return this;
        }

        public void unsetValue() {
            this.value = null;
        }

        /**
         * Returns true if field value is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetValue() {
            return this.value != null;
        }

        public void setValueIsSet(boolean value) {
            if (!value) {
                this.value = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case COMPONENT_ID:
                if (value == null) {
                    unsetComponentID();
                } else {
                    setComponentID((String) value);
                }
                break;

            case PORT_ID:
                if (value == null) {
                    unsetPortID();
                } else {
                    setPortID((String) value);
                }
                break;

            case KEY:
                if (value == null) {
                    unsetKey();
                } else {
                    setKey((String) value);
                }
                break;

            case VALUE:
                if (value == null) {
                    unsetValue();
                } else {
                    setValue((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case COMPONENT_ID:
                return getComponentID();

            case PORT_ID:
                return getPortID();

            case KEY:
                return getKey();

            case VALUE:
                return getValue();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case COMPONENT_ID:
                return isSetComponentID();
            case PORT_ID:
                return isSetPortID();
            case KEY:
                return isSetKey();
            case VALUE:
                return isSetValue();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof SetPortProperty_args)
                return this.equals((SetPortProperty_args) that);
            return false;
        }

        public boolean equals(SetPortProperty_args that) {
            if (that == null)
                return false;

            boolean this_present_componentID = true && this.isSetComponentID();
            boolean that_present_componentID = true && that.isSetComponentID();
            if (this_present_componentID || that_present_componentID) {
                if (!(this_present_componentID && that_present_componentID))
                    return false;
                if (!this.componentID.equals(that.componentID))
                    return false;
            }

            boolean this_present_portID = true && this.isSetPortID();
            boolean that_present_portID = true && that.isSetPortID();
            if (this_present_portID || that_present_portID) {
                if (!(this_present_portID && that_present_portID))
                    return false;
                if (!this.portID.equals(that.portID))
                    return false;
            }

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            boolean this_present_value = true && this.isSetValue();
            boolean that_present_value = true && that.isSetValue();
            if (this_present_value || that_present_value) {
                if (!(this_present_value && that_present_value))
                    return false;
                if (!this.value.equals(that.value))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(SetPortProperty_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            SetPortProperty_args typedOther = (SetPortProperty_args) other;

            lastComparison = Boolean.valueOf(isSetComponentID()).compareTo(typedOther.isSetComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentID, typedOther.componentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPortID()).compareTo(typedOther.isSetPortID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPortID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portID, typedOther.portID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetValue()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("SetPortProperty_args(");
            boolean first = true;

            sb.append("componentID:");
            if (this.componentID == null) {
                sb.append("null");
            } else {
                sb.append(this.componentID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("portID:");
            if (this.portID == null) {
                sb.append("null");
            } else {
                sb.append(this.portID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("value:");
            if (this.value == null) {
                sb.append("null");
            } else {
                sb.append(this.value);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class SetPortProperty_argsStandardSchemeFactory implements SchemeFactory {
            public SetPortProperty_argsStandardScheme getScheme() {
                return new SetPortProperty_argsStandardScheme();
            }
        }

        private static class SetPortProperty_argsStandardScheme extends StandardScheme<SetPortProperty_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, SetPortProperty_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.componentID = iprot.readString();
                            struct.setComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // PORT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.portID = iprot.readString();
                            struct.setPortIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // KEY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.key = iprot.readString();
                            struct.setKeyIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // VALUE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.value = iprot.readString();
                            struct.setValueIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, SetPortProperty_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.componentID != null) {
                    oprot.writeFieldBegin(COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.componentID);
                    oprot.writeFieldEnd();
                }
                if (struct.portID != null) {
                    oprot.writeFieldBegin(PORT_ID_FIELD_DESC);
                    oprot.writeString(struct.portID);
                    oprot.writeFieldEnd();
                }
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                if (struct.value != null) {
                    oprot.writeFieldBegin(VALUE_FIELD_DESC);
                    oprot.writeString(struct.value);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class SetPortProperty_argsTupleSchemeFactory implements SchemeFactory {
            public SetPortProperty_argsTupleScheme getScheme() {
                return new SetPortProperty_argsTupleScheme();
            }
        }

        private static class SetPortProperty_argsTupleScheme extends TupleScheme<SetPortProperty_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, SetPortProperty_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetComponentID()) {
                    optionals.set(0);
                }
                if (struct.isSetPortID()) {
                    optionals.set(1);
                }
                if (struct.isSetKey()) {
                    optionals.set(2);
                }
                if (struct.isSetValue()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetComponentID()) {
                    oprot.writeString(struct.componentID);
                }
                if (struct.isSetPortID()) {
                    oprot.writeString(struct.portID);
                }
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
                if (struct.isSetValue()) {
                    oprot.writeString(struct.value);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, SetPortProperty_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.componentID = iprot.readString();
                    struct.setComponentIDIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.portID = iprot.readString();
                    struct.setPortIDIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.value = iprot.readString();
                    struct.setValueIsSet(true);
                }
            }
        }

    }

    public static class SetPortProperty_result
            implements org.apache.thrift.TBase<SetPortProperty_result, SetPortProperty_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "SetPortProperty_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new SetPortProperty_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new SetPortProperty_resultTupleSchemeFactory());
        }

        public String success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetPortProperty_result.class, metaDataMap);
        }

        public SetPortProperty_result() {
        }

        public SetPortProperty_result(String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public SetPortProperty_result(SetPortProperty_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public SetPortProperty_result deepCopy() {
            return new SetPortProperty_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public SetPortProperty_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof SetPortProperty_result)
                return this.equals((SetPortProperty_result) that);
            return false;
        }

        public boolean equals(SetPortProperty_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(SetPortProperty_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            SetPortProperty_result typedOther = (SetPortProperty_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("SetPortProperty_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class SetPortProperty_resultStandardSchemeFactory implements SchemeFactory {
            public SetPortProperty_resultStandardScheme getScheme() {
                return new SetPortProperty_resultStandardScheme();
            }
        }

        private static class SetPortProperty_resultStandardScheme extends StandardScheme<SetPortProperty_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, SetPortProperty_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.success = iprot.readString();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, SetPortProperty_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class SetPortProperty_resultTupleSchemeFactory implements SchemeFactory {
            public SetPortProperty_resultTupleScheme getScheme() {
                return new SetPortProperty_resultTupleScheme();
            }
        }

        private static class SetPortProperty_resultTupleScheme extends TupleScheme<SetPortProperty_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, SetPortProperty_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, SetPortProperty_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class GetChannelPropertyKeys_args
            implements org.apache.thrift.TBase<GetChannelPropertyKeys_args, GetChannelPropertyKeys_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetChannelPropertyKeys_args");

        private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "channelID", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetChannelPropertyKeys_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetChannelPropertyKeys_argsTupleSchemeFactory());
        }

        public String channelID; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CHANNEL_ID((short) 1, "channelID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // CHANNEL_ID
                    return CHANNEL_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetChannelPropertyKeys_args.class,
                    metaDataMap);
        }

        public GetChannelPropertyKeys_args() {
        }

        public GetChannelPropertyKeys_args(String channelID) {
            this();
            this.channelID = channelID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetChannelPropertyKeys_args(GetChannelPropertyKeys_args other) {
            if (other.isSetChannelID()) {
                this.channelID = other.channelID;
            }
        }

        public GetChannelPropertyKeys_args deepCopy() {
            return new GetChannelPropertyKeys_args(this);
        }

        @Override
        public void clear() {
            this.channelID = null;
        }

        public String getChannelID() {
            return this.channelID;
        }

        public GetChannelPropertyKeys_args setChannelID(String channelID) {
            this.channelID = channelID;
            return this;
        }

        public void unsetChannelID() {
            this.channelID = null;
        }

        /**
         * Returns true if field channelID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetChannelID() {
            return this.channelID != null;
        }

        public void setChannelIDIsSet(boolean value) {
            if (!value) {
                this.channelID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case CHANNEL_ID:
                if (value == null) {
                    unsetChannelID();
                } else {
                    setChannelID((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case CHANNEL_ID:
                return getChannelID();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case CHANNEL_ID:
                return isSetChannelID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetChannelPropertyKeys_args)
                return this.equals((GetChannelPropertyKeys_args) that);
            return false;
        }

        public boolean equals(GetChannelPropertyKeys_args that) {
            if (that == null)
                return false;

            boolean this_present_channelID = true && this.isSetChannelID();
            boolean that_present_channelID = true && that.isSetChannelID();
            if (this_present_channelID || that_present_channelID) {
                if (!(this_present_channelID && that_present_channelID))
                    return false;
                if (!this.channelID.equals(that.channelID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetChannelPropertyKeys_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetChannelPropertyKeys_args typedOther = (GetChannelPropertyKeys_args) other;

            lastComparison = Boolean.valueOf(isSetChannelID()).compareTo(typedOther.isSetChannelID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetChannelID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelID, typedOther.channelID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetChannelPropertyKeys_args(");
            boolean first = true;

            sb.append("channelID:");
            if (this.channelID == null) {
                sb.append("null");
            } else {
                sb.append(this.channelID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetChannelPropertyKeys_argsStandardSchemeFactory implements SchemeFactory {
            public GetChannelPropertyKeys_argsStandardScheme getScheme() {
                return new GetChannelPropertyKeys_argsStandardScheme();
            }
        }

        private static class GetChannelPropertyKeys_argsStandardScheme
                extends StandardScheme<GetChannelPropertyKeys_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetChannelPropertyKeys_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // CHANNEL_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.channelID = iprot.readString();
                            struct.setChannelIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetChannelPropertyKeys_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.channelID != null) {
                    oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
                    oprot.writeString(struct.channelID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetChannelPropertyKeys_argsTupleSchemeFactory implements SchemeFactory {
            public GetChannelPropertyKeys_argsTupleScheme getScheme() {
                return new GetChannelPropertyKeys_argsTupleScheme();
            }
        }

        private static class GetChannelPropertyKeys_argsTupleScheme extends TupleScheme<GetChannelPropertyKeys_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetChannelPropertyKeys_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetChannelID()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetChannelID()) {
                    oprot.writeString(struct.channelID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetChannelPropertyKeys_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.channelID = iprot.readString();
                    struct.setChannelIDIsSet(true);
                }
            }
        }

    }

    public static class GetChannelPropertyKeys_result
            implements org.apache.thrift.TBase<GetChannelPropertyKeys_result, GetChannelPropertyKeys_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetChannelPropertyKeys_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetChannelPropertyKeys_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetChannelPropertyKeys_resultTupleSchemeFactory());
        }

        public List<String> success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                    new org.apache.thrift.meta_data.FieldMetaData("success",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                    new org.apache.thrift.meta_data.FieldValueMetaData(
                                            org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetChannelPropertyKeys_result.class,
                    metaDataMap);
        }

        public GetChannelPropertyKeys_result() {
        }

        public GetChannelPropertyKeys_result(List<String> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetChannelPropertyKeys_result(GetChannelPropertyKeys_result other) {
            if (other.isSetSuccess()) {
                List<String> __this__success = new ArrayList<String>();
                for (String other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
        }

        public GetChannelPropertyKeys_result deepCopy() {
            return new GetChannelPropertyKeys_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(String elem) {
            if (this.success == null) {
                this.success = new ArrayList<String>();
            }
            this.success.add(elem);
        }

        public List<String> getSuccess() {
            return this.success;
        }

        public GetChannelPropertyKeys_result setSuccess(List<String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((List<String>) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetChannelPropertyKeys_result)
                return this.equals((GetChannelPropertyKeys_result) that);
            return false;
        }

        public boolean equals(GetChannelPropertyKeys_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetChannelPropertyKeys_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetChannelPropertyKeys_result typedOther = (GetChannelPropertyKeys_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetChannelPropertyKeys_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetChannelPropertyKeys_resultStandardSchemeFactory implements SchemeFactory {
            public GetChannelPropertyKeys_resultStandardScheme getScheme() {
                return new GetChannelPropertyKeys_resultStandardScheme();
            }
        }

        private static class GetChannelPropertyKeys_resultStandardScheme
                extends StandardScheme<GetChannelPropertyKeys_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetChannelPropertyKeys_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                                struct.success = new ArrayList<String>(_list64.size);
                                for (int _i65 = 0; _i65 < _list64.size; ++_i65) {
                                    String _elem66; // required
                                    _elem66 = iprot.readString();
                                    struct.success.add(_elem66);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetChannelPropertyKeys_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (String _iter67 : struct.success) {
                            oprot.writeString(_iter67);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetChannelPropertyKeys_resultTupleSchemeFactory implements SchemeFactory {
            public GetChannelPropertyKeys_resultTupleScheme getScheme() {
                return new GetChannelPropertyKeys_resultTupleScheme();
            }
        }

        private static class GetChannelPropertyKeys_resultTupleScheme
                extends TupleScheme<GetChannelPropertyKeys_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetChannelPropertyKeys_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (String _iter68 : struct.success) {
                            oprot.writeString(_iter68);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetChannelPropertyKeys_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new ArrayList<String>(_list69.size);
                        for (int _i70 = 0; _i70 < _list69.size; ++_i70) {
                            String _elem71; // required
                            _elem71 = iprot.readString();
                            struct.success.add(_elem71);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class GetChannelProperty_args
            implements org.apache.thrift.TBase<GetChannelProperty_args, GetChannelProperty_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetChannelProperty_args");

        private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "channelID", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "key", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetChannelProperty_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetChannelProperty_argsTupleSchemeFactory());
        }

        public String channelID; // required
        public String key; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CHANNEL_ID((short) 1, "channelID"), KEY((short) 2, "key");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // CHANNEL_ID
                    return CHANNEL_ID;
                case 2: // KEY
                    return KEY;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetChannelProperty_args.class, metaDataMap);
        }

        public GetChannelProperty_args() {
        }

        public GetChannelProperty_args(String channelID, String key) {
            this();
            this.channelID = channelID;
            this.key = key;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetChannelProperty_args(GetChannelProperty_args other) {
            if (other.isSetChannelID()) {
                this.channelID = other.channelID;
            }
            if (other.isSetKey()) {
                this.key = other.key;
            }
        }

        public GetChannelProperty_args deepCopy() {
            return new GetChannelProperty_args(this);
        }

        @Override
        public void clear() {
            this.channelID = null;
            this.key = null;
        }

        public String getChannelID() {
            return this.channelID;
        }

        public GetChannelProperty_args setChannelID(String channelID) {
            this.channelID = channelID;
            return this;
        }

        public void unsetChannelID() {
            this.channelID = null;
        }

        /**
         * Returns true if field channelID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetChannelID() {
            return this.channelID != null;
        }

        public void setChannelIDIsSet(boolean value) {
            if (!value) {
                this.channelID = null;
            }
        }

        public String getKey() {
            return this.key;
        }

        public GetChannelProperty_args setKey(String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /**
         * Returns true if field key is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case CHANNEL_ID:
                if (value == null) {
                    unsetChannelID();
                } else {
                    setChannelID((String) value);
                }
                break;

            case KEY:
                if (value == null) {
                    unsetKey();
                } else {
                    setKey((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case CHANNEL_ID:
                return getChannelID();

            case KEY:
                return getKey();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case CHANNEL_ID:
                return isSetChannelID();
            case KEY:
                return isSetKey();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetChannelProperty_args)
                return this.equals((GetChannelProperty_args) that);
            return false;
        }

        public boolean equals(GetChannelProperty_args that) {
            if (that == null)
                return false;

            boolean this_present_channelID = true && this.isSetChannelID();
            boolean that_present_channelID = true && that.isSetChannelID();
            if (this_present_channelID || that_present_channelID) {
                if (!(this_present_channelID && that_present_channelID))
                    return false;
                if (!this.channelID.equals(that.channelID))
                    return false;
            }

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetChannelProperty_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetChannelProperty_args typedOther = (GetChannelProperty_args) other;

            lastComparison = Boolean.valueOf(isSetChannelID()).compareTo(typedOther.isSetChannelID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetChannelID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelID, typedOther.channelID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetChannelProperty_args(");
            boolean first = true;

            sb.append("channelID:");
            if (this.channelID == null) {
                sb.append("null");
            } else {
                sb.append(this.channelID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetChannelProperty_argsStandardSchemeFactory implements SchemeFactory {
            public GetChannelProperty_argsStandardScheme getScheme() {
                return new GetChannelProperty_argsStandardScheme();
            }
        }

        private static class GetChannelProperty_argsStandardScheme extends StandardScheme<GetChannelProperty_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetChannelProperty_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // CHANNEL_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.channelID = iprot.readString();
                            struct.setChannelIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // KEY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.key = iprot.readString();
                            struct.setKeyIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetChannelProperty_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.channelID != null) {
                    oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
                    oprot.writeString(struct.channelID);
                    oprot.writeFieldEnd();
                }
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetChannelProperty_argsTupleSchemeFactory implements SchemeFactory {
            public GetChannelProperty_argsTupleScheme getScheme() {
                return new GetChannelProperty_argsTupleScheme();
            }
        }

        private static class GetChannelProperty_argsTupleScheme extends TupleScheme<GetChannelProperty_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetChannelProperty_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetChannelID()) {
                    optionals.set(0);
                }
                if (struct.isSetKey()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetChannelID()) {
                    oprot.writeString(struct.channelID);
                }
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetChannelProperty_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.channelID = iprot.readString();
                    struct.setChannelIDIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
            }
        }

    }

    public static class GetChannelProperty_result
            implements org.apache.thrift.TBase<GetChannelProperty_result, GetChannelProperty_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "GetChannelProperty_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new GetChannelProperty_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new GetChannelProperty_resultTupleSchemeFactory());
        }

        public String success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetChannelProperty_result.class,
                    metaDataMap);
        }

        public GetChannelProperty_result() {
        }

        public GetChannelProperty_result(String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public GetChannelProperty_result(GetChannelProperty_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public GetChannelProperty_result deepCopy() {
            return new GetChannelProperty_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public GetChannelProperty_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof GetChannelProperty_result)
                return this.equals((GetChannelProperty_result) that);
            return false;
        }

        public boolean equals(GetChannelProperty_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(GetChannelProperty_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            GetChannelProperty_result typedOther = (GetChannelProperty_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("GetChannelProperty_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class GetChannelProperty_resultStandardSchemeFactory implements SchemeFactory {
            public GetChannelProperty_resultStandardScheme getScheme() {
                return new GetChannelProperty_resultStandardScheme();
            }
        }

        private static class GetChannelProperty_resultStandardScheme extends StandardScheme<GetChannelProperty_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, GetChannelProperty_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.success = iprot.readString();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, GetChannelProperty_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class GetChannelProperty_resultTupleSchemeFactory implements SchemeFactory {
            public GetChannelProperty_resultTupleScheme getScheme() {
                return new GetChannelProperty_resultTupleScheme();
            }
        }

        private static class GetChannelProperty_resultTupleScheme extends TupleScheme<GetChannelProperty_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, GetChannelProperty_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, GetChannelProperty_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class SetChannelProperty_args
            implements org.apache.thrift.TBase<SetChannelProperty_args, SetChannelProperty_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "SetChannelProperty_args");

        private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "channelID", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "key", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "value", org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new SetChannelProperty_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new SetChannelProperty_argsTupleSchemeFactory());
        }

        public String channelID; // required
        public String key; // required
        public String value; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CHANNEL_ID((short) 1, "channelID"), KEY((short) 2, "key"), VALUE((short) 3, "value");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // CHANNEL_ID
                    return CHANNEL_ID;
                case 2: // KEY
                    return KEY;
                case 3: // VALUE
                    return VALUE;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetChannelProperty_args.class, metaDataMap);
        }

        public SetChannelProperty_args() {
        }

        public SetChannelProperty_args(String channelID, String key, String value) {
            this();
            this.channelID = channelID;
            this.key = key;
            this.value = value;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public SetChannelProperty_args(SetChannelProperty_args other) {
            if (other.isSetChannelID()) {
                this.channelID = other.channelID;
            }
            if (other.isSetKey()) {
                this.key = other.key;
            }
            if (other.isSetValue()) {
                this.value = other.value;
            }
        }

        public SetChannelProperty_args deepCopy() {
            return new SetChannelProperty_args(this);
        }

        @Override
        public void clear() {
            this.channelID = null;
            this.key = null;
            this.value = null;
        }

        public String getChannelID() {
            return this.channelID;
        }

        public SetChannelProperty_args setChannelID(String channelID) {
            this.channelID = channelID;
            return this;
        }

        public void unsetChannelID() {
            this.channelID = null;
        }

        /**
         * Returns true if field channelID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetChannelID() {
            return this.channelID != null;
        }

        public void setChannelIDIsSet(boolean value) {
            if (!value) {
                this.channelID = null;
            }
        }

        public String getKey() {
            return this.key;
        }

        public SetChannelProperty_args setKey(String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /**
         * Returns true if field key is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        public String getValue() {
            return this.value;
        }

        public SetChannelProperty_args setValue(String value) {
            this.value = value;
            return this;
        }

        public void unsetValue() {
            this.value = null;
        }

        /**
         * Returns true if field value is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetValue() {
            return this.value != null;
        }

        public void setValueIsSet(boolean value) {
            if (!value) {
                this.value = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case CHANNEL_ID:
                if (value == null) {
                    unsetChannelID();
                } else {
                    setChannelID((String) value);
                }
                break;

            case KEY:
                if (value == null) {
                    unsetKey();
                } else {
                    setKey((String) value);
                }
                break;

            case VALUE:
                if (value == null) {
                    unsetValue();
                } else {
                    setValue((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case CHANNEL_ID:
                return getChannelID();

            case KEY:
                return getKey();

            case VALUE:
                return getValue();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case CHANNEL_ID:
                return isSetChannelID();
            case KEY:
                return isSetKey();
            case VALUE:
                return isSetValue();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof SetChannelProperty_args)
                return this.equals((SetChannelProperty_args) that);
            return false;
        }

        public boolean equals(SetChannelProperty_args that) {
            if (that == null)
                return false;

            boolean this_present_channelID = true && this.isSetChannelID();
            boolean that_present_channelID = true && that.isSetChannelID();
            if (this_present_channelID || that_present_channelID) {
                if (!(this_present_channelID && that_present_channelID))
                    return false;
                if (!this.channelID.equals(that.channelID))
                    return false;
            }

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            boolean this_present_value = true && this.isSetValue();
            boolean that_present_value = true && that.isSetValue();
            if (this_present_value || that_present_value) {
                if (!(this_present_value && that_present_value))
                    return false;
                if (!this.value.equals(that.value))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(SetChannelProperty_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            SetChannelProperty_args typedOther = (SetChannelProperty_args) other;

            lastComparison = Boolean.valueOf(isSetChannelID()).compareTo(typedOther.isSetChannelID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetChannelID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelID, typedOther.channelID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetValue()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("SetChannelProperty_args(");
            boolean first = true;

            sb.append("channelID:");
            if (this.channelID == null) {
                sb.append("null");
            } else {
                sb.append(this.channelID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("value:");
            if (this.value == null) {
                sb.append("null");
            } else {
                sb.append(this.value);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class SetChannelProperty_argsStandardSchemeFactory implements SchemeFactory {
            public SetChannelProperty_argsStandardScheme getScheme() {
                return new SetChannelProperty_argsStandardScheme();
            }
        }

        private static class SetChannelProperty_argsStandardScheme extends StandardScheme<SetChannelProperty_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, SetChannelProperty_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // CHANNEL_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.channelID = iprot.readString();
                            struct.setChannelIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // KEY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.key = iprot.readString();
                            struct.setKeyIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // VALUE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.value = iprot.readString();
                            struct.setValueIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, SetChannelProperty_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.channelID != null) {
                    oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
                    oprot.writeString(struct.channelID);
                    oprot.writeFieldEnd();
                }
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                if (struct.value != null) {
                    oprot.writeFieldBegin(VALUE_FIELD_DESC);
                    oprot.writeString(struct.value);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class SetChannelProperty_argsTupleSchemeFactory implements SchemeFactory {
            public SetChannelProperty_argsTupleScheme getScheme() {
                return new SetChannelProperty_argsTupleScheme();
            }
        }

        private static class SetChannelProperty_argsTupleScheme extends TupleScheme<SetChannelProperty_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, SetChannelProperty_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetChannelID()) {
                    optionals.set(0);
                }
                if (struct.isSetKey()) {
                    optionals.set(1);
                }
                if (struct.isSetValue()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetChannelID()) {
                    oprot.writeString(struct.channelID);
                }
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
                if (struct.isSetValue()) {
                    oprot.writeString(struct.value);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, SetChannelProperty_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.channelID = iprot.readString();
                    struct.setChannelIDIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.value = iprot.readString();
                    struct.setValueIsSet(true);
                }
            }
        }

    }

    public static class SetChannelProperty_result
            implements org.apache.thrift.TBase<SetChannelProperty_result, SetChannelProperty_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "SetChannelProperty_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new SetChannelProperty_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new SetChannelProperty_resultTupleSchemeFactory());
        }

        public String success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetChannelProperty_result.class,
                    metaDataMap);
        }

        public SetChannelProperty_result() {
        }

        public SetChannelProperty_result(String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public SetChannelProperty_result(SetChannelProperty_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public SetChannelProperty_result deepCopy() {
            return new SetChannelProperty_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public SetChannelProperty_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof SetChannelProperty_result)
                return this.equals((SetChannelProperty_result) that);
            return false;
        }

        public boolean equals(SetChannelProperty_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(SetChannelProperty_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            SetChannelProperty_result typedOther = (SetChannelProperty_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("SetChannelProperty_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class SetChannelProperty_resultStandardSchemeFactory implements SchemeFactory {
            public SetChannelProperty_resultStandardScheme getScheme() {
                return new SetChannelProperty_resultStandardScheme();
            }
        }

        private static class SetChannelProperty_resultStandardScheme extends StandardScheme<SetChannelProperty_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, SetChannelProperty_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.success = iprot.readString();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, SetChannelProperty_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class SetChannelProperty_resultTupleSchemeFactory implements SchemeFactory {
            public SetChannelProperty_resultTupleScheme getScheme() {
                return new SetChannelProperty_resultTupleScheme();
            }
        }

        private static class SetChannelProperty_resultTupleScheme extends TupleScheme<SetChannelProperty_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, SetChannelProperty_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, SetChannelProperty_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class RegisterRemoteConsumer_args
            implements org.apache.thrift.TBase<RegisterRemoteConsumer_args, RegisterRemoteConsumer_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "RegisterRemoteConsumer_args");

        private static final org.apache.thrift.protocol.TField SOURCE_COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "sourceComponentID", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField SOURCE_OUTPUT_PORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "sourceOutputPortID", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new RegisterRemoteConsumer_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new RegisterRemoteConsumer_argsTupleSchemeFactory());
        }

        public String sourceComponentID; // required
        public String sourceOutputPortID; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SOURCE_COMPONENT_ID((short) 1, "sourceComponentID"), SOURCE_OUTPUT_PORT_ID((short) 2, "sourceOutputPortID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // SOURCE_COMPONENT_ID
                    return SOURCE_COMPONENT_ID;
                case 2: // SOURCE_OUTPUT_PORT_ID
                    return SOURCE_OUTPUT_PORT_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SOURCE_COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceComponentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.SOURCE_OUTPUT_PORT_ID, new org.apache.thrift.meta_data.FieldMetaData(
                    "sourceOutputPortID", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegisterRemoteConsumer_args.class,
                    metaDataMap);
        }

        public RegisterRemoteConsumer_args() {
        }

        public RegisterRemoteConsumer_args(String sourceComponentID, String sourceOutputPortID) {
            this();
            this.sourceComponentID = sourceComponentID;
            this.sourceOutputPortID = sourceOutputPortID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public RegisterRemoteConsumer_args(RegisterRemoteConsumer_args other) {
            if (other.isSetSourceComponentID()) {
                this.sourceComponentID = other.sourceComponentID;
            }
            if (other.isSetSourceOutputPortID()) {
                this.sourceOutputPortID = other.sourceOutputPortID;
            }
        }

        public RegisterRemoteConsumer_args deepCopy() {
            return new RegisterRemoteConsumer_args(this);
        }

        @Override
        public void clear() {
            this.sourceComponentID = null;
            this.sourceOutputPortID = null;
        }

        public String getSourceComponentID() {
            return this.sourceComponentID;
        }

        public RegisterRemoteConsumer_args setSourceComponentID(String sourceComponentID) {
            this.sourceComponentID = sourceComponentID;
            return this;
        }

        public void unsetSourceComponentID() {
            this.sourceComponentID = null;
        }

        /**
         * Returns true if field sourceComponentID is set (has been assigned a
         * value) and false otherwise
         */
        public boolean isSetSourceComponentID() {
            return this.sourceComponentID != null;
        }

        public void setSourceComponentIDIsSet(boolean value) {
            if (!value) {
                this.sourceComponentID = null;
            }
        }

        public String getSourceOutputPortID() {
            return this.sourceOutputPortID;
        }

        public RegisterRemoteConsumer_args setSourceOutputPortID(String sourceOutputPortID) {
            this.sourceOutputPortID = sourceOutputPortID;
            return this;
        }

        public void unsetSourceOutputPortID() {
            this.sourceOutputPortID = null;
        }

        /**
         * Returns true if field sourceOutputPortID is set (has been assigned a
         * value) and false otherwise
         */
        public boolean isSetSourceOutputPortID() {
            return this.sourceOutputPortID != null;
        }

        public void setSourceOutputPortIDIsSet(boolean value) {
            if (!value) {
                this.sourceOutputPortID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SOURCE_COMPONENT_ID:
                if (value == null) {
                    unsetSourceComponentID();
                } else {
                    setSourceComponentID((String) value);
                }
                break;

            case SOURCE_OUTPUT_PORT_ID:
                if (value == null) {
                    unsetSourceOutputPortID();
                } else {
                    setSourceOutputPortID((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SOURCE_COMPONENT_ID:
                return getSourceComponentID();

            case SOURCE_OUTPUT_PORT_ID:
                return getSourceOutputPortID();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SOURCE_COMPONENT_ID:
                return isSetSourceComponentID();
            case SOURCE_OUTPUT_PORT_ID:
                return isSetSourceOutputPortID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof RegisterRemoteConsumer_args)
                return this.equals((RegisterRemoteConsumer_args) that);
            return false;
        }

        public boolean equals(RegisterRemoteConsumer_args that) {
            if (that == null)
                return false;

            boolean this_present_sourceComponentID = true && this.isSetSourceComponentID();
            boolean that_present_sourceComponentID = true && that.isSetSourceComponentID();
            if (this_present_sourceComponentID || that_present_sourceComponentID) {
                if (!(this_present_sourceComponentID && that_present_sourceComponentID))
                    return false;
                if (!this.sourceComponentID.equals(that.sourceComponentID))
                    return false;
            }

            boolean this_present_sourceOutputPortID = true && this.isSetSourceOutputPortID();
            boolean that_present_sourceOutputPortID = true && that.isSetSourceOutputPortID();
            if (this_present_sourceOutputPortID || that_present_sourceOutputPortID) {
                if (!(this_present_sourceOutputPortID && that_present_sourceOutputPortID))
                    return false;
                if (!this.sourceOutputPortID.equals(that.sourceOutputPortID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(RegisterRemoteConsumer_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            RegisterRemoteConsumer_args typedOther = (RegisterRemoteConsumer_args) other;

            lastComparison = Boolean.valueOf(isSetSourceComponentID()).compareTo(typedOther.isSetSourceComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSourceComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceComponentID,
                        typedOther.sourceComponentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSourceOutputPortID()).compareTo(typedOther.isSetSourceOutputPortID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSourceOutputPortID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceOutputPortID,
                        typedOther.sourceOutputPortID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("RegisterRemoteConsumer_args(");
            boolean first = true;

            sb.append("sourceComponentID:");
            if (this.sourceComponentID == null) {
                sb.append("null");
            } else {
                sb.append(this.sourceComponentID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("sourceOutputPortID:");
            if (this.sourceOutputPortID == null) {
                sb.append("null");
            } else {
                sb.append(this.sourceOutputPortID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class RegisterRemoteConsumer_argsStandardSchemeFactory implements SchemeFactory {
            public RegisterRemoteConsumer_argsStandardScheme getScheme() {
                return new RegisterRemoteConsumer_argsStandardScheme();
            }
        }

        private static class RegisterRemoteConsumer_argsStandardScheme
                extends StandardScheme<RegisterRemoteConsumer_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, RegisterRemoteConsumer_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // SOURCE_COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.sourceComponentID = iprot.readString();
                            struct.setSourceComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // SOURCE_OUTPUT_PORT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.sourceOutputPortID = iprot.readString();
                            struct.setSourceOutputPortIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, RegisterRemoteConsumer_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.sourceComponentID != null) {
                    oprot.writeFieldBegin(SOURCE_COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.sourceComponentID);
                    oprot.writeFieldEnd();
                }
                if (struct.sourceOutputPortID != null) {
                    oprot.writeFieldBegin(SOURCE_OUTPUT_PORT_ID_FIELD_DESC);
                    oprot.writeString(struct.sourceOutputPortID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class RegisterRemoteConsumer_argsTupleSchemeFactory implements SchemeFactory {
            public RegisterRemoteConsumer_argsTupleScheme getScheme() {
                return new RegisterRemoteConsumer_argsTupleScheme();
            }
        }

        private static class RegisterRemoteConsumer_argsTupleScheme extends TupleScheme<RegisterRemoteConsumer_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, RegisterRemoteConsumer_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSourceComponentID()) {
                    optionals.set(0);
                }
                if (struct.isSetSourceOutputPortID()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSourceComponentID()) {
                    oprot.writeString(struct.sourceComponentID);
                }
                if (struct.isSetSourceOutputPortID()) {
                    oprot.writeString(struct.sourceOutputPortID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, RegisterRemoteConsumer_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.sourceComponentID = iprot.readString();
                    struct.setSourceComponentIDIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.sourceOutputPortID = iprot.readString();
                    struct.setSourceOutputPortIDIsSet(true);
                }
            }
        }

    }

    public static class RegisterRemoteConsumer_result
            implements org.apache.thrift.TBase<RegisterRemoteConsumer_result, RegisterRemoteConsumer_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "RegisterRemoteConsumer_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new RegisterRemoteConsumer_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new RegisterRemoteConsumer_resultTupleSchemeFactory());
        }

        public String success; // required
        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"), ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegisterRemoteConsumer_result.class,
                    metaDataMap);
        }

        public RegisterRemoteConsumer_result() {
        }

        public RegisterRemoteConsumer_result(String success, AsapiException asapiEx) {
            this();
            this.success = success;
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public RegisterRemoteConsumer_result(RegisterRemoteConsumer_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public RegisterRemoteConsumer_result deepCopy() {
            return new RegisterRemoteConsumer_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.asapiEx = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public RegisterRemoteConsumer_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public RegisterRemoteConsumer_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((String) value);
                }
                break;

            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof RegisterRemoteConsumer_result)
                return this.equals((RegisterRemoteConsumer_result) that);
            return false;
        }

        public boolean equals(RegisterRemoteConsumer_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(RegisterRemoteConsumer_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            RegisterRemoteConsumer_result typedOther = (RegisterRemoteConsumer_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("RegisterRemoteConsumer_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class RegisterRemoteConsumer_resultStandardSchemeFactory implements SchemeFactory {
            public RegisterRemoteConsumer_resultStandardScheme getScheme() {
                return new RegisterRemoteConsumer_resultStandardScheme();
            }
        }

        private static class RegisterRemoteConsumer_resultStandardScheme
                extends StandardScheme<RegisterRemoteConsumer_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, RegisterRemoteConsumer_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.success = iprot.readString();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, RegisterRemoteConsumer_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class RegisterRemoteConsumer_resultTupleSchemeFactory implements SchemeFactory {
            public RegisterRemoteConsumer_resultTupleScheme getScheme() {
                return new RegisterRemoteConsumer_resultTupleScheme();
            }
        }

        private static class RegisterRemoteConsumer_resultTupleScheme
                extends TupleScheme<RegisterRemoteConsumer_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, RegisterRemoteConsumer_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAsapiEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, RegisterRemoteConsumer_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class UnregisterRemoteConsumer_args
            implements org.apache.thrift.TBase<UnregisterRemoteConsumer_args, UnregisterRemoteConsumer_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "UnregisterRemoteConsumer_args");

        private static final org.apache.thrift.protocol.TField REMOTE_CONSUMER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "remoteConsumerID", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new UnregisterRemoteConsumer_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new UnregisterRemoteConsumer_argsTupleSchemeFactory());
        }

        public String remoteConsumerID; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            REMOTE_CONSUMER_ID((short) 1, "remoteConsumerID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REMOTE_CONSUMER_ID
                    return REMOTE_CONSUMER_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.REMOTE_CONSUMER_ID, new org.apache.thrift.meta_data.FieldMetaData("remoteConsumerID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnregisterRemoteConsumer_args.class,
                    metaDataMap);
        }

        public UnregisterRemoteConsumer_args() {
        }

        public UnregisterRemoteConsumer_args(String remoteConsumerID) {
            this();
            this.remoteConsumerID = remoteConsumerID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public UnregisterRemoteConsumer_args(UnregisterRemoteConsumer_args other) {
            if (other.isSetRemoteConsumerID()) {
                this.remoteConsumerID = other.remoteConsumerID;
            }
        }

        public UnregisterRemoteConsumer_args deepCopy() {
            return new UnregisterRemoteConsumer_args(this);
        }

        @Override
        public void clear() {
            this.remoteConsumerID = null;
        }

        public String getRemoteConsumerID() {
            return this.remoteConsumerID;
        }

        public UnregisterRemoteConsumer_args setRemoteConsumerID(String remoteConsumerID) {
            this.remoteConsumerID = remoteConsumerID;
            return this;
        }

        public void unsetRemoteConsumerID() {
            this.remoteConsumerID = null;
        }

        /**
         * Returns true if field remoteConsumerID is set (has been assigned a
         * value) and false otherwise
         */
        public boolean isSetRemoteConsumerID() {
            return this.remoteConsumerID != null;
        }

        public void setRemoteConsumerIDIsSet(boolean value) {
            if (!value) {
                this.remoteConsumerID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REMOTE_CONSUMER_ID:
                if (value == null) {
                    unsetRemoteConsumerID();
                } else {
                    setRemoteConsumerID((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REMOTE_CONSUMER_ID:
                return getRemoteConsumerID();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REMOTE_CONSUMER_ID:
                return isSetRemoteConsumerID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof UnregisterRemoteConsumer_args)
                return this.equals((UnregisterRemoteConsumer_args) that);
            return false;
        }

        public boolean equals(UnregisterRemoteConsumer_args that) {
            if (that == null)
                return false;

            boolean this_present_remoteConsumerID = true && this.isSetRemoteConsumerID();
            boolean that_present_remoteConsumerID = true && that.isSetRemoteConsumerID();
            if (this_present_remoteConsumerID || that_present_remoteConsumerID) {
                if (!(this_present_remoteConsumerID && that_present_remoteConsumerID))
                    return false;
                if (!this.remoteConsumerID.equals(that.remoteConsumerID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(UnregisterRemoteConsumer_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            UnregisterRemoteConsumer_args typedOther = (UnregisterRemoteConsumer_args) other;

            lastComparison = Boolean.valueOf(isSetRemoteConsumerID()).compareTo(typedOther.isSetRemoteConsumerID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRemoteConsumerID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteConsumerID,
                        typedOther.remoteConsumerID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("UnregisterRemoteConsumer_args(");
            boolean first = true;

            sb.append("remoteConsumerID:");
            if (this.remoteConsumerID == null) {
                sb.append("null");
            } else {
                sb.append(this.remoteConsumerID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class UnregisterRemoteConsumer_argsStandardSchemeFactory implements SchemeFactory {
            public UnregisterRemoteConsumer_argsStandardScheme getScheme() {
                return new UnregisterRemoteConsumer_argsStandardScheme();
            }
        }

        private static class UnregisterRemoteConsumer_argsStandardScheme
                extends StandardScheme<UnregisterRemoteConsumer_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, UnregisterRemoteConsumer_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // REMOTE_CONSUMER_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.remoteConsumerID = iprot.readString();
                            struct.setRemoteConsumerIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, UnregisterRemoteConsumer_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.remoteConsumerID != null) {
                    oprot.writeFieldBegin(REMOTE_CONSUMER_ID_FIELD_DESC);
                    oprot.writeString(struct.remoteConsumerID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class UnregisterRemoteConsumer_argsTupleSchemeFactory implements SchemeFactory {
            public UnregisterRemoteConsumer_argsTupleScheme getScheme() {
                return new UnregisterRemoteConsumer_argsTupleScheme();
            }
        }

        private static class UnregisterRemoteConsumer_argsTupleScheme
                extends TupleScheme<UnregisterRemoteConsumer_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, UnregisterRemoteConsumer_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetRemoteConsumerID()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetRemoteConsumerID()) {
                    oprot.writeString(struct.remoteConsumerID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, UnregisterRemoteConsumer_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.remoteConsumerID = iprot.readString();
                    struct.setRemoteConsumerIDIsSet(true);
                }
            }
        }

    }

    public static class UnregisterRemoteConsumer_result implements
            org.apache.thrift.TBase<UnregisterRemoteConsumer_result, UnregisterRemoteConsumer_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "UnregisterRemoteConsumer_result");

        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new UnregisterRemoteConsumer_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new UnregisterRemoteConsumer_resultTupleSchemeFactory());
        }

        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnregisterRemoteConsumer_result.class,
                    metaDataMap);
        }

        public UnregisterRemoteConsumer_result() {
        }

        public UnregisterRemoteConsumer_result(AsapiException asapiEx) {
            this();
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public UnregisterRemoteConsumer_result(UnregisterRemoteConsumer_result other) {
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public UnregisterRemoteConsumer_result deepCopy() {
            return new UnregisterRemoteConsumer_result(this);
        }

        @Override
        public void clear() {
            this.asapiEx = null;
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public UnregisterRemoteConsumer_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof UnregisterRemoteConsumer_result)
                return this.equals((UnregisterRemoteConsumer_result) that);
            return false;
        }

        public boolean equals(UnregisterRemoteConsumer_result that) {
            if (that == null)
                return false;

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(UnregisterRemoteConsumer_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            UnregisterRemoteConsumer_result typedOther = (UnregisterRemoteConsumer_result) other;

            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("UnregisterRemoteConsumer_result(");
            boolean first = true;

            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class UnregisterRemoteConsumer_resultStandardSchemeFactory implements SchemeFactory {
            public UnregisterRemoteConsumer_resultStandardScheme getScheme() {
                return new UnregisterRemoteConsumer_resultStandardScheme();
            }
        }

        private static class UnregisterRemoteConsumer_resultStandardScheme
                extends StandardScheme<UnregisterRemoteConsumer_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, UnregisterRemoteConsumer_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, UnregisterRemoteConsumer_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class UnregisterRemoteConsumer_resultTupleSchemeFactory implements SchemeFactory {
            public UnregisterRemoteConsumer_resultTupleScheme getScheme() {
                return new UnregisterRemoteConsumer_resultTupleScheme();
            }
        }

        private static class UnregisterRemoteConsumer_resultTupleScheme
                extends TupleScheme<UnregisterRemoteConsumer_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, UnregisterRemoteConsumer_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetAsapiEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, UnregisterRemoteConsumer_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class RegisterRemoteProducer_args
            implements org.apache.thrift.TBase<RegisterRemoteProducer_args, RegisterRemoteProducer_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "RegisterRemoteProducer_args");

        private static final org.apache.thrift.protocol.TField TARGET_COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "targetComponentID", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField TARGET_INPUT_PORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "targetInputPortID", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new RegisterRemoteProducer_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new RegisterRemoteProducer_argsTupleSchemeFactory());
        }

        public String targetComponentID; // required
        public String targetInputPortID; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            TARGET_COMPONENT_ID((short) 1, "targetComponentID"), TARGET_INPUT_PORT_ID((short) 2, "targetInputPortID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // TARGET_COMPONENT_ID
                    return TARGET_COMPONENT_ID;
                case 2: // TARGET_INPUT_PORT_ID
                    return TARGET_INPUT_PORT_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.TARGET_COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("targetComponentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.TARGET_INPUT_PORT_ID, new org.apache.thrift.meta_data.FieldMetaData("targetInputPortID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegisterRemoteProducer_args.class,
                    metaDataMap);
        }

        public RegisterRemoteProducer_args() {
        }

        public RegisterRemoteProducer_args(String targetComponentID, String targetInputPortID) {
            this();
            this.targetComponentID = targetComponentID;
            this.targetInputPortID = targetInputPortID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public RegisterRemoteProducer_args(RegisterRemoteProducer_args other) {
            if (other.isSetTargetComponentID()) {
                this.targetComponentID = other.targetComponentID;
            }
            if (other.isSetTargetInputPortID()) {
                this.targetInputPortID = other.targetInputPortID;
            }
        }

        public RegisterRemoteProducer_args deepCopy() {
            return new RegisterRemoteProducer_args(this);
        }

        @Override
        public void clear() {
            this.targetComponentID = null;
            this.targetInputPortID = null;
        }

        public String getTargetComponentID() {
            return this.targetComponentID;
        }

        public RegisterRemoteProducer_args setTargetComponentID(String targetComponentID) {
            this.targetComponentID = targetComponentID;
            return this;
        }

        public void unsetTargetComponentID() {
            this.targetComponentID = null;
        }

        /**
         * Returns true if field targetComponentID is set (has been assigned a
         * value) and false otherwise
         */
        public boolean isSetTargetComponentID() {
            return this.targetComponentID != null;
        }

        public void setTargetComponentIDIsSet(boolean value) {
            if (!value) {
                this.targetComponentID = null;
            }
        }

        public String getTargetInputPortID() {
            return this.targetInputPortID;
        }

        public RegisterRemoteProducer_args setTargetInputPortID(String targetInputPortID) {
            this.targetInputPortID = targetInputPortID;
            return this;
        }

        public void unsetTargetInputPortID() {
            this.targetInputPortID = null;
        }

        /**
         * Returns true if field targetInputPortID is set (has been assigned a
         * value) and false otherwise
         */
        public boolean isSetTargetInputPortID() {
            return this.targetInputPortID != null;
        }

        public void setTargetInputPortIDIsSet(boolean value) {
            if (!value) {
                this.targetInputPortID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case TARGET_COMPONENT_ID:
                if (value == null) {
                    unsetTargetComponentID();
                } else {
                    setTargetComponentID((String) value);
                }
                break;

            case TARGET_INPUT_PORT_ID:
                if (value == null) {
                    unsetTargetInputPortID();
                } else {
                    setTargetInputPortID((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case TARGET_COMPONENT_ID:
                return getTargetComponentID();

            case TARGET_INPUT_PORT_ID:
                return getTargetInputPortID();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case TARGET_COMPONENT_ID:
                return isSetTargetComponentID();
            case TARGET_INPUT_PORT_ID:
                return isSetTargetInputPortID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof RegisterRemoteProducer_args)
                return this.equals((RegisterRemoteProducer_args) that);
            return false;
        }

        public boolean equals(RegisterRemoteProducer_args that) {
            if (that == null)
                return false;

            boolean this_present_targetComponentID = true && this.isSetTargetComponentID();
            boolean that_present_targetComponentID = true && that.isSetTargetComponentID();
            if (this_present_targetComponentID || that_present_targetComponentID) {
                if (!(this_present_targetComponentID && that_present_targetComponentID))
                    return false;
                if (!this.targetComponentID.equals(that.targetComponentID))
                    return false;
            }

            boolean this_present_targetInputPortID = true && this.isSetTargetInputPortID();
            boolean that_present_targetInputPortID = true && that.isSetTargetInputPortID();
            if (this_present_targetInputPortID || that_present_targetInputPortID) {
                if (!(this_present_targetInputPortID && that_present_targetInputPortID))
                    return false;
                if (!this.targetInputPortID.equals(that.targetInputPortID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(RegisterRemoteProducer_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            RegisterRemoteProducer_args typedOther = (RegisterRemoteProducer_args) other;

            lastComparison = Boolean.valueOf(isSetTargetComponentID()).compareTo(typedOther.isSetTargetComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTargetComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetComponentID,
                        typedOther.targetComponentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetTargetInputPortID()).compareTo(typedOther.isSetTargetInputPortID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTargetInputPortID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetInputPortID,
                        typedOther.targetInputPortID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("RegisterRemoteProducer_args(");
            boolean first = true;

            sb.append("targetComponentID:");
            if (this.targetComponentID == null) {
                sb.append("null");
            } else {
                sb.append(this.targetComponentID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("targetInputPortID:");
            if (this.targetInputPortID == null) {
                sb.append("null");
            } else {
                sb.append(this.targetInputPortID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class RegisterRemoteProducer_argsStandardSchemeFactory implements SchemeFactory {
            public RegisterRemoteProducer_argsStandardScheme getScheme() {
                return new RegisterRemoteProducer_argsStandardScheme();
            }
        }

        private static class RegisterRemoteProducer_argsStandardScheme
                extends StandardScheme<RegisterRemoteProducer_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, RegisterRemoteProducer_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // TARGET_COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.targetComponentID = iprot.readString();
                            struct.setTargetComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // TARGET_INPUT_PORT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.targetInputPortID = iprot.readString();
                            struct.setTargetInputPortIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, RegisterRemoteProducer_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.targetComponentID != null) {
                    oprot.writeFieldBegin(TARGET_COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.targetComponentID);
                    oprot.writeFieldEnd();
                }
                if (struct.targetInputPortID != null) {
                    oprot.writeFieldBegin(TARGET_INPUT_PORT_ID_FIELD_DESC);
                    oprot.writeString(struct.targetInputPortID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class RegisterRemoteProducer_argsTupleSchemeFactory implements SchemeFactory {
            public RegisterRemoteProducer_argsTupleScheme getScheme() {
                return new RegisterRemoteProducer_argsTupleScheme();
            }
        }

        private static class RegisterRemoteProducer_argsTupleScheme extends TupleScheme<RegisterRemoteProducer_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, RegisterRemoteProducer_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetTargetComponentID()) {
                    optionals.set(0);
                }
                if (struct.isSetTargetInputPortID()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetTargetComponentID()) {
                    oprot.writeString(struct.targetComponentID);
                }
                if (struct.isSetTargetInputPortID()) {
                    oprot.writeString(struct.targetInputPortID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, RegisterRemoteProducer_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.targetComponentID = iprot.readString();
                    struct.setTargetComponentIDIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.targetInputPortID = iprot.readString();
                    struct.setTargetInputPortIDIsSet(true);
                }
            }
        }

    }

    public static class RegisterRemoteProducer_result
            implements org.apache.thrift.TBase<RegisterRemoteProducer_result, RegisterRemoteProducer_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "RegisterRemoteProducer_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new RegisterRemoteProducer_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new RegisterRemoteProducer_resultTupleSchemeFactory());
        }

        public String success; // required
        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"), ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegisterRemoteProducer_result.class,
                    metaDataMap);
        }

        public RegisterRemoteProducer_result() {
        }

        public RegisterRemoteProducer_result(String success, AsapiException asapiEx) {
            this();
            this.success = success;
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public RegisterRemoteProducer_result(RegisterRemoteProducer_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public RegisterRemoteProducer_result deepCopy() {
            return new RegisterRemoteProducer_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.asapiEx = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public RegisterRemoteProducer_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public RegisterRemoteProducer_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((String) value);
                }
                break;

            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof RegisterRemoteProducer_result)
                return this.equals((RegisterRemoteProducer_result) that);
            return false;
        }

        public boolean equals(RegisterRemoteProducer_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(RegisterRemoteProducer_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            RegisterRemoteProducer_result typedOther = (RegisterRemoteProducer_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("RegisterRemoteProducer_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class RegisterRemoteProducer_resultStandardSchemeFactory implements SchemeFactory {
            public RegisterRemoteProducer_resultStandardScheme getScheme() {
                return new RegisterRemoteProducer_resultStandardScheme();
            }
        }

        private static class RegisterRemoteProducer_resultStandardScheme
                extends StandardScheme<RegisterRemoteProducer_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, RegisterRemoteProducer_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.success = iprot.readString();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, RegisterRemoteProducer_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class RegisterRemoteProducer_resultTupleSchemeFactory implements SchemeFactory {
            public RegisterRemoteProducer_resultTupleScheme getScheme() {
                return new RegisterRemoteProducer_resultTupleScheme();
            }
        }

        private static class RegisterRemoteProducer_resultTupleScheme
                extends TupleScheme<RegisterRemoteProducer_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, RegisterRemoteProducer_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAsapiEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, RegisterRemoteProducer_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class UnregisterRemoteProducer_args
            implements org.apache.thrift.TBase<UnregisterRemoteProducer_args, UnregisterRemoteProducer_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "UnregisterRemoteProducer_args");

        private static final org.apache.thrift.protocol.TField REMOTE_PRODUCER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "remoteProducerID", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new UnregisterRemoteProducer_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new UnregisterRemoteProducer_argsTupleSchemeFactory());
        }

        public String remoteProducerID; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            REMOTE_PRODUCER_ID((short) 1, "remoteProducerID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // REMOTE_PRODUCER_ID
                    return REMOTE_PRODUCER_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.REMOTE_PRODUCER_ID, new org.apache.thrift.meta_data.FieldMetaData("remoteProducerID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnregisterRemoteProducer_args.class,
                    metaDataMap);
        }

        public UnregisterRemoteProducer_args() {
        }

        public UnregisterRemoteProducer_args(String remoteProducerID) {
            this();
            this.remoteProducerID = remoteProducerID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public UnregisterRemoteProducer_args(UnregisterRemoteProducer_args other) {
            if (other.isSetRemoteProducerID()) {
                this.remoteProducerID = other.remoteProducerID;
            }
        }

        public UnregisterRemoteProducer_args deepCopy() {
            return new UnregisterRemoteProducer_args(this);
        }

        @Override
        public void clear() {
            this.remoteProducerID = null;
        }

        public String getRemoteProducerID() {
            return this.remoteProducerID;
        }

        public UnregisterRemoteProducer_args setRemoteProducerID(String remoteProducerID) {
            this.remoteProducerID = remoteProducerID;
            return this;
        }

        public void unsetRemoteProducerID() {
            this.remoteProducerID = null;
        }

        /**
         * Returns true if field remoteProducerID is set (has been assigned a
         * value) and false otherwise
         */
        public boolean isSetRemoteProducerID() {
            return this.remoteProducerID != null;
        }

        public void setRemoteProducerIDIsSet(boolean value) {
            if (!value) {
                this.remoteProducerID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case REMOTE_PRODUCER_ID:
                if (value == null) {
                    unsetRemoteProducerID();
                } else {
                    setRemoteProducerID((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case REMOTE_PRODUCER_ID:
                return getRemoteProducerID();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case REMOTE_PRODUCER_ID:
                return isSetRemoteProducerID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof UnregisterRemoteProducer_args)
                return this.equals((UnregisterRemoteProducer_args) that);
            return false;
        }

        public boolean equals(UnregisterRemoteProducer_args that) {
            if (that == null)
                return false;

            boolean this_present_remoteProducerID = true && this.isSetRemoteProducerID();
            boolean that_present_remoteProducerID = true && that.isSetRemoteProducerID();
            if (this_present_remoteProducerID || that_present_remoteProducerID) {
                if (!(this_present_remoteProducerID && that_present_remoteProducerID))
                    return false;
                if (!this.remoteProducerID.equals(that.remoteProducerID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(UnregisterRemoteProducer_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            UnregisterRemoteProducer_args typedOther = (UnregisterRemoteProducer_args) other;

            lastComparison = Boolean.valueOf(isSetRemoteProducerID()).compareTo(typedOther.isSetRemoteProducerID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRemoteProducerID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteProducerID,
                        typedOther.remoteProducerID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("UnregisterRemoteProducer_args(");
            boolean first = true;

            sb.append("remoteProducerID:");
            if (this.remoteProducerID == null) {
                sb.append("null");
            } else {
                sb.append(this.remoteProducerID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class UnregisterRemoteProducer_argsStandardSchemeFactory implements SchemeFactory {
            public UnregisterRemoteProducer_argsStandardScheme getScheme() {
                return new UnregisterRemoteProducer_argsStandardScheme();
            }
        }

        private static class UnregisterRemoteProducer_argsStandardScheme
                extends StandardScheme<UnregisterRemoteProducer_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, UnregisterRemoteProducer_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // REMOTE_PRODUCER_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.remoteProducerID = iprot.readString();
                            struct.setRemoteProducerIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, UnregisterRemoteProducer_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.remoteProducerID != null) {
                    oprot.writeFieldBegin(REMOTE_PRODUCER_ID_FIELD_DESC);
                    oprot.writeString(struct.remoteProducerID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class UnregisterRemoteProducer_argsTupleSchemeFactory implements SchemeFactory {
            public UnregisterRemoteProducer_argsTupleScheme getScheme() {
                return new UnregisterRemoteProducer_argsTupleScheme();
            }
        }

        private static class UnregisterRemoteProducer_argsTupleScheme
                extends TupleScheme<UnregisterRemoteProducer_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, UnregisterRemoteProducer_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetRemoteProducerID()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetRemoteProducerID()) {
                    oprot.writeString(struct.remoteProducerID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, UnregisterRemoteProducer_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.remoteProducerID = iprot.readString();
                    struct.setRemoteProducerIDIsSet(true);
                }
            }
        }

    }

    public static class UnregisterRemoteProducer_result implements
            org.apache.thrift.TBase<UnregisterRemoteProducer_result, UnregisterRemoteProducer_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "UnregisterRemoteProducer_result");

        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new UnregisterRemoteProducer_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new UnregisterRemoteProducer_resultTupleSchemeFactory());
        }

        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnregisterRemoteProducer_result.class,
                    metaDataMap);
        }

        public UnregisterRemoteProducer_result() {
        }

        public UnregisterRemoteProducer_result(AsapiException asapiEx) {
            this();
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public UnregisterRemoteProducer_result(UnregisterRemoteProducer_result other) {
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public UnregisterRemoteProducer_result deepCopy() {
            return new UnregisterRemoteProducer_result(this);
        }

        @Override
        public void clear() {
            this.asapiEx = null;
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public UnregisterRemoteProducer_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof UnregisterRemoteProducer_result)
                return this.equals((UnregisterRemoteProducer_result) that);
            return false;
        }

        public boolean equals(UnregisterRemoteProducer_result that) {
            if (that == null)
                return false;

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(UnregisterRemoteProducer_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            UnregisterRemoteProducer_result typedOther = (UnregisterRemoteProducer_result) other;

            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("UnregisterRemoteProducer_result(");
            boolean first = true;

            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class UnregisterRemoteProducer_resultStandardSchemeFactory implements SchemeFactory {
            public UnregisterRemoteProducer_resultStandardScheme getScheme() {
                return new UnregisterRemoteProducer_resultStandardScheme();
            }
        }

        private static class UnregisterRemoteProducer_resultStandardScheme
                extends StandardScheme<UnregisterRemoteProducer_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, UnregisterRemoteProducer_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, UnregisterRemoteProducer_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class UnregisterRemoteProducer_resultTupleSchemeFactory implements SchemeFactory {
            public UnregisterRemoteProducer_resultTupleScheme getScheme() {
                return new UnregisterRemoteProducer_resultTupleScheme();
            }
        }

        private static class UnregisterRemoteProducer_resultTupleScheme
                extends TupleScheme<UnregisterRemoteProducer_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, UnregisterRemoteProducer_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetAsapiEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, UnregisterRemoteProducer_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class PollData_args
            implements org.apache.thrift.TBase<PollData_args, PollData_args._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "PollData_args");

        private static final org.apache.thrift.protocol.TField COURCE_COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "courceComponentID", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField SOURCE_OUTPUT_PORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "sourceOutputPortID", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new PollData_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new PollData_argsTupleSchemeFactory());
        }

        public String courceComponentID; // required
        public String sourceOutputPortID; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COURCE_COMPONENT_ID((short) 1, "courceComponentID"), SOURCE_OUTPUT_PORT_ID((short) 2, "sourceOutputPortID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // COURCE_COMPONENT_ID
                    return COURCE_COMPONENT_ID;
                case 2: // SOURCE_OUTPUT_PORT_ID
                    return SOURCE_OUTPUT_PORT_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.COURCE_COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("courceComponentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.SOURCE_OUTPUT_PORT_ID, new org.apache.thrift.meta_data.FieldMetaData(
                    "sourceOutputPortID", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PollData_args.class, metaDataMap);
        }

        public PollData_args() {
        }

        public PollData_args(String courceComponentID, String sourceOutputPortID) {
            this();
            this.courceComponentID = courceComponentID;
            this.sourceOutputPortID = sourceOutputPortID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public PollData_args(PollData_args other) {
            if (other.isSetCourceComponentID()) {
                this.courceComponentID = other.courceComponentID;
            }
            if (other.isSetSourceOutputPortID()) {
                this.sourceOutputPortID = other.sourceOutputPortID;
            }
        }

        public PollData_args deepCopy() {
            return new PollData_args(this);
        }

        @Override
        public void clear() {
            this.courceComponentID = null;
            this.sourceOutputPortID = null;
        }

        public String getCourceComponentID() {
            return this.courceComponentID;
        }

        public PollData_args setCourceComponentID(String courceComponentID) {
            this.courceComponentID = courceComponentID;
            return this;
        }

        public void unsetCourceComponentID() {
            this.courceComponentID = null;
        }

        /**
         * Returns true if field courceComponentID is set (has been assigned a
         * value) and false otherwise
         */
        public boolean isSetCourceComponentID() {
            return this.courceComponentID != null;
        }

        public void setCourceComponentIDIsSet(boolean value) {
            if (!value) {
                this.courceComponentID = null;
            }
        }

        public String getSourceOutputPortID() {
            return this.sourceOutputPortID;
        }

        public PollData_args setSourceOutputPortID(String sourceOutputPortID) {
            this.sourceOutputPortID = sourceOutputPortID;
            return this;
        }

        public void unsetSourceOutputPortID() {
            this.sourceOutputPortID = null;
        }

        /**
         * Returns true if field sourceOutputPortID is set (has been assigned a
         * value) and false otherwise
         */
        public boolean isSetSourceOutputPortID() {
            return this.sourceOutputPortID != null;
        }

        public void setSourceOutputPortIDIsSet(boolean value) {
            if (!value) {
                this.sourceOutputPortID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case COURCE_COMPONENT_ID:
                if (value == null) {
                    unsetCourceComponentID();
                } else {
                    setCourceComponentID((String) value);
                }
                break;

            case SOURCE_OUTPUT_PORT_ID:
                if (value == null) {
                    unsetSourceOutputPortID();
                } else {
                    setSourceOutputPortID((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case COURCE_COMPONENT_ID:
                return getCourceComponentID();

            case SOURCE_OUTPUT_PORT_ID:
                return getSourceOutputPortID();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case COURCE_COMPONENT_ID:
                return isSetCourceComponentID();
            case SOURCE_OUTPUT_PORT_ID:
                return isSetSourceOutputPortID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof PollData_args)
                return this.equals((PollData_args) that);
            return false;
        }

        public boolean equals(PollData_args that) {
            if (that == null)
                return false;

            boolean this_present_courceComponentID = true && this.isSetCourceComponentID();
            boolean that_present_courceComponentID = true && that.isSetCourceComponentID();
            if (this_present_courceComponentID || that_present_courceComponentID) {
                if (!(this_present_courceComponentID && that_present_courceComponentID))
                    return false;
                if (!this.courceComponentID.equals(that.courceComponentID))
                    return false;
            }

            boolean this_present_sourceOutputPortID = true && this.isSetSourceOutputPortID();
            boolean that_present_sourceOutputPortID = true && that.isSetSourceOutputPortID();
            if (this_present_sourceOutputPortID || that_present_sourceOutputPortID) {
                if (!(this_present_sourceOutputPortID && that_present_sourceOutputPortID))
                    return false;
                if (!this.sourceOutputPortID.equals(that.sourceOutputPortID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(PollData_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            PollData_args typedOther = (PollData_args) other;

            lastComparison = Boolean.valueOf(isSetCourceComponentID()).compareTo(typedOther.isSetCourceComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCourceComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courceComponentID,
                        typedOther.courceComponentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSourceOutputPortID()).compareTo(typedOther.isSetSourceOutputPortID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSourceOutputPortID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceOutputPortID,
                        typedOther.sourceOutputPortID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("PollData_args(");
            boolean first = true;

            sb.append("courceComponentID:");
            if (this.courceComponentID == null) {
                sb.append("null");
            } else {
                sb.append(this.courceComponentID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("sourceOutputPortID:");
            if (this.sourceOutputPortID == null) {
                sb.append("null");
            } else {
                sb.append(this.sourceOutputPortID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class PollData_argsStandardSchemeFactory implements SchemeFactory {
            public PollData_argsStandardScheme getScheme() {
                return new PollData_argsStandardScheme();
            }
        }

        private static class PollData_argsStandardScheme extends StandardScheme<PollData_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, PollData_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // COURCE_COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.courceComponentID = iprot.readString();
                            struct.setCourceComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // SOURCE_OUTPUT_PORT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.sourceOutputPortID = iprot.readString();
                            struct.setSourceOutputPortIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, PollData_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.courceComponentID != null) {
                    oprot.writeFieldBegin(COURCE_COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.courceComponentID);
                    oprot.writeFieldEnd();
                }
                if (struct.sourceOutputPortID != null) {
                    oprot.writeFieldBegin(SOURCE_OUTPUT_PORT_ID_FIELD_DESC);
                    oprot.writeString(struct.sourceOutputPortID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class PollData_argsTupleSchemeFactory implements SchemeFactory {
            public PollData_argsTupleScheme getScheme() {
                return new PollData_argsTupleScheme();
            }
        }

        private static class PollData_argsTupleScheme extends TupleScheme<PollData_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, PollData_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetCourceComponentID()) {
                    optionals.set(0);
                }
                if (struct.isSetSourceOutputPortID()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCourceComponentID()) {
                    oprot.writeString(struct.courceComponentID);
                }
                if (struct.isSetSourceOutputPortID()) {
                    oprot.writeString(struct.sourceOutputPortID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, PollData_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.courceComponentID = iprot.readString();
                    struct.setCourceComponentIDIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.sourceOutputPortID = iprot.readString();
                    struct.setSourceOutputPortIDIsSet(true);
                }
            }
        }

    }

    public static class PollData_result implements org.apache.thrift.TBase<PollData_result, PollData_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "PollData_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new PollData_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new PollData_resultTupleSchemeFactory());
        }

        public ByteBuffer success; // required
        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"), ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PollData_result.class, metaDataMap);
        }

        public PollData_result() {
        }

        public PollData_result(ByteBuffer success, AsapiException asapiEx) {
            this();
            this.success = success;
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public PollData_result(PollData_result other) {
            if (other.isSetSuccess()) {
                this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
                ;
            }
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public PollData_result deepCopy() {
            return new PollData_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.asapiEx = null;
        }

        public byte[] getSuccess() {
            setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
            return success == null ? null : success.array();
        }

        public ByteBuffer bufferForSuccess() {
            return success;
        }

        public PollData_result setSuccess(byte[] success) {
            setSuccess(success == null ? (ByteBuffer) null : ByteBuffer.wrap(success));
            return this;
        }

        public PollData_result setSuccess(ByteBuffer success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public PollData_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((ByteBuffer) value);
                }
                break;

            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof PollData_result)
                return this.equals((PollData_result) that);
            return false;
        }

        public boolean equals(PollData_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(PollData_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            PollData_result typedOther = (PollData_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("PollData_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.success, sb);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class PollData_resultStandardSchemeFactory implements SchemeFactory {
            public PollData_resultStandardScheme getScheme() {
                return new PollData_resultStandardScheme();
            }
        }

        private static class PollData_resultStandardScheme extends StandardScheme<PollData_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, PollData_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.success = iprot.readBinary();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, PollData_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBinary(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class PollData_resultTupleSchemeFactory implements SchemeFactory {
            public PollData_resultTupleScheme getScheme() {
                return new PollData_resultTupleScheme();
            }
        }

        private static class PollData_resultTupleScheme extends TupleScheme<PollData_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, PollData_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAsapiEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeBinary(struct.success);
                }
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, PollData_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readBinary();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class SendData_args
            implements org.apache.thrift.TBase<SendData_args, SendData_args._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "SendData_args");

        private static final org.apache.thrift.protocol.TField TARGET_COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "targetComponentID", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField TARGET_INPUT_PORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "targetInputPortID", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "data", org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new SendData_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new SendData_argsTupleSchemeFactory());
        }

        public String targetComponentID; // required
        public String targetInputPortID; // required
        public ByteBuffer data; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            TARGET_COMPONENT_ID((short) 1, "targetComponentID"), TARGET_INPUT_PORT_ID((short) 2,
                    "targetInputPortID"), DATA((short) 3, "data");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // TARGET_COMPONENT_ID
                    return TARGET_COMPONENT_ID;
                case 2: // TARGET_INPUT_PORT_ID
                    return TARGET_INPUT_PORT_ID;
                case 3: // DATA
                    return DATA;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.TARGET_COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("targetComponentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.TARGET_INPUT_PORT_ID, new org.apache.thrift.meta_data.FieldMetaData("targetInputPortID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendData_args.class, metaDataMap);
        }

        public SendData_args() {
        }

        public SendData_args(String targetComponentID, String targetInputPortID, ByteBuffer data) {
            this();
            this.targetComponentID = targetComponentID;
            this.targetInputPortID = targetInputPortID;
            this.data = data;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public SendData_args(SendData_args other) {
            if (other.isSetTargetComponentID()) {
                this.targetComponentID = other.targetComponentID;
            }
            if (other.isSetTargetInputPortID()) {
                this.targetInputPortID = other.targetInputPortID;
            }
            if (other.isSetData()) {
                this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
                ;
            }
        }

        public SendData_args deepCopy() {
            return new SendData_args(this);
        }

        @Override
        public void clear() {
            this.targetComponentID = null;
            this.targetInputPortID = null;
            this.data = null;
        }

        public String getTargetComponentID() {
            return this.targetComponentID;
        }

        public SendData_args setTargetComponentID(String targetComponentID) {
            this.targetComponentID = targetComponentID;
            return this;
        }

        public void unsetTargetComponentID() {
            this.targetComponentID = null;
        }

        /**
         * Returns true if field targetComponentID is set (has been assigned a
         * value) and false otherwise
         */
        public boolean isSetTargetComponentID() {
            return this.targetComponentID != null;
        }

        public void setTargetComponentIDIsSet(boolean value) {
            if (!value) {
                this.targetComponentID = null;
            }
        }

        public String getTargetInputPortID() {
            return this.targetInputPortID;
        }

        public SendData_args setTargetInputPortID(String targetInputPortID) {
            this.targetInputPortID = targetInputPortID;
            return this;
        }

        public void unsetTargetInputPortID() {
            this.targetInputPortID = null;
        }

        /**
         * Returns true if field targetInputPortID is set (has been assigned a
         * value) and false otherwise
         */
        public boolean isSetTargetInputPortID() {
            return this.targetInputPortID != null;
        }

        public void setTargetInputPortIDIsSet(boolean value) {
            if (!value) {
                this.targetInputPortID = null;
            }
        }

        public byte[] getData() {
            setData(org.apache.thrift.TBaseHelper.rightSize(data));
            return data == null ? null : data.array();
        }

        public ByteBuffer bufferForData() {
            return data;
        }

        public SendData_args setData(byte[] data) {
            setData(data == null ? (ByteBuffer) null : ByteBuffer.wrap(data));
            return this;
        }

        public SendData_args setData(ByteBuffer data) {
            this.data = data;
            return this;
        }

        public void unsetData() {
            this.data = null;
        }

        /**
         * Returns true if field data is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetData() {
            return this.data != null;
        }

        public void setDataIsSet(boolean value) {
            if (!value) {
                this.data = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case TARGET_COMPONENT_ID:
                if (value == null) {
                    unsetTargetComponentID();
                } else {
                    setTargetComponentID((String) value);
                }
                break;

            case TARGET_INPUT_PORT_ID:
                if (value == null) {
                    unsetTargetInputPortID();
                } else {
                    setTargetInputPortID((String) value);
                }
                break;

            case DATA:
                if (value == null) {
                    unsetData();
                } else {
                    setData((ByteBuffer) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case TARGET_COMPONENT_ID:
                return getTargetComponentID();

            case TARGET_INPUT_PORT_ID:
                return getTargetInputPortID();

            case DATA:
                return getData();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case TARGET_COMPONENT_ID:
                return isSetTargetComponentID();
            case TARGET_INPUT_PORT_ID:
                return isSetTargetInputPortID();
            case DATA:
                return isSetData();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof SendData_args)
                return this.equals((SendData_args) that);
            return false;
        }

        public boolean equals(SendData_args that) {
            if (that == null)
                return false;

            boolean this_present_targetComponentID = true && this.isSetTargetComponentID();
            boolean that_present_targetComponentID = true && that.isSetTargetComponentID();
            if (this_present_targetComponentID || that_present_targetComponentID) {
                if (!(this_present_targetComponentID && that_present_targetComponentID))
                    return false;
                if (!this.targetComponentID.equals(that.targetComponentID))
                    return false;
            }

            boolean this_present_targetInputPortID = true && this.isSetTargetInputPortID();
            boolean that_present_targetInputPortID = true && that.isSetTargetInputPortID();
            if (this_present_targetInputPortID || that_present_targetInputPortID) {
                if (!(this_present_targetInputPortID && that_present_targetInputPortID))
                    return false;
                if (!this.targetInputPortID.equals(that.targetInputPortID))
                    return false;
            }

            boolean this_present_data = true && this.isSetData();
            boolean that_present_data = true && that.isSetData();
            if (this_present_data || that_present_data) {
                if (!(this_present_data && that_present_data))
                    return false;
                if (!this.data.equals(that.data))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(SendData_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            SendData_args typedOther = (SendData_args) other;

            lastComparison = Boolean.valueOf(isSetTargetComponentID()).compareTo(typedOther.isSetTargetComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTargetComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetComponentID,
                        typedOther.targetComponentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetTargetInputPortID()).compareTo(typedOther.isSetTargetInputPortID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTargetInputPortID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetInputPortID,
                        typedOther.targetInputPortID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetData()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, typedOther.data);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("SendData_args(");
            boolean first = true;

            sb.append("targetComponentID:");
            if (this.targetComponentID == null) {
                sb.append("null");
            } else {
                sb.append(this.targetComponentID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("targetInputPortID:");
            if (this.targetInputPortID == null) {
                sb.append("null");
            } else {
                sb.append(this.targetInputPortID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("data:");
            if (this.data == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.data, sb);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class SendData_argsStandardSchemeFactory implements SchemeFactory {
            public SendData_argsStandardScheme getScheme() {
                return new SendData_argsStandardScheme();
            }
        }

        private static class SendData_argsStandardScheme extends StandardScheme<SendData_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, SendData_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // TARGET_COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.targetComponentID = iprot.readString();
                            struct.setTargetComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // TARGET_INPUT_PORT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.targetInputPortID = iprot.readString();
                            struct.setTargetInputPortIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // DATA
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.data = iprot.readBinary();
                            struct.setDataIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, SendData_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.targetComponentID != null) {
                    oprot.writeFieldBegin(TARGET_COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.targetComponentID);
                    oprot.writeFieldEnd();
                }
                if (struct.targetInputPortID != null) {
                    oprot.writeFieldBegin(TARGET_INPUT_PORT_ID_FIELD_DESC);
                    oprot.writeString(struct.targetInputPortID);
                    oprot.writeFieldEnd();
                }
                if (struct.data != null) {
                    oprot.writeFieldBegin(DATA_FIELD_DESC);
                    oprot.writeBinary(struct.data);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class SendData_argsTupleSchemeFactory implements SchemeFactory {
            public SendData_argsTupleScheme getScheme() {
                return new SendData_argsTupleScheme();
            }
        }

        private static class SendData_argsTupleScheme extends TupleScheme<SendData_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, SendData_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetTargetComponentID()) {
                    optionals.set(0);
                }
                if (struct.isSetTargetInputPortID()) {
                    optionals.set(1);
                }
                if (struct.isSetData()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetTargetComponentID()) {
                    oprot.writeString(struct.targetComponentID);
                }
                if (struct.isSetTargetInputPortID()) {
                    oprot.writeString(struct.targetInputPortID);
                }
                if (struct.isSetData()) {
                    oprot.writeBinary(struct.data);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, SendData_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.targetComponentID = iprot.readString();
                    struct.setTargetComponentIDIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.targetInputPortID = iprot.readString();
                    struct.setTargetInputPortIDIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.data = iprot.readBinary();
                    struct.setDataIsSet(true);
                }
            }
        }

    }

    public static class SendData_result implements org.apache.thrift.TBase<SendData_result, SendData_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "SendData_result");

        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new SendData_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new SendData_resultTupleSchemeFactory());
        }

        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendData_result.class, metaDataMap);
        }

        public SendData_result() {
        }

        public SendData_result(AsapiException asapiEx) {
            this();
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public SendData_result(SendData_result other) {
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public SendData_result deepCopy() {
            return new SendData_result(this);
        }

        @Override
        public void clear() {
            this.asapiEx = null;
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public SendData_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof SendData_result)
                return this.equals((SendData_result) that);
            return false;
        }

        public boolean equals(SendData_result that) {
            if (that == null)
                return false;

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(SendData_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            SendData_result typedOther = (SendData_result) other;

            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("SendData_result(");
            boolean first = true;

            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class SendData_resultStandardSchemeFactory implements SchemeFactory {
            public SendData_resultStandardScheme getScheme() {
                return new SendData_resultStandardScheme();
            }
        }

        private static class SendData_resultStandardScheme extends StandardScheme<SendData_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, SendData_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, SendData_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class SendData_resultTupleSchemeFactory implements SchemeFactory {
            public SendData_resultTupleScheme getScheme() {
                return new SendData_resultTupleScheme();
            }
        }

        private static class SendData_resultTupleScheme extends TupleScheme<SendData_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, SendData_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetAsapiEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, SendData_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class RegisterLogListener_args
            implements org.apache.thrift.TBase<RegisterLogListener_args, RegisterLogListener_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "RegisterLogListener_args");

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new RegisterLogListener_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new RegisterLogListener_argsTupleSchemeFactory());
        }

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegisterLogListener_args.class, metaDataMap);
        }

        public RegisterLogListener_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public RegisterLogListener_args(RegisterLogListener_args other) {
        }

        public RegisterLogListener_args deepCopy() {
            return new RegisterLogListener_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof RegisterLogListener_args)
                return this.equals((RegisterLogListener_args) that);
            return false;
        }

        public boolean equals(RegisterLogListener_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(RegisterLogListener_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            RegisterLogListener_args typedOther = (RegisterLogListener_args) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("RegisterLogListener_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class RegisterLogListener_argsStandardSchemeFactory implements SchemeFactory {
            public RegisterLogListener_argsStandardScheme getScheme() {
                return new RegisterLogListener_argsStandardScheme();
            }
        }

        private static class RegisterLogListener_argsStandardScheme extends StandardScheme<RegisterLogListener_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, RegisterLogListener_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, RegisterLogListener_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class RegisterLogListener_argsTupleSchemeFactory implements SchemeFactory {
            public RegisterLogListener_argsTupleScheme getScheme() {
                return new RegisterLogListener_argsTupleScheme();
            }
        }

        private static class RegisterLogListener_argsTupleScheme extends TupleScheme<RegisterLogListener_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, RegisterLogListener_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, RegisterLogListener_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class RegisterLogListener_result
            implements org.apache.thrift.TBase<RegisterLogListener_result, RegisterLogListener_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "RegisterLogListener_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new RegisterLogListener_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new RegisterLogListener_resultTupleSchemeFactory());
        }

        public String success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegisterLogListener_result.class,
                    metaDataMap);
        }

        public RegisterLogListener_result() {
        }

        public RegisterLogListener_result(String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public RegisterLogListener_result(RegisterLogListener_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public RegisterLogListener_result deepCopy() {
            return new RegisterLogListener_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public RegisterLogListener_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof RegisterLogListener_result)
                return this.equals((RegisterLogListener_result) that);
            return false;
        }

        public boolean equals(RegisterLogListener_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(RegisterLogListener_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            RegisterLogListener_result typedOther = (RegisterLogListener_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("RegisterLogListener_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class RegisterLogListener_resultStandardSchemeFactory implements SchemeFactory {
            public RegisterLogListener_resultStandardScheme getScheme() {
                return new RegisterLogListener_resultStandardScheme();
            }
        }

        private static class RegisterLogListener_resultStandardScheme
                extends StandardScheme<RegisterLogListener_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, RegisterLogListener_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.success = iprot.readString();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, RegisterLogListener_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class RegisterLogListener_resultTupleSchemeFactory implements SchemeFactory {
            public RegisterLogListener_resultTupleScheme getScheme() {
                return new RegisterLogListener_resultTupleScheme();
            }
        }

        private static class RegisterLogListener_resultTupleScheme extends TupleScheme<RegisterLogListener_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, RegisterLogListener_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, RegisterLogListener_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class UnregisterLogListener_args
            implements org.apache.thrift.TBase<UnregisterLogListener_args, UnregisterLogListener_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "UnregisterLogListener_args");

        private static final org.apache.thrift.protocol.TField LOG_LISTENER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "logListenerID", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new UnregisterLogListener_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new UnregisterLogListener_argsTupleSchemeFactory());
        }

        public String logListenerID; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            LOG_LISTENER_ID((short) 1, "logListenerID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // LOG_LISTENER_ID
                    return LOG_LISTENER_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.LOG_LISTENER_ID, new org.apache.thrift.meta_data.FieldMetaData("logListenerID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnregisterLogListener_args.class,
                    metaDataMap);
        }

        public UnregisterLogListener_args() {
        }

        public UnregisterLogListener_args(String logListenerID) {
            this();
            this.logListenerID = logListenerID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public UnregisterLogListener_args(UnregisterLogListener_args other) {
            if (other.isSetLogListenerID()) {
                this.logListenerID = other.logListenerID;
            }
        }

        public UnregisterLogListener_args deepCopy() {
            return new UnregisterLogListener_args(this);
        }

        @Override
        public void clear() {
            this.logListenerID = null;
        }

        public String getLogListenerID() {
            return this.logListenerID;
        }

        public UnregisterLogListener_args setLogListenerID(String logListenerID) {
            this.logListenerID = logListenerID;
            return this;
        }

        public void unsetLogListenerID() {
            this.logListenerID = null;
        }

        /**
         * Returns true if field logListenerID is set (has been assigned a
         * value) and false otherwise
         */
        public boolean isSetLogListenerID() {
            return this.logListenerID != null;
        }

        public void setLogListenerIDIsSet(boolean value) {
            if (!value) {
                this.logListenerID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case LOG_LISTENER_ID:
                if (value == null) {
                    unsetLogListenerID();
                } else {
                    setLogListenerID((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case LOG_LISTENER_ID:
                return getLogListenerID();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case LOG_LISTENER_ID:
                return isSetLogListenerID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof UnregisterLogListener_args)
                return this.equals((UnregisterLogListener_args) that);
            return false;
        }

        public boolean equals(UnregisterLogListener_args that) {
            if (that == null)
                return false;

            boolean this_present_logListenerID = true && this.isSetLogListenerID();
            boolean that_present_logListenerID = true && that.isSetLogListenerID();
            if (this_present_logListenerID || that_present_logListenerID) {
                if (!(this_present_logListenerID && that_present_logListenerID))
                    return false;
                if (!this.logListenerID.equals(that.logListenerID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(UnregisterLogListener_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            UnregisterLogListener_args typedOther = (UnregisterLogListener_args) other;

            lastComparison = Boolean.valueOf(isSetLogListenerID()).compareTo(typedOther.isSetLogListenerID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLogListenerID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logListenerID, typedOther.logListenerID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("UnregisterLogListener_args(");
            boolean first = true;

            sb.append("logListenerID:");
            if (this.logListenerID == null) {
                sb.append("null");
            } else {
                sb.append(this.logListenerID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class UnregisterLogListener_argsStandardSchemeFactory implements SchemeFactory {
            public UnregisterLogListener_argsStandardScheme getScheme() {
                return new UnregisterLogListener_argsStandardScheme();
            }
        }

        private static class UnregisterLogListener_argsStandardScheme
                extends StandardScheme<UnregisterLogListener_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, UnregisterLogListener_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // LOG_LISTENER_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.logListenerID = iprot.readString();
                            struct.setLogListenerIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, UnregisterLogListener_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.logListenerID != null) {
                    oprot.writeFieldBegin(LOG_LISTENER_ID_FIELD_DESC);
                    oprot.writeString(struct.logListenerID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class UnregisterLogListener_argsTupleSchemeFactory implements SchemeFactory {
            public UnregisterLogListener_argsTupleScheme getScheme() {
                return new UnregisterLogListener_argsTupleScheme();
            }
        }

        private static class UnregisterLogListener_argsTupleScheme extends TupleScheme<UnregisterLogListener_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, UnregisterLogListener_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLogListenerID()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLogListenerID()) {
                    oprot.writeString(struct.logListenerID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, UnregisterLogListener_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.logListenerID = iprot.readString();
                    struct.setLogListenerIDIsSet(true);
                }
            }
        }

    }

    public static class UnregisterLogListener_result
            implements org.apache.thrift.TBase<UnregisterLogListener_result, UnregisterLogListener_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "UnregisterLogListener_result");

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new UnregisterLogListener_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new UnregisterLogListener_resultTupleSchemeFactory());
        }

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnregisterLogListener_result.class,
                    metaDataMap);
        }

        public UnregisterLogListener_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public UnregisterLogListener_result(UnregisterLogListener_result other) {
        }

        public UnregisterLogListener_result deepCopy() {
            return new UnregisterLogListener_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof UnregisterLogListener_result)
                return this.equals((UnregisterLogListener_result) that);
            return false;
        }

        public boolean equals(UnregisterLogListener_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(UnregisterLogListener_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            UnregisterLogListener_result typedOther = (UnregisterLogListener_result) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("UnregisterLogListener_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class UnregisterLogListener_resultStandardSchemeFactory implements SchemeFactory {
            public UnregisterLogListener_resultStandardScheme getScheme() {
                return new UnregisterLogListener_resultStandardScheme();
            }
        }

        private static class UnregisterLogListener_resultStandardScheme
                extends StandardScheme<UnregisterLogListener_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, UnregisterLogListener_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, UnregisterLogListener_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class UnregisterLogListener_resultTupleSchemeFactory implements SchemeFactory {
            public UnregisterLogListener_resultTupleScheme getScheme() {
                return new UnregisterLogListener_resultTupleScheme();
            }
        }

        private static class UnregisterLogListener_resultTupleScheme extends TupleScheme<UnregisterLogListener_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, UnregisterLogListener_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, UnregisterLogListener_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class storeModel_args implements org.apache.thrift.TBase<storeModel_args, storeModel_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "storeModel_args");

        private static final org.apache.thrift.protocol.TField MODEL_IN_XML_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "modelInXML", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "filename", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new storeModel_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new storeModel_argsTupleSchemeFactory());
        }

        public String modelInXML; // required
        public String filename; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MODEL_IN_XML((short) 1, "modelInXML"), FILENAME((short) 2, "filename");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // MODEL_IN_XML
                    return MODEL_IN_XML;
                case 2: // FILENAME
                    return FILENAME;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.MODEL_IN_XML, new org.apache.thrift.meta_data.FieldMetaData("modelInXML",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeModel_args.class, metaDataMap);
        }

        public storeModel_args() {
        }

        public storeModel_args(String modelInXML, String filename) {
            this();
            this.modelInXML = modelInXML;
            this.filename = filename;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public storeModel_args(storeModel_args other) {
            if (other.isSetModelInXML()) {
                this.modelInXML = other.modelInXML;
            }
            if (other.isSetFilename()) {
                this.filename = other.filename;
            }
        }

        public storeModel_args deepCopy() {
            return new storeModel_args(this);
        }

        @Override
        public void clear() {
            this.modelInXML = null;
            this.filename = null;
        }

        public String getModelInXML() {
            return this.modelInXML;
        }

        public storeModel_args setModelInXML(String modelInXML) {
            this.modelInXML = modelInXML;
            return this;
        }

        public void unsetModelInXML() {
            this.modelInXML = null;
        }

        /**
         * Returns true if field modelInXML is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetModelInXML() {
            return this.modelInXML != null;
        }

        public void setModelInXMLIsSet(boolean value) {
            if (!value) {
                this.modelInXML = null;
            }
        }

        public String getFilename() {
            return this.filename;
        }

        public storeModel_args setFilename(String filename) {
            this.filename = filename;
            return this;
        }

        public void unsetFilename() {
            this.filename = null;
        }

        /**
         * Returns true if field filename is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetFilename() {
            return this.filename != null;
        }

        public void setFilenameIsSet(boolean value) {
            if (!value) {
                this.filename = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case MODEL_IN_XML:
                if (value == null) {
                    unsetModelInXML();
                } else {
                    setModelInXML((String) value);
                }
                break;

            case FILENAME:
                if (value == null) {
                    unsetFilename();
                } else {
                    setFilename((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case MODEL_IN_XML:
                return getModelInXML();

            case FILENAME:
                return getFilename();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case MODEL_IN_XML:
                return isSetModelInXML();
            case FILENAME:
                return isSetFilename();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof storeModel_args)
                return this.equals((storeModel_args) that);
            return false;
        }

        public boolean equals(storeModel_args that) {
            if (that == null)
                return false;

            boolean this_present_modelInXML = true && this.isSetModelInXML();
            boolean that_present_modelInXML = true && that.isSetModelInXML();
            if (this_present_modelInXML || that_present_modelInXML) {
                if (!(this_present_modelInXML && that_present_modelInXML))
                    return false;
                if (!this.modelInXML.equals(that.modelInXML))
                    return false;
            }

            boolean this_present_filename = true && this.isSetFilename();
            boolean that_present_filename = true && that.isSetFilename();
            if (this_present_filename || that_present_filename) {
                if (!(this_present_filename && that_present_filename))
                    return false;
                if (!this.filename.equals(that.filename))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(storeModel_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            storeModel_args typedOther = (storeModel_args) other;

            lastComparison = Boolean.valueOf(isSetModelInXML()).compareTo(typedOther.isSetModelInXML());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetModelInXML()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelInXML, typedOther.modelInXML);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetFilename()).compareTo(typedOther.isSetFilename());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFilename()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, typedOther.filename);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("storeModel_args(");
            boolean first = true;

            sb.append("modelInXML:");
            if (this.modelInXML == null) {
                sb.append("null");
            } else {
                sb.append(this.modelInXML);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("filename:");
            if (this.filename == null) {
                sb.append("null");
            } else {
                sb.append(this.filename);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class storeModel_argsStandardSchemeFactory implements SchemeFactory {
            public storeModel_argsStandardScheme getScheme() {
                return new storeModel_argsStandardScheme();
            }
        }

        private static class storeModel_argsStandardScheme extends StandardScheme<storeModel_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, storeModel_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // MODEL_IN_XML
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.modelInXML = iprot.readString();
                            struct.setModelInXMLIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // FILENAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.filename = iprot.readString();
                            struct.setFilenameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, storeModel_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.modelInXML != null) {
                    oprot.writeFieldBegin(MODEL_IN_XML_FIELD_DESC);
                    oprot.writeString(struct.modelInXML);
                    oprot.writeFieldEnd();
                }
                if (struct.filename != null) {
                    oprot.writeFieldBegin(FILENAME_FIELD_DESC);
                    oprot.writeString(struct.filename);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class storeModel_argsTupleSchemeFactory implements SchemeFactory {
            public storeModel_argsTupleScheme getScheme() {
                return new storeModel_argsTupleScheme();
            }
        }

        private static class storeModel_argsTupleScheme extends TupleScheme<storeModel_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, storeModel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetModelInXML()) {
                    optionals.set(0);
                }
                if (struct.isSetFilename()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetModelInXML()) {
                    oprot.writeString(struct.modelInXML);
                }
                if (struct.isSetFilename()) {
                    oprot.writeString(struct.filename);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, storeModel_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.modelInXML = iprot.readString();
                    struct.setModelInXMLIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.filename = iprot.readString();
                    struct.setFilenameIsSet(true);
                }
            }
        }

    }

    public static class storeModel_result implements
            org.apache.thrift.TBase<storeModel_result, storeModel_result._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "storeModel_result");

        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new storeModel_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new storeModel_resultTupleSchemeFactory());
        }

        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeModel_result.class, metaDataMap);
        }

        public storeModel_result() {
        }

        public storeModel_result(AsapiException asapiEx) {
            this();
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public storeModel_result(storeModel_result other) {
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public storeModel_result deepCopy() {
            return new storeModel_result(this);
        }

        @Override
        public void clear() {
            this.asapiEx = null;
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public storeModel_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof storeModel_result)
                return this.equals((storeModel_result) that);
            return false;
        }

        public boolean equals(storeModel_result that) {
            if (that == null)
                return false;

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(storeModel_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            storeModel_result typedOther = (storeModel_result) other;

            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("storeModel_result(");
            boolean first = true;

            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class storeModel_resultStandardSchemeFactory implements SchemeFactory {
            public storeModel_resultStandardScheme getScheme() {
                return new storeModel_resultStandardScheme();
            }
        }

        private static class storeModel_resultStandardScheme extends StandardScheme<storeModel_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, storeModel_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, storeModel_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class storeModel_resultTupleSchemeFactory implements SchemeFactory {
            public storeModel_resultTupleScheme getScheme() {
                return new storeModel_resultTupleScheme();
            }
        }

        private static class storeModel_resultTupleScheme extends TupleScheme<storeModel_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, storeModel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetAsapiEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, storeModel_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class deleteModelFile_args
            implements org.apache.thrift.TBase<deleteModelFile_args, deleteModelFile_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "deleteModelFile_args");

        private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "filename", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new deleteModelFile_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteModelFile_argsTupleSchemeFactory());
        }

        public String filename; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            FILENAME((short) 1, "filename");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // FILENAME
                    return FILENAME;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteModelFile_args.class, metaDataMap);
        }

        public deleteModelFile_args() {
        }

        public deleteModelFile_args(String filename) {
            this();
            this.filename = filename;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteModelFile_args(deleteModelFile_args other) {
            if (other.isSetFilename()) {
                this.filename = other.filename;
            }
        }

        public deleteModelFile_args deepCopy() {
            return new deleteModelFile_args(this);
        }

        @Override
        public void clear() {
            this.filename = null;
        }

        public String getFilename() {
            return this.filename;
        }

        public deleteModelFile_args setFilename(String filename) {
            this.filename = filename;
            return this;
        }

        public void unsetFilename() {
            this.filename = null;
        }

        /**
         * Returns true if field filename is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetFilename() {
            return this.filename != null;
        }

        public void setFilenameIsSet(boolean value) {
            if (!value) {
                this.filename = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case FILENAME:
                if (value == null) {
                    unsetFilename();
                } else {
                    setFilename((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case FILENAME:
                return getFilename();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case FILENAME:
                return isSetFilename();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteModelFile_args)
                return this.equals((deleteModelFile_args) that);
            return false;
        }

        public boolean equals(deleteModelFile_args that) {
            if (that == null)
                return false;

            boolean this_present_filename = true && this.isSetFilename();
            boolean that_present_filename = true && that.isSetFilename();
            if (this_present_filename || that_present_filename) {
                if (!(this_present_filename && that_present_filename))
                    return false;
                if (!this.filename.equals(that.filename))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(deleteModelFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            deleteModelFile_args typedOther = (deleteModelFile_args) other;

            lastComparison = Boolean.valueOf(isSetFilename()).compareTo(typedOther.isSetFilename());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFilename()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, typedOther.filename);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteModelFile_args(");
            boolean first = true;

            sb.append("filename:");
            if (this.filename == null) {
                sb.append("null");
            } else {
                sb.append(this.filename);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteModelFile_argsStandardSchemeFactory implements SchemeFactory {
            public deleteModelFile_argsStandardScheme getScheme() {
                return new deleteModelFile_argsStandardScheme();
            }
        }

        private static class deleteModelFile_argsStandardScheme extends StandardScheme<deleteModelFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteModelFile_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // FILENAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.filename = iprot.readString();
                            struct.setFilenameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteModelFile_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.filename != null) {
                    oprot.writeFieldBegin(FILENAME_FIELD_DESC);
                    oprot.writeString(struct.filename);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteModelFile_argsTupleSchemeFactory implements SchemeFactory {
            public deleteModelFile_argsTupleScheme getScheme() {
                return new deleteModelFile_argsTupleScheme();
            }
        }

        private static class deleteModelFile_argsTupleScheme extends TupleScheme<deleteModelFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteModelFile_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFilename()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetFilename()) {
                    oprot.writeString(struct.filename);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteModelFile_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.filename = iprot.readString();
                    struct.setFilenameIsSet(true);
                }
            }
        }

    }

    public static class deleteModelFile_result
            implements org.apache.thrift.TBase<deleteModelFile_result, deleteModelFile_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "deleteModelFile_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.BOOL, (short) 0);
        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new deleteModelFile_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteModelFile_resultTupleSchemeFactory());
        }

        public boolean success; // required
        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"), ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                    new org.apache.thrift.meta_data.FieldMetaData("success",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteModelFile_result.class, metaDataMap);
        }

        public deleteModelFile_result() {
        }

        public deleteModelFile_result(boolean success, AsapiException asapiEx) {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteModelFile_result(deleteModelFile_result other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.success = other.success;
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public deleteModelFile_result deepCopy() {
            return new deleteModelFile_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
            this.asapiEx = null;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public deleteModelFile_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public deleteModelFile_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((Boolean) value);
                }
                break;

            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return Boolean.valueOf(isSuccess());

            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteModelFile_result)
                return this.equals((deleteModelFile_result) that);
            return false;
        }

        public boolean equals(deleteModelFile_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(deleteModelFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            deleteModelFile_result typedOther = (deleteModelFile_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteModelFile_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteModelFile_resultStandardSchemeFactory implements SchemeFactory {
            public deleteModelFile_resultStandardScheme getScheme() {
                return new deleteModelFile_resultStandardScheme();
            }
        }

        private static class deleteModelFile_resultStandardScheme extends StandardScheme<deleteModelFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteModelFile_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.success = iprot.readBool();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteModelFile_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                oprot.writeBool(struct.success);
                oprot.writeFieldEnd();
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteModelFile_resultTupleSchemeFactory implements SchemeFactory {
            public deleteModelFile_resultTupleScheme getScheme() {
                return new deleteModelFile_resultTupleScheme();
            }
        }

        private static class deleteModelFile_resultTupleScheme extends TupleScheme<deleteModelFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteModelFile_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAsapiEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteModelFile_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class listAllStoredModels_args
            implements org.apache.thrift.TBase<listAllStoredModels_args, listAllStoredModels_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "listAllStoredModels_args");

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new listAllStoredModels_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new listAllStoredModels_argsTupleSchemeFactory());
        }

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listAllStoredModels_args.class, metaDataMap);
        }

        public listAllStoredModels_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public listAllStoredModels_args(listAllStoredModels_args other) {
        }

        public listAllStoredModels_args deepCopy() {
            return new listAllStoredModels_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof listAllStoredModels_args)
                return this.equals((listAllStoredModels_args) that);
            return false;
        }

        public boolean equals(listAllStoredModels_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(listAllStoredModels_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            listAllStoredModels_args typedOther = (listAllStoredModels_args) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("listAllStoredModels_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class listAllStoredModels_argsStandardSchemeFactory implements SchemeFactory {
            public listAllStoredModels_argsStandardScheme getScheme() {
                return new listAllStoredModels_argsStandardScheme();
            }
        }

        private static class listAllStoredModels_argsStandardScheme extends StandardScheme<listAllStoredModels_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, listAllStoredModels_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, listAllStoredModels_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class listAllStoredModels_argsTupleSchemeFactory implements SchemeFactory {
            public listAllStoredModels_argsTupleScheme getScheme() {
                return new listAllStoredModels_argsTupleScheme();
            }
        }

        private static class listAllStoredModels_argsTupleScheme extends TupleScheme<listAllStoredModels_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, listAllStoredModels_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, listAllStoredModels_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class listAllStoredModels_result
            implements org.apache.thrift.TBase<listAllStoredModels_result, listAllStoredModels_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "listAllStoredModels_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new listAllStoredModels_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new listAllStoredModels_resultTupleSchemeFactory());
        }

        public List<String> success; // required
        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"), ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                    new org.apache.thrift.meta_data.FieldMetaData("success",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                    new org.apache.thrift.meta_data.FieldValueMetaData(
                                            org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listAllStoredModels_result.class,
                    metaDataMap);
        }

        public listAllStoredModels_result() {
        }

        public listAllStoredModels_result(List<String> success, AsapiException asapiEx) {
            this();
            this.success = success;
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public listAllStoredModels_result(listAllStoredModels_result other) {
            if (other.isSetSuccess()) {
                List<String> __this__success = new ArrayList<String>();
                for (String other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public listAllStoredModels_result deepCopy() {
            return new listAllStoredModels_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.asapiEx = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(String elem) {
            if (this.success == null) {
                this.success = new ArrayList<String>();
            }
            this.success.add(elem);
        }

        public List<String> getSuccess() {
            return this.success;
        }

        public listAllStoredModels_result setSuccess(List<String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public listAllStoredModels_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((List<String>) value);
                }
                break;

            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof listAllStoredModels_result)
                return this.equals((listAllStoredModels_result) that);
            return false;
        }

        public boolean equals(listAllStoredModels_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(listAllStoredModels_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            listAllStoredModels_result typedOther = (listAllStoredModels_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("listAllStoredModels_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class listAllStoredModels_resultStandardSchemeFactory implements SchemeFactory {
            public listAllStoredModels_resultStandardScheme getScheme() {
                return new listAllStoredModels_resultStandardScheme();
            }
        }

        private static class listAllStoredModels_resultStandardScheme
                extends StandardScheme<listAllStoredModels_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, listAllStoredModels_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                                struct.success = new ArrayList<String>(_list72.size);
                                for (int _i73 = 0; _i73 < _list72.size; ++_i73) {
                                    String _elem74; // required
                                    _elem74 = iprot.readString();
                                    struct.success.add(_elem74);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, listAllStoredModels_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (String _iter75 : struct.success) {
                            oprot.writeString(_iter75);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class listAllStoredModels_resultTupleSchemeFactory implements SchemeFactory {
            public listAllStoredModels_resultTupleScheme getScheme() {
                return new listAllStoredModels_resultTupleScheme();
            }
        }

        private static class listAllStoredModels_resultTupleScheme extends TupleScheme<listAllStoredModels_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, listAllStoredModels_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAsapiEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (String _iter76 : struct.success) {
                            oprot.writeString(_iter76);
                        }
                    }
                }
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, listAllStoredModels_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new ArrayList<String>(_list77.size);
                        for (int _i78 = 0; _i78 < _list77.size; ++_i78) {
                            String _elem79; // required
                            _elem79 = iprot.readString();
                            struct.success.add(_elem79);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class getModelFromFile_args
            implements org.apache.thrift.TBase<getModelFromFile_args, getModelFromFile_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "getModelFromFile_args");

        private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "filename", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getModelFromFile_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getModelFromFile_argsTupleSchemeFactory());
        }

        public String filename; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            FILENAME((short) 1, "filename");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // FILENAME
                    return FILENAME;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getModelFromFile_args.class, metaDataMap);
        }

        public getModelFromFile_args() {
        }

        public getModelFromFile_args(String filename) {
            this();
            this.filename = filename;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getModelFromFile_args(getModelFromFile_args other) {
            if (other.isSetFilename()) {
                this.filename = other.filename;
            }
        }

        public getModelFromFile_args deepCopy() {
            return new getModelFromFile_args(this);
        }

        @Override
        public void clear() {
            this.filename = null;
        }

        public String getFilename() {
            return this.filename;
        }

        public getModelFromFile_args setFilename(String filename) {
            this.filename = filename;
            return this;
        }

        public void unsetFilename() {
            this.filename = null;
        }

        /**
         * Returns true if field filename is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetFilename() {
            return this.filename != null;
        }

        public void setFilenameIsSet(boolean value) {
            if (!value) {
                this.filename = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case FILENAME:
                if (value == null) {
                    unsetFilename();
                } else {
                    setFilename((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case FILENAME:
                return getFilename();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case FILENAME:
                return isSetFilename();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getModelFromFile_args)
                return this.equals((getModelFromFile_args) that);
            return false;
        }

        public boolean equals(getModelFromFile_args that) {
            if (that == null)
                return false;

            boolean this_present_filename = true && this.isSetFilename();
            boolean that_present_filename = true && that.isSetFilename();
            if (this_present_filename || that_present_filename) {
                if (!(this_present_filename && that_present_filename))
                    return false;
                if (!this.filename.equals(that.filename))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getModelFromFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getModelFromFile_args typedOther = (getModelFromFile_args) other;

            lastComparison = Boolean.valueOf(isSetFilename()).compareTo(typedOther.isSetFilename());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFilename()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, typedOther.filename);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getModelFromFile_args(");
            boolean first = true;

            sb.append("filename:");
            if (this.filename == null) {
                sb.append("null");
            } else {
                sb.append(this.filename);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getModelFromFile_argsStandardSchemeFactory implements SchemeFactory {
            public getModelFromFile_argsStandardScheme getScheme() {
                return new getModelFromFile_argsStandardScheme();
            }
        }

        private static class getModelFromFile_argsStandardScheme extends StandardScheme<getModelFromFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getModelFromFile_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // FILENAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.filename = iprot.readString();
                            struct.setFilenameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getModelFromFile_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.filename != null) {
                    oprot.writeFieldBegin(FILENAME_FIELD_DESC);
                    oprot.writeString(struct.filename);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getModelFromFile_argsTupleSchemeFactory implements SchemeFactory {
            public getModelFromFile_argsTupleScheme getScheme() {
                return new getModelFromFile_argsTupleScheme();
            }
        }

        private static class getModelFromFile_argsTupleScheme extends TupleScheme<getModelFromFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getModelFromFile_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFilename()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetFilename()) {
                    oprot.writeString(struct.filename);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getModelFromFile_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.filename = iprot.readString();
                    struct.setFilenameIsSet(true);
                }
            }
        }

    }

    public static class getModelFromFile_result
            implements org.apache.thrift.TBase<getModelFromFile_result, getModelFromFile_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "getModelFromFile_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getModelFromFile_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getModelFromFile_resultTupleSchemeFactory());
        }

        public String success; // required
        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"), ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getModelFromFile_result.class, metaDataMap);
        }

        public getModelFromFile_result() {
        }

        public getModelFromFile_result(String success, AsapiException asapiEx) {
            this();
            this.success = success;
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getModelFromFile_result(getModelFromFile_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public getModelFromFile_result deepCopy() {
            return new getModelFromFile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.asapiEx = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public getModelFromFile_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public getModelFromFile_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((String) value);
                }
                break;

            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getModelFromFile_result)
                return this.equals((getModelFromFile_result) that);
            return false;
        }

        public boolean equals(getModelFromFile_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getModelFromFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getModelFromFile_result typedOther = (getModelFromFile_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getModelFromFile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getModelFromFile_resultStandardSchemeFactory implements SchemeFactory {
            public getModelFromFile_resultStandardScheme getScheme() {
                return new getModelFromFile_resultStandardScheme();
            }
        }

        private static class getModelFromFile_resultStandardScheme extends StandardScheme<getModelFromFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getModelFromFile_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.success = iprot.readString();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getModelFromFile_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getModelFromFile_resultTupleSchemeFactory implements SchemeFactory {
            public getModelFromFile_resultTupleScheme getScheme() {
                return new getModelFromFile_resultTupleScheme();
            }
        }

        private static class getModelFromFile_resultTupleScheme extends TupleScheme<getModelFromFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getModelFromFile_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAsapiEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getModelFromFile_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class getLogFile_args implements org.apache.thrift.TBase<getLogFile_args, getLogFile_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "getLogFile_args");

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getLogFile_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getLogFile_argsTupleSchemeFactory());
        }

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogFile_args.class, metaDataMap);
        }

        public getLogFile_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getLogFile_args(getLogFile_args other) {
        }

        public getLogFile_args deepCopy() {
            return new getLogFile_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getLogFile_args)
                return this.equals((getLogFile_args) that);
            return false;
        }

        public boolean equals(getLogFile_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getLogFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getLogFile_args typedOther = (getLogFile_args) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getLogFile_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getLogFile_argsStandardSchemeFactory implements SchemeFactory {
            public getLogFile_argsStandardScheme getScheme() {
                return new getLogFile_argsStandardScheme();
            }
        }

        private static class getLogFile_argsStandardScheme extends StandardScheme<getLogFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getLogFile_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getLogFile_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getLogFile_argsTupleSchemeFactory implements SchemeFactory {
            public getLogFile_argsTupleScheme getScheme() {
                return new getLogFile_argsTupleScheme();
            }
        }

        private static class getLogFile_argsTupleScheme extends TupleScheme<getLogFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getLogFile_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getLogFile_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getLogFile_result implements
            org.apache.thrift.TBase<getLogFile_result, getLogFile_result._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "getLogFile_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getLogFile_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getLogFile_resultTupleSchemeFactory());
        }

        public String success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogFile_result.class, metaDataMap);
        }

        public getLogFile_result() {
        }

        public getLogFile_result(String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getLogFile_result(getLogFile_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public getLogFile_result deepCopy() {
            return new getLogFile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public getLogFile_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getLogFile_result)
                return this.equals((getLogFile_result) that);
            return false;
        }

        public boolean equals(getLogFile_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getLogFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getLogFile_result typedOther = (getLogFile_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getLogFile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getLogFile_resultStandardSchemeFactory implements SchemeFactory {
            public getLogFile_resultStandardScheme getScheme() {
                return new getLogFile_resultStandardScheme();
            }
        }

        private static class getLogFile_resultStandardScheme extends StandardScheme<getLogFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getLogFile_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.success = iprot.readString();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getLogFile_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getLogFile_resultTupleSchemeFactory implements SchemeFactory {
            public getLogFile_resultTupleScheme getScheme() {
                return new getLogFile_resultTupleScheme();
            }
        }

        private static class getLogFile_resultTupleScheme extends TupleScheme<getLogFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getLogFile_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getLogFile_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class QueryStatus_args implements org.apache.thrift.TBase<QueryStatus_args, QueryStatus_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "QueryStatus_args");

        private static final org.apache.thrift.protocol.TField FULL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "fullList", org.apache.thrift.protocol.TType.BOOL, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new QueryStatus_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new QueryStatus_argsTupleSchemeFactory());
        }

        public boolean fullList; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            FULL_LIST((short) 1, "fullList");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // FULL_LIST
                    return FULL_LIST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __FULLLIST_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.FULL_LIST,
                    new org.apache.thrift.meta_data.FieldMetaData("fullList",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryStatus_args.class, metaDataMap);
        }

        public QueryStatus_args() {
        }

        public QueryStatus_args(boolean fullList) {
            this();
            this.fullList = fullList;
            setFullListIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public QueryStatus_args(QueryStatus_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.fullList = other.fullList;
        }

        public QueryStatus_args deepCopy() {
            return new QueryStatus_args(this);
        }

        @Override
        public void clear() {
            setFullListIsSet(false);
            this.fullList = false;
        }

        public boolean isFullList() {
            return this.fullList;
        }

        public QueryStatus_args setFullList(boolean fullList) {
            this.fullList = fullList;
            setFullListIsSet(true);
            return this;
        }

        public void unsetFullList() {
            __isset_bit_vector.clear(__FULLLIST_ISSET_ID);
        }

        /**
         * Returns true if field fullList is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetFullList() {
            return __isset_bit_vector.get(__FULLLIST_ISSET_ID);
        }

        public void setFullListIsSet(boolean value) {
            __isset_bit_vector.set(__FULLLIST_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case FULL_LIST:
                if (value == null) {
                    unsetFullList();
                } else {
                    setFullList((Boolean) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case FULL_LIST:
                return Boolean.valueOf(isFullList());

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case FULL_LIST:
                return isSetFullList();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof QueryStatus_args)
                return this.equals((QueryStatus_args) that);
            return false;
        }

        public boolean equals(QueryStatus_args that) {
            if (that == null)
                return false;

            boolean this_present_fullList = true;
            boolean that_present_fullList = true;
            if (this_present_fullList || that_present_fullList) {
                if (!(this_present_fullList && that_present_fullList))
                    return false;
                if (this.fullList != that.fullList)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(QueryStatus_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            QueryStatus_args typedOther = (QueryStatus_args) other;

            lastComparison = Boolean.valueOf(isSetFullList()).compareTo(typedOther.isSetFullList());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFullList()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullList, typedOther.fullList);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("QueryStatus_args(");
            boolean first = true;

            sb.append("fullList:");
            sb.append(this.fullList);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java
                // serialization is wacky, and doesn't call the default
                // constructor.
                __isset_bit_vector = new BitSet(1);
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class QueryStatus_argsStandardSchemeFactory implements SchemeFactory {
            public QueryStatus_argsStandardScheme getScheme() {
                return new QueryStatus_argsStandardScheme();
            }
        }

        private static class QueryStatus_argsStandardScheme extends StandardScheme<QueryStatus_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, QueryStatus_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // FULL_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.fullList = iprot.readBool();
                            struct.setFullListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, QueryStatus_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(FULL_LIST_FIELD_DESC);
                oprot.writeBool(struct.fullList);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class QueryStatus_argsTupleSchemeFactory implements SchemeFactory {
            public QueryStatus_argsTupleScheme getScheme() {
                return new QueryStatus_argsTupleScheme();
            }
        }

        private static class QueryStatus_argsTupleScheme extends TupleScheme<QueryStatus_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, QueryStatus_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFullList()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetFullList()) {
                    oprot.writeBool(struct.fullList);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, QueryStatus_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.fullList = iprot.readBool();
                    struct.setFullListIsSet(true);
                }
            }
        }

    }

    public static class QueryStatus_result implements
            org.apache.thrift.TBase<QueryStatus_result, QueryStatus_result._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "QueryStatus_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new QueryStatus_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new QueryStatus_resultTupleSchemeFactory());
        }

        public List<StatusObject> success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                                    StatusObject.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryStatus_result.class, metaDataMap);
        }

        public QueryStatus_result() {
        }

        public QueryStatus_result(List<StatusObject> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public QueryStatus_result(QueryStatus_result other) {
            if (other.isSetSuccess()) {
                List<StatusObject> __this__success = new ArrayList<StatusObject>();
                for (StatusObject other_element : other.success) {
                    __this__success.add(new StatusObject(other_element));
                }
                this.success = __this__success;
            }
        }

        public QueryStatus_result deepCopy() {
            return new QueryStatus_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<StatusObject> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(StatusObject elem) {
            if (this.success == null) {
                this.success = new ArrayList<StatusObject>();
            }
            this.success.add(elem);
        }

        public List<StatusObject> getSuccess() {
            return this.success;
        }

        public QueryStatus_result setSuccess(List<StatusObject> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((List<StatusObject>) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof QueryStatus_result)
                return this.equals((QueryStatus_result) that);
            return false;
        }

        public boolean equals(QueryStatus_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(QueryStatus_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            QueryStatus_result typedOther = (QueryStatus_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("QueryStatus_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class QueryStatus_resultStandardSchemeFactory implements SchemeFactory {
            public QueryStatus_resultStandardScheme getScheme() {
                return new QueryStatus_resultStandardScheme();
            }
        }

        private static class QueryStatus_resultStandardScheme extends StandardScheme<QueryStatus_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, QueryStatus_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                                struct.success = new ArrayList<StatusObject>(_list80.size);
                                for (int _i81 = 0; _i81 < _list80.size; ++_i81) {
                                    StatusObject _elem82; // required
                                    _elem82 = new StatusObject();
                                    _elem82.read(iprot);
                                    struct.success.add(_elem82);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, QueryStatus_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (StatusObject _iter83 : struct.success) {
                            _iter83.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class QueryStatus_resultTupleSchemeFactory implements SchemeFactory {
            public QueryStatus_resultTupleScheme getScheme() {
                return new QueryStatus_resultTupleScheme();
            }
        }

        private static class QueryStatus_resultTupleScheme extends TupleScheme<QueryStatus_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, QueryStatus_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (StatusObject _iter84 : struct.success) {
                            _iter84.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, QueryStatus_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<StatusObject>(_list85.size);
                        for (int _i86 = 0; _i86 < _list85.size; ++_i86) {
                            StatusObject _elem87; // required
                            _elem87 = new StatusObject();
                            _elem87.read(iprot);
                            struct.success.add(_elem87);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getRuntimePropertyList_args
            implements org.apache.thrift.TBase<getRuntimePropertyList_args, getRuntimePropertyList_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "getRuntimePropertyList_args");

        private static final org.apache.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "componentID", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "key", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getRuntimePropertyList_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getRuntimePropertyList_argsTupleSchemeFactory());
        }

        public String componentID; // required
        public String key; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPONENT_ID((short) 1, "componentID"), KEY((short) 2, "key");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // COMPONENT_ID
                    return COMPONENT_ID;
                case 2: // KEY
                    return KEY;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("componentID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRuntimePropertyList_args.class,
                    metaDataMap);
        }

        public getRuntimePropertyList_args() {
        }

        public getRuntimePropertyList_args(String componentID, String key) {
            this();
            this.componentID = componentID;
            this.key = key;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRuntimePropertyList_args(getRuntimePropertyList_args other) {
            if (other.isSetComponentID()) {
                this.componentID = other.componentID;
            }
            if (other.isSetKey()) {
                this.key = other.key;
            }
        }

        public getRuntimePropertyList_args deepCopy() {
            return new getRuntimePropertyList_args(this);
        }

        @Override
        public void clear() {
            this.componentID = null;
            this.key = null;
        }

        public String getComponentID() {
            return this.componentID;
        }

        public getRuntimePropertyList_args setComponentID(String componentID) {
            this.componentID = componentID;
            return this;
        }

        public void unsetComponentID() {
            this.componentID = null;
        }

        /**
         * Returns true if field componentID is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetComponentID() {
            return this.componentID != null;
        }

        public void setComponentIDIsSet(boolean value) {
            if (!value) {
                this.componentID = null;
            }
        }

        public String getKey() {
            return this.key;
        }

        public getRuntimePropertyList_args setKey(String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /**
         * Returns true if field key is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case COMPONENT_ID:
                if (value == null) {
                    unsetComponentID();
                } else {
                    setComponentID((String) value);
                }
                break;

            case KEY:
                if (value == null) {
                    unsetKey();
                } else {
                    setKey((String) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case COMPONENT_ID:
                return getComponentID();

            case KEY:
                return getKey();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case COMPONENT_ID:
                return isSetComponentID();
            case KEY:
                return isSetKey();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getRuntimePropertyList_args)
                return this.equals((getRuntimePropertyList_args) that);
            return false;
        }

        public boolean equals(getRuntimePropertyList_args that) {
            if (that == null)
                return false;

            boolean this_present_componentID = true && this.isSetComponentID();
            boolean that_present_componentID = true && that.isSetComponentID();
            if (this_present_componentID || that_present_componentID) {
                if (!(this_present_componentID && that_present_componentID))
                    return false;
                if (!this.componentID.equals(that.componentID))
                    return false;
            }

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getRuntimePropertyList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getRuntimePropertyList_args typedOther = (getRuntimePropertyList_args) other;

            lastComparison = Boolean.valueOf(isSetComponentID()).compareTo(typedOther.isSetComponentID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetComponentID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentID, typedOther.componentID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getRuntimePropertyList_args(");
            boolean first = true;

            sb.append("componentID:");
            if (this.componentID == null) {
                sb.append("null");
            } else {
                sb.append(this.componentID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRuntimePropertyList_argsStandardSchemeFactory implements SchemeFactory {
            public getRuntimePropertyList_argsStandardScheme getScheme() {
                return new getRuntimePropertyList_argsStandardScheme();
            }
        }

        private static class getRuntimePropertyList_argsStandardScheme
                extends StandardScheme<getRuntimePropertyList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRuntimePropertyList_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // COMPONENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.componentID = iprot.readString();
                            struct.setComponentIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // KEY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.key = iprot.readString();
                            struct.setKeyIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRuntimePropertyList_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.componentID != null) {
                    oprot.writeFieldBegin(COMPONENT_ID_FIELD_DESC);
                    oprot.writeString(struct.componentID);
                    oprot.writeFieldEnd();
                }
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRuntimePropertyList_argsTupleSchemeFactory implements SchemeFactory {
            public getRuntimePropertyList_argsTupleScheme getScheme() {
                return new getRuntimePropertyList_argsTupleScheme();
            }
        }

        private static class getRuntimePropertyList_argsTupleScheme extends TupleScheme<getRuntimePropertyList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRuntimePropertyList_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetComponentID()) {
                    optionals.set(0);
                }
                if (struct.isSetKey()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetComponentID()) {
                    oprot.writeString(struct.componentID);
                }
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRuntimePropertyList_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.componentID = iprot.readString();
                    struct.setComponentIDIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
            }
        }

    }

    public static class getRuntimePropertyList_result
            implements org.apache.thrift.TBase<getRuntimePropertyList_result, getRuntimePropertyList_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "getRuntimePropertyList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getRuntimePropertyList_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getRuntimePropertyList_resultTupleSchemeFactory());
        }

        public List<String> success; // required
        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"), ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                    new org.apache.thrift.meta_data.FieldMetaData("success",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                    new org.apache.thrift.meta_data.FieldValueMetaData(
                                            org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRuntimePropertyList_result.class,
                    metaDataMap);
        }

        public getRuntimePropertyList_result() {
        }

        public getRuntimePropertyList_result(List<String> success, AsapiException asapiEx) {
            this();
            this.success = success;
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRuntimePropertyList_result(getRuntimePropertyList_result other) {
            if (other.isSetSuccess()) {
                List<String> __this__success = new ArrayList<String>();
                for (String other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public getRuntimePropertyList_result deepCopy() {
            return new getRuntimePropertyList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.asapiEx = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(String elem) {
            if (this.success == null) {
                this.success = new ArrayList<String>();
            }
            this.success.add(elem);
        }

        public List<String> getSuccess() {
            return this.success;
        }

        public getRuntimePropertyList_result setSuccess(List<String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public getRuntimePropertyList_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((List<String>) value);
                }
                break;

            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getRuntimePropertyList_result)
                return this.equals((getRuntimePropertyList_result) that);
            return false;
        }

        public boolean equals(getRuntimePropertyList_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getRuntimePropertyList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getRuntimePropertyList_result typedOther = (getRuntimePropertyList_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getRuntimePropertyList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRuntimePropertyList_resultStandardSchemeFactory implements SchemeFactory {
            public getRuntimePropertyList_resultStandardScheme getScheme() {
                return new getRuntimePropertyList_resultStandardScheme();
            }
        }

        private static class getRuntimePropertyList_resultStandardScheme
                extends StandardScheme<getRuntimePropertyList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRuntimePropertyList_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                                struct.success = new ArrayList<String>(_list88.size);
                                for (int _i89 = 0; _i89 < _list88.size; ++_i89) {
                                    String _elem90; // required
                                    _elem90 = iprot.readString();
                                    struct.success.add(_elem90);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRuntimePropertyList_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (String _iter91 : struct.success) {
                            oprot.writeString(_iter91);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRuntimePropertyList_resultTupleSchemeFactory implements SchemeFactory {
            public getRuntimePropertyList_resultTupleScheme getScheme() {
                return new getRuntimePropertyList_resultTupleScheme();
            }
        }

        private static class getRuntimePropertyList_resultTupleScheme
                extends TupleScheme<getRuntimePropertyList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRuntimePropertyList_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAsapiEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (String _iter92 : struct.success) {
                            oprot.writeString(_iter92);
                        }
                    }
                }
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRuntimePropertyList_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new ArrayList<String>(_list93.size);
                        for (int _i94 = 0; _i94 < _list93.size; ++_i94) {
                            String _elem95; // required
                            _elem95 = iprot.readString();
                            struct.success.add(_elem95);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class getBundleDescriptors_args
            implements org.apache.thrift.TBase<getBundleDescriptors_args, getBundleDescriptors_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "getBundleDescriptors_args");

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getBundleDescriptors_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getBundleDescriptors_argsTupleSchemeFactory());
        }

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBundleDescriptors_args.class,
                    metaDataMap);
        }

        public getBundleDescriptors_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getBundleDescriptors_args(getBundleDescriptors_args other) {
        }

        public getBundleDescriptors_args deepCopy() {
            return new getBundleDescriptors_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getBundleDescriptors_args)
                return this.equals((getBundleDescriptors_args) that);
            return false;
        }

        public boolean equals(getBundleDescriptors_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getBundleDescriptors_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getBundleDescriptors_args typedOther = (getBundleDescriptors_args) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getBundleDescriptors_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getBundleDescriptors_argsStandardSchemeFactory implements SchemeFactory {
            public getBundleDescriptors_argsStandardScheme getScheme() {
                return new getBundleDescriptors_argsStandardScheme();
            }
        }

        private static class getBundleDescriptors_argsStandardScheme extends StandardScheme<getBundleDescriptors_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getBundleDescriptors_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getBundleDescriptors_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getBundleDescriptors_argsTupleSchemeFactory implements SchemeFactory {
            public getBundleDescriptors_argsTupleScheme getScheme() {
                return new getBundleDescriptors_argsTupleScheme();
            }
        }

        private static class getBundleDescriptors_argsTupleScheme extends TupleScheme<getBundleDescriptors_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getBundleDescriptors_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getBundleDescriptors_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getBundleDescriptors_result
            implements org.apache.thrift.TBase<getBundleDescriptors_result, getBundleDescriptors_result._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "getBundleDescriptors_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getBundleDescriptors_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getBundleDescriptors_resultTupleSchemeFactory());
        }

        public List<String> success; // required
        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"), ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                    new org.apache.thrift.meta_data.FieldMetaData("success",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                    new org.apache.thrift.meta_data.FieldValueMetaData(
                                            org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBundleDescriptors_result.class,
                    metaDataMap);
        }

        public getBundleDescriptors_result() {
        }

        public getBundleDescriptors_result(List<String> success, AsapiException asapiEx) {
            this();
            this.success = success;
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getBundleDescriptors_result(getBundleDescriptors_result other) {
            if (other.isSetSuccess()) {
                List<String> __this__success = new ArrayList<String>();
                for (String other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public getBundleDescriptors_result deepCopy() {
            return new getBundleDescriptors_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.asapiEx = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(String elem) {
            if (this.success == null) {
                this.success = new ArrayList<String>();
            }
            this.success.add(elem);
        }

        public List<String> getSuccess() {
            return this.success;
        }

        public getBundleDescriptors_result setSuccess(List<String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public getBundleDescriptors_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((List<String>) value);
                }
                break;

            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getBundleDescriptors_result)
                return this.equals((getBundleDescriptors_result) that);
            return false;
        }

        public boolean equals(getBundleDescriptors_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getBundleDescriptors_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getBundleDescriptors_result typedOther = (getBundleDescriptors_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getBundleDescriptors_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getBundleDescriptors_resultStandardSchemeFactory implements SchemeFactory {
            public getBundleDescriptors_resultStandardScheme getScheme() {
                return new getBundleDescriptors_resultStandardScheme();
            }
        }

        private static class getBundleDescriptors_resultStandardScheme
                extends StandardScheme<getBundleDescriptors_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getBundleDescriptors_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                                struct.success = new ArrayList<String>(_list96.size);
                                for (int _i97 = 0; _i97 < _list96.size; ++_i97) {
                                    String _elem98; // required
                                    _elem98 = iprot.readString();
                                    struct.success.add(_elem98);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getBundleDescriptors_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (String _iter99 : struct.success) {
                            oprot.writeString(_iter99);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getBundleDescriptors_resultTupleSchemeFactory implements SchemeFactory {
            public getBundleDescriptors_resultTupleScheme getScheme() {
                return new getBundleDescriptors_resultTupleScheme();
            }
        }

        private static class getBundleDescriptors_resultTupleScheme extends TupleScheme<getBundleDescriptors_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getBundleDescriptors_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAsapiEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (String _iter100 : struct.success) {
                            oprot.writeString(_iter100);
                        }
                    }
                }
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getBundleDescriptors_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new ArrayList<String>(_list101.size);
                        for (int _i102 = 0; _i102 < _list101.size; ++_i102) {
                            String _elem103; // required
                            _elem103 = iprot.readString();
                            struct.success.add(_elem103);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

    public static class Ping_args
            implements org.apache.thrift.TBase<Ping_args, Ping_args._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "Ping_args");

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new Ping_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new Ping_argsTupleSchemeFactory());
        }

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ping_args.class, metaDataMap);
        }

        public Ping_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public Ping_args(Ping_args other) {
        }

        public Ping_args deepCopy() {
            return new Ping_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof Ping_args)
                return this.equals((Ping_args) that);
            return false;
        }

        public boolean equals(Ping_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(Ping_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            Ping_args typedOther = (Ping_args) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("Ping_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class Ping_argsStandardSchemeFactory implements SchemeFactory {
            public Ping_argsStandardScheme getScheme() {
                return new Ping_argsStandardScheme();
            }
        }

        private static class Ping_argsStandardScheme extends StandardScheme<Ping_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, Ping_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, Ping_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class Ping_argsTupleSchemeFactory implements SchemeFactory {
            public Ping_argsTupleScheme getScheme() {
                return new Ping_argsTupleScheme();
            }
        }

        private static class Ping_argsTupleScheme extends TupleScheme<Ping_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, Ping_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, Ping_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class Ping_result
            implements org.apache.thrift.TBase<Ping_result, Ping_result._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "Ping_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.I32, (short) 0);
        private static final org.apache.thrift.protocol.TField ASAPI_EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "asapiEx", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new Ping_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new Ping_resultTupleSchemeFactory());
        }

        public int success; // required
        public AsapiException asapiEx; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"), ASAPI_EX((short) 1, "asapiEx");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // ASAPI_EX
                    return ASAPI_EX;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                    new org.apache.thrift.meta_data.FieldMetaData("success",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.ASAPI_EX, new org.apache.thrift.meta_data.FieldMetaData("asapiEx",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ping_result.class, metaDataMap);
        }

        public Ping_result() {
        }

        public Ping_result(int success, AsapiException asapiEx) {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.asapiEx = asapiEx;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public Ping_result(Ping_result other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.success = other.success;
            if (other.isSetAsapiEx()) {
                this.asapiEx = new AsapiException(other.asapiEx);
            }
        }

        public Ping_result deepCopy() {
            return new Ping_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
            this.asapiEx = null;
        }

        public int getSuccess() {
            return this.success;
        }

        public Ping_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
        }

        public AsapiException getAsapiEx() {
            return this.asapiEx;
        }

        public Ping_result setAsapiEx(AsapiException asapiEx) {
            this.asapiEx = asapiEx;
            return this;
        }

        public void unsetAsapiEx() {
            this.asapiEx = null;
        }

        /**
         * Returns true if field asapiEx is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetAsapiEx() {
            return this.asapiEx != null;
        }

        public void setAsapiExIsSet(boolean value) {
            if (!value) {
                this.asapiEx = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((Integer) value);
                }
                break;

            case ASAPI_EX:
                if (value == null) {
                    unsetAsapiEx();
                } else {
                    setAsapiEx((AsapiException) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return Integer.valueOf(getSuccess());

            case ASAPI_EX:
                return getAsapiEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case ASAPI_EX:
                return isSetAsapiEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof Ping_result)
                return this.equals((Ping_result) that);
            return false;
        }

        public boolean equals(Ping_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_asapiEx = true && this.isSetAsapiEx();
            boolean that_present_asapiEx = true && that.isSetAsapiEx();
            if (this_present_asapiEx || that_present_asapiEx) {
                if (!(this_present_asapiEx && that_present_asapiEx))
                    return false;
                if (!this.asapiEx.equals(that.asapiEx))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(Ping_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            Ping_result typedOther = (Ping_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAsapiEx()).compareTo(typedOther.isSetAsapiEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAsapiEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asapiEx, typedOther.asapiEx);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("Ping_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("asapiEx:");
            if (this.asapiEx == null) {
                sb.append("null");
            } else {
                sb.append(this.asapiEx);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class Ping_resultStandardSchemeFactory implements SchemeFactory {
            public Ping_resultStandardScheme getScheme() {
                return new Ping_resultStandardScheme();
            }
        }

        private static class Ping_resultStandardScheme extends StandardScheme<Ping_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, Ping_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.success = iprot.readI32();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // ASAPI_EX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.asapiEx = new AsapiException();
                            struct.asapiEx.read(iprot);
                            struct.setAsapiExIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, Ping_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                oprot.writeI32(struct.success);
                oprot.writeFieldEnd();
                if (struct.asapiEx != null) {
                    oprot.writeFieldBegin(ASAPI_EX_FIELD_DESC);
                    struct.asapiEx.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class Ping_resultTupleSchemeFactory implements SchemeFactory {
            public Ping_resultTupleScheme getScheme() {
                return new Ping_resultTupleScheme();
            }
        }

        private static class Ping_resultTupleScheme extends TupleScheme<Ping_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, Ping_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAsapiEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
                if (struct.isSetAsapiEx()) {
                    struct.asapiEx.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, Ping_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.asapiEx = new AsapiException();
                    struct.asapiEx.read(iprot);
                    struct.setAsapiExIsSet(true);
                }
            }
        }

    }

}
