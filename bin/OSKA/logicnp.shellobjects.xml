<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<doc>
    <assembly>
        <name>LogicNP.ShellObjects</name>
    </assembly>
    <members>
        <member name="N:LogicNP.ShellObjects">
            <summary>The LogicNP.ShellObjects namespace provides class and enumeration related to the ShellLink control, UrlLink control, ShellNotifyIcon control and ShellPopupNotification control.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.IWizardPainter">
            <summary>Provides an interface for painting the wizard control.</summary>
            <remarks>This interface should be implemented to provide custom painting logic for the wizard. The  WizardPainterClassic class implements this interface and provides default painting logic for the wizard control. To provide custom painting logic, you can either inherit from this class and override the interface methods or implement this interface in a new class. The  Painter property of Wizard or  WizardPage class is used to associate the painter with the wizard.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.IWizardPainter.PaintButton(LogicNP.ShellObjects.WizardPaintButtonEventArgs)">
            <summary>Paints the Back, Next, Finish, Help and Cancel buttons of the wizard.</summary>
            <remarks>The  Button property of  WizardPaintButtonEventArgs class specifies the button that is to be painted.</remarks>
            <param name="e">The data for the method.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.IWizardPainter.PaintButtonContainer(LogicNP.ShellObjects.WizardPaintEventArgs)">
            <summary>Paints the part of the wizard which holds the buttons.</summary>
            <remarks>The  Bounds,  Graphics,  Wizard and  WizardPage properties of the  WizardPaintEventArgs class can be used during painting.</remarks>
            <param name="e">The data for the method.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.IWizardPainter.PaintPage(LogicNP.ShellObjects.WizardPaintEventArgs)">
            <summary>Paints a page of the wizard.</summary>
            <remarks>The  Bounds,  Graphics,  Wizard and  WizardPage properties of the  WizardPaintEventArgs class can be used during painting. The  Bounds property specifies a rectangle starting at (0,0) and extending across the width and height of the page.</remarks>
            <param name="e">The data for the method.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.IWizardPainter.PaintPageHeader(LogicNP.ShellObjects.WizardPaintEventArgs)">
            <summary>Paints the page header area of the wizard.</summary>
            <remarks>The  Bounds,  Graphics,  Wizard and  WizardPage properties of the  WizardPaintEventArgs class can be used during painting.</remarks>
            <param name="e">The data for the method.</param>
        </member>
        <member name="T:LogicNP.ShellObjects.AnimStyles">
            <summary>Specifies animation styles of a popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.AnimStyles.None">
            <summary>Specifies no animation.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.AnimStyles.Slide">
            <summary>Specifies that popup notifications are slided when showing or closing.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.AnimStyles.Fade">
            <summary>Specifies that popup notifications are faded in and out of view when showing and closing.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.AnimStyles.SlideAndFade">
            <summary>Specifies a combination of slide and fade animation.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.AutoBoolean">
            <summary>Represents a boolean value with an additional 'Auto' state.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.AutoBoolean.True">
            <summary>Represents a True value.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.AutoBoolean.False">
            <summary>Represents a False value.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.AutoBoolean.Auto">
            <summary>Species that the value should be automatically determined based on other settings.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.AutoHideAppBarStates">
            <summary>Specifies whether the ShellAppBar is hidden or visible when in AutoHide mode</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.AutoHideAppBarStates.Visible">
            <summary>Specifies that the autohide appbar is visible.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.AutoHideAppBarStates.Hidden">
            <summary>Specifies that the autohide appbar is hidden.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.AutoPositioningDirections">
            <summary>Specifies how multiple popup notifications are shown when automatic positioning is used.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.AutoPositioningDirections.Auto">
            <summary>Specifies that one of the below values is automatically selected depending on the taskbar position.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.AutoPositioningDirections.TopLeftToBottomLeft">
            <summary>Specifies that popup notifications are arranged from the top left corner to the bottom left corner.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.AutoPositioningDirections.TopLeftToTopRight">
            <summary>Specifies that popup notifications are arranged from the top left corner to the top right corner.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.AutoPositioningDirections.TopRightToBottomRight">
            <summary>Specifies that popup notifications are arranged from the top left corner to the top right corner.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.AutoPositioningDirections.TopRightToTopLeft">
            <summary>Specifies that popup notifications are arranged from the top left corner to the top right corner.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.AutoPositioningDirections.BottomLeftToTopLeft">
            <summary>Specifies that popup notifications are arranged from the bottom left corner to the top left corner.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.AutoPositioningDirections.BottomLeftToBottomRight">
            <summary>Specifies that popup notifications are arranged from the bottom left corner to the bottom right corner.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.AutoPositioningDirections.BottomRightToTopRight">
            <summary>Specifies that popup notifications are arranged from the bottom right corner to the top right corner.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.AutoPositioningDirections.BottomRightToBottomLeft">
            <summary>Specifies that popup notifications are arranged from the bottom right corner to the bottom left corner.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.BorderStyles">
            <summary>Specifies border styles for a popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.BorderStyles.Solid">
            <summary>Specifies a 1-pixel wide solid border.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.BorderStyles.Dashed">
            <summary>Specifies a 1-pixel wide dash border.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.BorderStyles.Dotted">
            <summary>Specifies a 1-pixel wide dotted border.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.BorderStyles.DashDotted">
            <summary>Specifies a 1-pixel wide dash-dot border.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.BorderStyles.DashDotDotted">
            <summary>Specifies a 1-pixel wide dash-dot-dot border.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.BorderStyles.Sunken">
            <summary>Specifies a 2-pixel wide 3D sunken border.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.BorderStyles.Raised">
            <summary>Specifies a 1-pixel wide 3D sunken border.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.BorderStyles.RaisedSoft">
            <summary>Specifies a 1-pixel wide 3D raised border.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.BorderStyles.RaisedHeavy">
            <summary>Specifies a 4 pixel wide 3D raised border.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.BorderStyles.SunkenSoft">
            <summary>Specifies a 1-pixel wide 3D sunken border.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.BorderStyles.Etched">
            <summary>Specifies a 2-pixel wide 3D etched border.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.BorderStyles.None">
            <summary>Specifies no border.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.ControlResizeSettings">
            <summary>Indicates which aspects of the control should be resized.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ControlResizeSettings.None">
            <summary>Indicates that the control should not be resized.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ControlResizeSettings.Left">
            <summary>Indicates that the horizontal position of the control should be resized.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ControlResizeSettings.Width">
            <summary>Indicates that the width of the control should be resized.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ControlResizeSettings.Top">
            <summary>Indicates that the vertical position of the control should be resized.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ControlResizeSettings.Height">
            <summary>Indicates that the height of the control should be resized.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ControlResizeSettings.Font">
            <summary>Indicates that the font size of the control should be resized.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ControlResizeSettings.Children">
            <summary>Indicates that child controls of the control should be resized.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ControlResizeSettings.All">
            <summary>Indicates that all aspects of the control should be resized.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.DaysOfTheMonth">
            <summary>Specifies the days of a month.</summary>
            <remarks>The DaysOfTheMonth enumeration represents the days of the month and is used for setting the  DaysOfTheMonth property of the  MonthlyTrigger class.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day01">
            <summary>Day 1 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day02">
            <summary>Day 2 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day03">
            <summary>Day 3 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day04">
            <summary>Day 4 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day05">
            <summary>Day 5 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day06">
            <summary>Day 6 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day07">
            <summary>Day 7 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day08">
            <summary>Day 8 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day09">
            <summary>Day 9 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day10">
            <summary>Day 10 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day11">
            <summary>Day 11 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day12">
            <summary>Day 12 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day13">
            <summary>Day 13 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day14">
            <summary>Day 14 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day15">
            <summary>Day 15 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day16">
            <summary>Day 16 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day17">
            <summary>Day 17 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day18">
            <summary>Day 18 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day19">
            <summary>Day 19 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day20">
            <summary>Day 20 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day21">
            <summary>Day 21 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day22">
            <summary>Day 22 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day23">
            <summary>Day 23 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day24">
            <summary>Day 24 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day25">
            <summary>Day 25 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day26">
            <summary>Day 26 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day27">
            <summary>Day 27 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day28">
            <summary>Day 28 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day29">
            <summary>Day 29 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day30">
            <summary>Day 30 of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheMonth.Day31">
            <summary>Day 31 of the month.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.DaysOfTheWeek">
            <summary>Specifies the days of the week.</summary>
            <remarks>The DaysOfTheWeek enumeration represents the days of the week and is used for setting the  DaysOfTheWeek property of the  MonthlyDOWTrigger class.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheWeek.Sunday">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheWeek.Monday">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheWeek.Tuesday">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheWeek.Wednesday">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheWeek.Thursday">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheWeek.Friday">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DaysOfTheWeek.Saturday">
            <summary>None.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.DockingEdges">
            <summary>Specifies ShellAppBar Docking Edges</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.DockingEdges.UnDocked">
            <summary>Specifies that the appbar is undocked.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DockingEdges.Left">
            <summary>Specifies the left edge of the screen.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DockingEdges.Right">
            <summary>Specifies the right edge of the screen.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DockingEdges.Top">
            <summary>Specifies the top edge of the screen.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DockingEdges.Bottom">
            <summary>Specifies the bottom edge of the screen.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.DragDockingEdges">
            <summary>Specifies ShellAppBar Drag-Docking Edges</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.DragDockingEdges.None">
            <summary>Specifies that drag-docking is not allowed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DragDockingEdges.UnDocked">
            <summary>Specifies that the appbar can be undocked by drag-docking.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DragDockingEdges.Left">
            <summary>Specifies that drag-docking is allowed to the left screen edge.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DragDockingEdges.Right">
            <summary>Specifies that drag-docking is allowed to the right screen edge.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DragDockingEdges.Top">
            <summary>Specifies that drag-docking is allowed to the top screen edge.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DragDockingEdges.Bottom">
            <summary>Specifies that drag-docking is allowed to the bottom screen edge.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.DragDockingEdges.All">
            <summary>Specifies that drag-docking is allowed to all screen edges and undocking is also allowed.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.EventType">
            <summary>Specifies various events which fire an  EventTrigger.</summary>
            <remarks>The EventType enumeration represents the types of the event which fire an  EventTrigger.This enumeration is used while initializing a new instance of the  EventTrigger class.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.EventType.OnIdle">
            <summary>Occurs when the system remains idle for the amount of time specified by the idle wait time of the task.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.EventType.OnSystemStart">
            <summary>Occurs at system startup</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.EventType.OnLogon">
            <summary>Occurs at system Logon.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.FillStyles">
            <summary>Specifies background fill styles for a popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.FillStyles.Solid">
            <summary>Specifies solid fill style.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.FillStyles.Gradient">
            <summary>Specifies gradient fill style.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.FillStyles.Hatched">
            <summary>Specifies hatched fill style.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.FontStyles">
            <summary>Specifies font styles of text shown in a popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.FontStyles.Regular">
            <summary>Specifies that the font is regular.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.FontStyles.Bold">
            <summary>Specifies that the font is bold.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.FontStyles.Italic">
            <summary>Specifies that the font is italic.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.FontStyles.Underline">
            <summary>Specifies that the font is underlined.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.FontStyles.StrikeOut">
            <summary>Specifies that the font is striked out.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.FormAnimStyles">
            <summary>Specifies the animation style to be used for form animation when minimizing or maximizing the form</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.FormAnimStyles.On">
            <summary>Form animation is used.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.FormAnimStyles.Off">
            <summary>Form animation is not used.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.FormAnimStyles.SystemDefault">
            <summary>Form animation is used if animation is turned on in the system.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.FormSettings">
            <summary>Indicates which properties of the host form of the Resizer component should be saved and restored.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.FormSettings.None">
            <summary>Indicates that no properties of the host form should be saved and restored.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.FormSettings.SaveSize">
            <summary>Indicates that the size of the host form should be saved and restored.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.FormSettings.ResizeOnResolutionChange">
            <summary>Indicates that the host form should be resized if the display resolution changes or if the display resolution is different than the design-time resolution.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.FormSettings.All">
            <summary>Indicates that all the above aspects of the host form should saved and restored.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.GradientModes">
            <summary>Specifies gradient styles for a popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.GradientModes.Vertical">
            <summary>Specifies a vertical gradient.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.GradientModes.Horizontal">
            <summary>Specifies a horizontal gradient.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.HAlignments">
            <summary>Specifies horizontal alignment styles for various elements in a popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.HAlignments.Left">
            <summary>Specifies left alignment.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.HAlignments.Center">
            <summary>Specifies center alignment.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.HAlignments.Right">
            <summary>Specifies right alignment.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.HAnchor">
            <summary>Specifies how an appbar is anchored to the screen edge when it is docked to the top or bottom.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.HAnchor.HAnchorLeft">
            <summary>If the appbar width is less than the screen width, then the appbar is anchored to the left vertical edge of the screen.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.HAnchor.HAnchorCenter">
            <summary>If the appbar width is less than the screen width, then the appbar is horizontally centered.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.HAnchor.HAnchorRight">
            <summary>If the appbar width is less than the screen width, then the appbar is anchored to the right vertical edge of the screen.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.HAnchor.HAnchorStretch">
            <summary>The appbar occupies the entire width of the screen even if its original width is less than the screen width.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.HatchStyles">
            <summary>Specifies hatch styles for a popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.HatchStyles.Horizontal">
            <summary>Specifies a horizontal hatch.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.HatchStyles.Vertical">
            <summary>Specifies a vertical hatch.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.HatchStyles.ForwardDiagonal">
            <summary>Specifies a 45-degree downward left-to-right hatch.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.HatchStyles.Diagonal">
            <summary>Specifies a 45-degree upward left-to-right hatch.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.HatchStyles.Cross">
            <summary>Specifies a horizontal and vertical crosshatch.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.HatchStyles.DiagonalCross">
            <summary>Specifies a 45-degree crosshatch.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.Hotkey">
            <summary>Specifies the hotkey for a shortcut</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.Hotkey.None">
            <summary>0</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.Hotkey.Shift">
            <summary>The Shift Key Mask.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.Hotkey.Control">
            <summary>The Control Key Mask.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.Hotkey.Alt">
            <summary>The Alt Key Mask.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.Hotkey.Ext">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.Hotkey.KeyCodeMask">
            <summary>Specifies the mask for the key code.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.ImageDrawStyles">
            <summary>Specifies image drawing styles for a popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.ImageDrawStyles.Stretched">
            <summary>Specifies that the image should be drawn stretched.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ImageDrawStyles.Tiled">
            <summary>Specifies that the image should be drawn tiled.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ImageDrawStyles.Aligned">
            <summary>Specifies that the image should be drawn aligned.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.KeyModifiers">
            <summary>Specifies the modifiers for the hot key.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.KeyModifiers.None">
            <summary>Specifies no modifier key is pressed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.KeyModifiers.Alt">
            <summary>Specifies that the Alt key is pressed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.KeyModifiers.Control">
            <summary>Specifies that the Control key is pressed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.KeyModifiers.Shift">
            <summary>Specifies that the Shift key is pressed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.KeyModifiers.Win">
            <summary>Specifies that the 'Windows' key is pressed.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.MonthsOfTheYear">
            <summary>Specifies the months of the year.</summary>
            <remarks>The MonthsOfTheYear enumeration specifies the months of the year and is used for setting MonthsOfTheYear property of  MonthlyTrigger class and  MonthlyDOWTrigger class.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.MonthsOfTheYear.January">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MonthsOfTheYear.February">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MonthsOfTheYear.March">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MonthsOfTheYear.April">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MonthsOfTheYear.May">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MonthsOfTheYear.June">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MonthsOfTheYear.July">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MonthsOfTheYear.August">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MonthsOfTheYear.September">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MonthsOfTheYear.October">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MonthsOfTheYear.November">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MonthsOfTheYear.December">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MonthsOfTheYear.None">
            <summary>No months.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MonthsOfTheYear.All">
            <summary>All months.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.MouseKeyStates">
            <summary>Specifies the state of the mouse buttons and the Shift and Control keys.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.MouseKeyStates.LeftButton">
            <summary>Specifies that the Left mouse button is pressed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MouseKeyStates.RightButton">
            <summary>Specifies that the Right mouse button is pressed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MouseKeyStates.ShiftKey">
            <summary>Specifies that the Control key is pressed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MouseKeyStates.ControlKey">
            <summary>Specifies that the Control key is pressed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MouseKeyStates.MiddleButton">
            <summary>Specifies that the Middle mouse button is pressed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MouseKeyStates.XButton1">
            <summary>Specifies that the XButton1 mouse button is pressed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.MouseKeyStates.XButton2">
            <summary>Specifies that the XButton2 mouse button is pressed.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.PositioningStyles">
            <summary>Specifies how a popup notification is positioned.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.PositioningStyles.Auto">
            <summary>Specifies automatic positioning</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.PositioningStyles.Custom">
            <summary>Specifies automatic positioning</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.PriorityLevel">
            <summary>Specifies the priority level that the system associates with a task</summary>
            <remarks>The PriorityLevel enumeration is used in setting the  Priority property of the Task class.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.PriorityLevel.High">
            <summary>    Specifies that the process performs time-critical tasks     that must be executed immediately, such as the Task List     dialog, which must respond quickly when called by the user,     regardless of the load on the operating system. The threads of     the process preempt the threads of normal or idle priority     class processes.     CAUTION : Use extreme care when     specifying High for the process's priority class, because a     high priority class application can use nearly all available     processor time.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.PriorityLevel.Idle">
            <summary>    Specifies that the threads of this process run only when     the system is idle, such as a screen saver. The threads of the     process are preempted by the threads of any process running in     a higher priority class.     Note : The idle priority class is     inherited by child processes.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.PriorityLevel.Normal">
            <summary>Specifies that the process has no special scheduling needs.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.PriorityLevel.RealTime">
            <summary>Specifies that the process has the highest possible priority.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.ProgressBarStyle">
            <summary>Specifies the style of the progress bar of the task dialog.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ProgressBarStyle.None">
            <summary>Indicates that no progress bar should be shown.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ProgressBarStyle.Normal">
            <summary>Indicates that a normal progress bar should be shown.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ProgressBarStyle.Marquee">
            <summary>Indicates that a 'marquee' style progress bar should be shown.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.ProgressDialogAnimation">
            <summary>Specifies the animation that is displayed in the progress dialog.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ProgressDialogAnimation.None">
            <summary>Indicates that no animation should be displayed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ProgressDialogAnimation.Custom">
            <summary>Indicates that a custom animation should be displayed. Use the  SetAnimation method to specify the animation.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ProgressDialogAnimation.FileMove">
            <summary>Indicates that the 'File Move' stock animation should be displayed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ProgressDialogAnimation.FileCopy">
            <summary>Indicates that the 'File Move' stock animation should be displayed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ProgressDialogAnimation.FlyingPapers">
            <summary>Indicates that the 'Flying Papers' stock animation should be displayed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ProgressDialogAnimation.SearchGlobe">
            <summary>Indicates that the 'Search Globe' stock animation should be displayed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ProgressDialogAnimation.PermanentDelete">
            <summary>Indicates that the 'Permeant Delete' stock animation should be displayed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ProgressDialogAnimation.FromRecycleBinDelete">
            <summary>Indicates that the 'Delete From Recycle Bin' stock animation should be displayed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ProgressDialogAnimation.ToRecycleBinDelete">
            <summary>Indicates that the 'Delete to Recycle Bin' stock animation should be displayed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ProgressDialogAnimation.SearchComputer">
            <summary>Indicates that the 'Search Computer' stock animation should be displayed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ProgressDialogAnimation.SearchDocument">
            <summary>Indicates that the 'Search Document' stock animation should be displayed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ProgressDialogAnimation.SearchFlashlight">
            <summary>Indicates that the 'Search Flashlight' stock animation should be displayed.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellFileOperationFlags">
            <summary>Specifies flags used during a shell file operation.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellFileOperationFlags.None">
            <summary>No flags.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellFileOperationFlags.AllowUndo">
            <summary>Preserve undo information, if possible.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellFileOperationFlags.FilesOnly">
            <summary>Perform the operation only on files (not on folders) if a wildcard file name (*.*) is specified.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellFileOperationFlags.NoConfirmation">
            <summary>    Respond with Yes to All for any dialog box that is     displayed.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellFileOperationFlags.NoMakeDirConfirmation">
            <summary>Do not ask the user to confirm the creation of a new directory if the operation requires one to be created.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellFileOperationFlags.NoCopySecurityAttributes">
            <summary>Do not copy the security attributes of the file. The destination file receives the security attributes of its new folder.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellFileOperationFlags.NoErrorUI">
            <summary>Do not display a dialog to the user if an error occurs.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellFileOperationFlags.NoRecursion">
            <summary>Only perform the operation in the local directory. Don't operate recursively into sub directories, which is the default behavior.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellFileOperationFlags.RenameOnCollision">
            <summary>Give the file being operated on a new name in a move, copy, or rename operation if a file with the target name already exists at the destination.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellFileOperationFlags.NoProgressDialog">
            <summary>Do not display a progress dialog box.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellFileOperationFlags.SimpleProgressDialog">
            <summary>Display a progress dialog box but do not show individual file names as they are operated on.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellFileOperationFlags.DeleteConfirmation">
            <summary>Send a warning if a file is being permanently destroyed during a delete operation rather than recycled.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellLinkLoadFlags">
            <summary>Specifies settings to be used with the  ShellLink.LoadFromFile method.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellPopupAreas">
            <summary>Specifies areas in a popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellPopupAreas.OptionsButton">
            <summary>Specifies the options button.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellPopupAreas.CloseButton">
            <summary>Specifies the close button.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellPopupAreas.Link">
            <summary>Specifies the link text.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellPopupAreas.Text">
            <summary>Specifies the text.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellPopupAreas.LogoImage">
            <summary>Specifies the logo image.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellPopupAreas.BackImage">
            <summary>Specifies the back image.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellPopupAreas.Background">
            <summary>Specifies the background area not occupied by any other areas.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShellPopupAreas.Office2003Gripper">
            <summary>Specifies the logo image.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.ShowCommand">
            <summary>Specifies the window mode in which a shortcut is launched</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.ShowCommand.ShowNormal">
            <summary>Specifies that the target application should be shown normally.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShowCommand.ShowMaximized">
            <summary>Specifies that the target application should be shown maximized.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.ShowCommand.ShowMinimized">
            <summary>Specifies that the target application should be shown minimized.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.SlideStyles">
            <summary>Specifies slide styles of a popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.SlideStyles.Default">
            <summary>Specifies default slide style. When this value is used, the slide style is automatically set to one of the below styles depending on the position of the taskbar.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.SlideStyles.FromTop">
            <summary>Specifies that the popup notification slides from the top to the bottom while showing and vice-versa while closing.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.SlideStyles.FromLeft">
            <summary>Specifies that the popup notification slides from the left to the right while showing and vice-versa while closing.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.SlideStyles.FromRight">
            <summary>Specifies that the popup notification slides from the right to the left while showing and vice-versa while closing.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.SlideStyles.FromBottom">
            <summary>Specifies that the popup notification slides from the bottom to the top while showing and vice-versa while closing.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.SlideStyles.FromTopLeft">
            <summary>Specifies that the popup notification slides from the top left to the bottom right while showing and vice-versa while closing.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.SlideStyles.FromTopRight">
            <summary>Specifies that the popup notification slides from the top right to the bottom left while showing and vice-versa while closing.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.SlideStyles.FromBottomLeft">
            <summary>Specifies that the popup notification slides from the bottom to the top while showing and vice-versa while closing.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.SlideStyles.FromBottomRight">
            <summary>Specifies that the popup notification slides from the bottom to the top while showing and vice-versa while closing.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.SlideStyles.FromCenter">
            <summary>Specifies that the popup notification slides from the center outwards while showing and vice-versa while closing.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.StartupType">
            <summary>Specifies constants which indicate how the program should be run at startup.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.StartupType.LocalMachineRun">
            <summary>Indicates that the program should run for all users on the local machine everytime the machine starts up.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.StartupType.CurrentUserRun">
            <summary>Indicates that the program should run for only the current user on the local machine everytime the machine starts up.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.StartupType.LocalMachineRunOnce">
            <summary>Indicates that the program should run for all users on the local machine just for the next time the machine starts up.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.StartupType.CurrentUserRunOnce">
            <summary>Indicates that the program should run for only the current user on the local machine just for the next time the machine starts up.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogCommonButtons">
            <summary>Specifies the common buttons that should be shown in the task dialog.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogCommonButtons.None">
            <summary>Specifies that no common buttons should be shown in the task dialog.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogCommonButtons.OK">
            <summary>Specifies that the OK button should be shown in the task dialog.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogCommonButtons.Yes">
            <summary>Specifies that the Yes button should be shown in the task dialog.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogCommonButtons.No">
            <summary>Specifies that the No button should be shown in the task dialog.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogCommonButtons.Cancel">
            <summary>Specifies that the Cancel button should be shown in the task dialog.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogCommonButtons.Retry">
            <summary>Specifies that the Retry button should be shown in the task dialog.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogCommonButtons.Close">
            <summary>Specifies that the Close button should be shown in the task dialog.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogCustomButtonStyle">
            <summary>Specifies the style of the custom buttons shown in the task dialog.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogCustomButtonStyle.Normal">
            <summary>Indicates that the custom buttons should be shown as normal buttons.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogCustomButtonStyle.CommandLinkWithoutIcon">
            <summary>    Indicates that the custom buttons should be shown as     command hyperlinks.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogCustomButtonStyle.CommandLinkWithIcon">
            <summary>    Indicates that the custom buttons should be shown as     command hyperlinks with an icon shown beside them.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogExpandedTextPosition">
            <summary>Specifies the position of the expanded text in the task dialog.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogExpandedTextPosition.BelowContentText">
            <summary>Specifies that the expanded text should be shown below the content text in the task dialog.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogExpandedTextPosition.BelowFooterText">
            <summary>Specifies that the expanded text should be shown below the footer text in the task dialog.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogExpandoControlState">
            <summary>Specifies the state of the expando control of the task dialog.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogExpandoControlState.Expanded">
            <summary>Specifies that the expando control is expanded.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogExpandoControlState.Collapsed">
            <summary>Specifies that the expando control is collapsed.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogIconType">
            <summary>Specifies the icon type of the main and footer icons of the task dialog.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogIconType.Custom">
            <summary>Indicates a custom icon type. The  FooterIcon and  MainIcon properties of  TaskDialog specify the custom icon to use.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogIconType.None">
            <summary>Specifies that no icon should be shown.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogIconType.Warning">
            <summary>Specifies that the standard Warning icon should be shown.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogIconType.Error">
            <summary>Specifies that the standard Error icon should be shown.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogIconType.Information">
            <summary>Specifies that the standard Information icon should be shown.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogIconType.Shield">
            <summary>Specifies that the standard Shield icon should be shown.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskFlags">
            <summary>Specifies different flags of a task. Uses the "Flags" attribute, so these values are combined with '|'.</summary>
            <remarks>The TaskFlags enumeration is used for setting the  Flags property of Task class.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskFlags.Interactive">
            <summary>The precise meaning of this flag is elusive. The MSDN documentation describes it only for use in converting jobs from the Windows NT "AT" service to the newer Task Scheduler. No other use for the flag is documented.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskFlags.DeleteWhenDone">
            <summary>The task will be deleted when there are no more scheduled run times.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskFlags.Disabled">
            <summary>The task is disabled. Used to temporarily prevent a task from being triggered normally.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskFlags.StartOnlyIfIdle">
            <summary>The task begins only if the computer is idle at the scheduled start time. The computer is not considered idle until the  IdleWaitMinutes of task elapses with no user input.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskFlags.KillOnIdleEnd">
            <summary>The task terminates if the computer makes an idle to non-idle transition while the task is running. For information regarding idle triggers,see  OnIdle Trigger type.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskFlags.DontStartIfOnBatteries">
            <summary>The task does not start if the computer is running on battery power.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskFlags.KillIfGoingOnBatteries">
            <summary>The task ends, and the associated application quits if the computer switches to battery power.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskFlags.RunOnlyIfDocked">
            <summary>The task runs only if the system is docked. (Not mentioned in current MSDN documentation; probably obsolete.)</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskFlags.Hidden">
            <summary>This is implemented by setting the job file's hidden attribute. Testing revealed that clearing this flag doesn't clear the file attribute, so the library sets the file attribute directly. This flag is kept in sync with the task's Hidden property, so they function equivalently.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskFlags.RunIfConnectedToInternet">
            <summary>The task runs only if there is currently a valid Internet connection.Not currently implemented.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskFlags.RestartOnIdleResume">
            <summary>The task starts again if the computer makes a non-idle to idle transition before all the task's task_triggers elapse. (Use this flag in conjunction with KillOnIdleEnd.)</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskFlags.AwakenSystem">
            <summary>Wake the computer to run this task.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskFlags.RunOnlyIfLoggedOn">
            <summary>The task runs only if the user specified in SetAccountInformation() is logged on interactively. This flag has no effect on tasks set to run in the local SYSTEM account.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskStatus">
            <summary>Specifies the status values returned for a task.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskStatus.Ready">
            <summary>The task is ready to run at its next scheduled time.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskStatus.Running">
            <summary>The task is currently running.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskStatus.NotScheduled">
            <summary>One or more of the properties that are needed to run this task on a schedule have not been set.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskStatus.NeverRun">
            <summary>The task has not yet run.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskStatus.Disabled">
            <summary>The task will not run at the scheduled times because it has been disabled.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskStatus.NoMoreRuns">
            <summary>There are no more runs scheduled for this task.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskStatus.Terminated">
            <summary>The last run of the task was terminated by the user.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskStatus.NoTriggers">
            <summary>Either the task has no triggers or the existing triggers are disabled or not set.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskStatus.NoTriggerTime">
            <summary>Event triggers don't have set run times.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.TriggerType">
            <summary>Specifies the type of the Trigger.</summary>
            <remarks>The TriggerType enumeration is used for the  Type property of Trigger class.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.TriggerType.RunOnce">
            <summary>Trigger is set to run the task a single time.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TriggerType.RunDaily">
            <summary>Trigger is set to run the task on a daily interval.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TriggerType.RunWeekly">
            <summary>Trigger is set to run the work item on specific days of a specific week of a specific month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TriggerType.RunMonthly">
            <summary>Trigger is set to run the task on a specific day(s) of the month.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TriggerType.RunMonthlyDOW">
            <summary>Trigger is set to run the task on specific days, weeks, and months.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TriggerType.OnIdle">
            <summary>Trigger is set to run the task if the system remains idle for the amount of time specified by the idle wait time of the task.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TriggerType.OnSystemStart">
            <summary>Trigger is set to run the task at system startup.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TriggerType.OnLogon">
            <summary>Trigger is set to run the task when a user logs on.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.VAlignments">
            <summary>Specifies vertical alignment styles for various elements in a popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.VAlignments.Top">
            <summary>Specifies top alignment.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.VAlignments.Center">
            <summary>Specifies center alignment.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.VAlignments.Bottom">
            <summary>Specifies bottom alignment.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.VAnchor">
            <summary>Specifies how an appbar is anchored to the screen edge when it is docked to the left or right.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.VAnchor.VAnchorTop">
            <summary>If the appbar height is less than the screen height, then the appbar is anchored to the top horizontal edge of the screen.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.VAnchor.VAnchorCenter">
            <summary>If the appbar height is less than the screen height, then the appbar is vertically centered.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.VAnchor.VAnchorBottom">
            <summary>If the appbar height is less than the screen height, then the appbar is anchored to the bottom horizontal edge of the screen.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.VAnchor.VAnchorStretch">
            <summary>The appbar occupies the entire height of the screen even if its original height is less than the screen height.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.VisualStyles">
            <summary>Specifies visual styles for a popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.VisualStyles.MSN">
            <summary>Specifies MSN style appearance.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.VisualStyles.Office2003">
            <summary>Specifies Office2003 style appearance.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.WallpaperStyle">
            <summary>Defines constants which specify the style of the desktop wallpaper.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WallpaperStyle.Centered">
            <summary>Indicates that the wallpaper is centered.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WallpaperStyle.Tiled">
            <summary>Indicates that the wallpaper is tiled.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WallpaperStyle.Stretched">
            <summary>Indicates that the wallpaper is streched.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.WeeksOfTheMonth">
            <summary>Specifies weeks of the month.</summary>
            <remarks>The WeeksOfTheMonth enumeration specifies the weeks of the month and is used for setting  WeeksOfTheMonth property of  MonthlyDOWTrigger class.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.WeeksOfTheMonth.FirstWeek">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WeeksOfTheMonth.SecondWeek">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WeeksOfTheMonth.ThirdWeek">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WeeksOfTheMonth.FourthWeek">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WeeksOfTheMonth.LastWeek">
            <summary>None.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.WizardNavigationType">
            <summary>Specifies the cause of a wizard navigation (go back, go forward).</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WizardNavigationType.None">
            <summary>No navigation</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WizardNavigationType.NavigateBackUI">
            <summary>Specifies that a back navigation occurred due to a user interface action such as the clicking of a wizard button.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WizardNavigationType.NavigateBackCode">
            <summary>Specifies that a back navigation occurred via code such as a method call.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WizardNavigationType.NavigateBack">
            <summary>Specifies that a back navigation occurred - a combination of NavigateBackUI and NavigateBackCode.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WizardNavigationType.NavigateNextUI">
            <summary>Specifies that a forward navigation occurred due to a user interface action such as the clicking of a wizard button.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WizardNavigationType.NavigateNextCode">
            <summary>Specifies that a forward navigation occurred via code such as a method call.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WizardNavigationType.NavigateNext">
            <summary>Specifies that a forward navigation occurred - a combination of NavigateNextUI and NavigateNextCode.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WizardNavigationType.Other">
            <summary>Specifies that a back navigation occurred due to another undetermined reason.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.WizardPageBackTrackingStyle">
            <summary>Specifies the back tracking style of the wizard during a back navigation.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WizardPageBackTrackingStyle.StackBased">
            <summary>Specifies that back-tracking should be stack-based. The page last selected in the wizard before the current one is displayed when a back navigation occurs.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WizardPageBackTrackingStyle.Sequential">
            <summary>Specifies that the back-tracking should be sequential. That page in the collection of wizard pages which is before the currently selected page is displayed when a back navigation occurs.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.WizardPageType">
            <summary>Specifies the page type of the page.</summary>
            <remarks>The wizard enables or disables the Back, Next and Finish buttons depending on the page type. A wizard can have multiple Welcome, Inner and Finish pages.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.WizardPageType.Welcome">
            <summary>Specifies that the page is a 'Welcome' page or the first page of the wizard.</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WizardPageType.Inner">
            <summary>Specifies that the page is an inner page of the wizard</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.WizardPageType.Finish">
            <summary>Specifies that the page is a 'Finish' page or the last page of the wizard.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.ContextMenuEventArgs">
            <summary>Provides data for the ContextMenuPopup event of  ShellNotifyIcon and  ShellPopup.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ContextMenuEventArgs.Menu">
            <summary>Gets the contextmenu that is about to be displayed.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.ContextMenuItemEventArgs">
            <summary>Provides data for the ContextMenuItemSelect event of  ShellNotifyIcon and  ShellPopup.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ContextMenuItemEventArgs.CommandID">
            <summary>Gets the ID of the selected menu item.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ContextMenuItemEventArgs.CommandText">
            <summary>Gets the caption of the selected menu item.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.ControlResizeEventArgs">
            <summary>Provides data for the  ControlResize event of the Resizer class.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ControlResizeEventArgs.Control">
            <summary>Gets the control which is being resized.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ControlResizeEventArgs.NewFontSize">
            <summary>Gets/sets the new font size of the control after the resize operation.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ControlResizeEventArgs.NewHeight">
            <summary>Gets/sets the new height of the control after the resize operation.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ControlResizeEventArgs.NewLeft">
            <summary>Gets/sets the new horizontal position of the control after the resize operation.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ControlResizeEventArgs.NewTop">
            <summary>Gets/sets the new vertical position of the control after the resize operation.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ControlResizeEventArgs.NewWidth">
            <summary>Gets/sets the new width of the control after the resize operation.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ControlResizeEventArgs.ResizerSettings">
            <summary>Gets/sets the resizer settings for the control to be used during the resize operation.</summary>
            <remarks>    This property can be changed to prevent certain aspects     of the control from being resized. FOr example, to prevent the     height of the control from being resized, remove the     ControlResizeSettings.Height from this property as follows     :     e.ResizerSettings = e.ResizerSettings &amp;     (~ControlResizeSettings.Height);</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.DailyTrigger">
            <summary>Represents a trigger that fires at a specific time, after every specific interval of days.</summary>
            <remarks>Use the  StartDateTime property to specify the date and time at which the trigger fires. Use the  DaysInterval property to specify the interval in terms of the days between two successive runs of a trigger.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.DailyTrigger.#ctor">
            <summary>Initializes a new instance of the  DailyTrigger class.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.DailyTrigger.#ctor">
            <summary>Initializes a new instance of the  DailyTrigger class.</summary>
            <remarks>    This constructor initializes other properties as follows     :     DaysInterval = 1     StartDateTime = Time at which the trigger is     created.</remarks>
            <returns>A DailyTrigger object</returns>
        </member>
        <member name="M:LogicNP.ShellObjects.DailyTrigger.#ctor(System.DateTime)">
            <summary>Initializes a new instance of the  DailyTrigger class that fires every day at the specified time.</summary>
            <returns>A DailyTrigger object</returns>
            <remarks>This constructor initializes other properties as follows : DaysInterval = 1</remarks>
            <param name="runDateTime">Sets the time at which the trigger will fire.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.DailyTrigger.#ctor(System.DateTime,System.Int16)">
            <summary>Initializes a new instance of the  DailyTrigger class that fires only after the specified interval of days and at the specified time.</summary>
            <returns>A DailyTrigger object</returns>
            <remarks>None.</remarks>
            <param name="runDateTime">Sets the time at which the trigger will fire.</param>
            <param name="daysInterval">Sets the interval of days between two successive fires of the daily trigger. If the DaysInterval is set to 1, the task runs everyday.This parameter can not set to a value less than 1. If it is set less than 1, then an argumentexception is thrown.</param>
        </member>
        <member name="P:LogicNP.ShellObjects.DailyTrigger.DaysInterval">
            <summary>Gets or sets the interval in days between two successive runs of a DailyTrigger.</summary>
            <remarks>If the property is set to 1, the task runs everyday. If it is set to a value less than 1, then an exception is thrown.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.EventTrigger">
            <summary>Represents a trigger that fires when a specific event occurs.</summary>
            <remarks>    Three types of the events are specified which fire an     event trigger.     1.When the system remains idle for the amount of time     specified.     2.When the system starts up.     3.When the user logs on.     The type of the event is specified using EventType     property.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.EventTrigger.#ctor">
            <summary>Initializes a new instance of the  EventTrigger class.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.EventTrigger.#ctor">
            <summary>Initializes a new instance of the  EventTrigger class.</summary>
            <returns>A EventTrigger Object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.EventTrigger.#ctor(LogicNP.ShellObjects.EventType)">
            <summary>Initializes a new instance of the  EventTrigger class that fires when the specified event occurs.</summary>
            <returns>A EventTrigger Object</returns>
            <remarks>None.</remarks>
            <param name="eventType">The event that fires the EventTrigger.</param>
        </member>
        <member name="P:LogicNP.ShellObjects.EventTrigger.EventType">
            <summary>Gets or sets the event that fires the EventTrigger.</summary>
            <remarks>For various event types , see the documentation of the    EventType    enumeration.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.MonthlyDOWTrigger">
            <summary>Represents a trigger that fires on specific days, weeks and months.</summary>
            <remarks>Use the  StartDateTime property to specify the date and time at which the trigger fires.The days, weeks and months can be set using  DaysOfTheWeek,  WeeksOfTheMonths,  MonthsOfTheYear properties.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.MonthlyDOWTrigger.#ctor">
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.MonthlyDOWTrigger.#ctor">
            <summary>Initializes a new instance of the  MonthlyDOWTrigger class.</summary>
            <remarks>This constructor initializes the other properties as follows : WeeksOfTheMonth = First DaysOfTheWeek = Monday MonthsOfTheYear = All StartDateTime = Time at which the trigger is created.</remarks>
            <returns>A MonthlyDOWTrigger Object</returns>
        </member>
        <member name="M:LogicNP.ShellObjects.MonthlyDOWTrigger.#ctor(System.DateTime,LogicNP.ShellObjects.DaysOfTheWeek,LogicNP.ShellObjects.WeeksOfTheMonth)">
            <summary>Initializes a new instance of the  MonthlyDOWTrigger class that fires on the specified days of specified weeks for all months.</summary>
            <returns>A MonthlyDOWTrigger Object</returns>
            <remarks>This constructor initializes the other property as follows : MonthsOfTheYear = All</remarks>
            <param name="runDateTime">Sets the time at which the trigger will fire.</param>
            <param name="daysOfTheWeek">Sets the days of the week on which the trigger will fire.</param>
            <param name="whichWeeks">Sets the weeks of the month on which the trigger will fire.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.MonthlyDOWTrigger.#ctor(System.DateTime,LogicNP.ShellObjects.DaysOfTheWeek,LogicNP.ShellObjects.WeeksOfTheMonth,LogicNP.ShellObjects.MonthsOfTheYear)">
            <summary>Initializes a new instance of the  MonthlyDOWTrigger class that fires on the specified days of the specified weeks of the specified months.</summary>
            <returns>A MonthlyDOWTrigger Object</returns>
            <remarks>None.</remarks>
            <param name="runDateTime">Sets the time at which the trigger will fire.</param>
            <param name="daysOfTheWeek">Sets the days of the week on which the trigger will fire.</param>
            <param name="whichWeeks">Sets the weeks of the month on which the trigger will fire.</param>
            <param name="months">Sets the months of year on which the trigger will fire.</param>
        </member>
        <member name="P:LogicNP.ShellObjects.MonthlyDOWTrigger.DaysOfTheWeek">
            <summary>Gets or sets the days of the week on which the trigger will fire.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.MonthlyDOWTrigger.MonthsOfTheYear">
            <summary>Gets or sets the months of year on which the trigger will fire.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.MonthlyDOWTrigger.WeeksOfTheMonth">
            <summary>Gets or sets the weeks of the month on which the trigger will fire.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.MonthlyTrigger">
            <summary>Represents a trigger that fires on a specific day of the specific months.</summary>
            <remarks>Use the  StartDateTime property to specify the date and time at which the trigger fires. The days and the months can be set using the  DaysOfTheMonth and the  MonthsOfTheYear property.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.MonthlyTrigger.#ctor">
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.MonthlyTrigger.#ctor">
            <summary>Initializes a new instance of the  MonthlyTrigger class.</summary>
            <remarks>    This constructor initializes the other properties as     follows:     MonthsOfTheYear = All     DaysOfMonth = First     StartDateTime = Time at which the trigger is     created.</remarks>
            <returns>A MonthlyTrigger Object</returns>
        </member>
        <member name="M:LogicNP.ShellObjects.MonthlyTrigger.#ctor(System.DateTime,System.Int32)">
            <summary>Initializes a new instance of the  MonthlyTrigger class that fires on the specified days of all the months at the specified time.</summary>
            <returns>A MonthlyTrigger Object</returns>
            <remarks>    This constructor initializes the other property as     follows:     MonthsOfTheYear = All</remarks>
            <param name="runDateTime">Sets the time at which the trigger will fire.</param>
            <param name="daysOfMonth">Sets the days of the month on which the trigger will fire.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.MonthlyTrigger.#ctor(System.DateTime,System.Int32,LogicNP.ShellObjects.MonthsOfTheYear)">
            <summary>Initializes a new instance of the  MonthlyTrigger class that fires on the specific days of the specified months at the specified time.</summary>
            <returns>A MonthlyTrigger Object</returns>
            <remarks>None.</remarks>
            <param name="runDateTime">Sets the time at which the trigger will fire.</param>
            <param name="daysOfMonth">Sets the days of the month on which the trigger will fire.</param>
            <param name="months">Sets the months of the year on which the trigger will fire.</param>
        </member>
        <member name="P:LogicNP.ShellObjects.MonthlyTrigger.DaysOfTheMonth">
            <summary>Gets or sets the days of the months on which the trigger will fire.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.MonthlyTrigger.MonthsOfTheYear">
            <summary>Gets or sets the months of the year on which the trigger will fire.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.MouseHookEventArgs">
            <summary>Provides data for mouse events of the  SystemHook class.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.MouseHookEventArgs.Handled">
            <summary>Gets/Sets whether the mouse input is sent to the intended target application.</summary>
            <remarks>If this property is set to True, then the mouse input is not sent to the intended target application.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.NewInstanceEventArgs">
            <summary>Provides data for the  NewInstance event of the  SingleInstanceComponent class.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.NewInstanceEventArgs.AllowInstance">
            <summary>Gets/sets whether the new instance of the application should be allowed to run.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.NewInstanceEventArgs.Data">
            <summary>Gets the data that is passed by the new instance of the application to the existing instance.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.Resizer">
            <summary>The resizer component provides easy resolution-independence and automatic sizing for your forms.</summary>
            <remarks>To add automatic sizing of controls and resolution-independence to a form, simply add the Resizer component to the form. The  HostControl property gets/sets the host form whose child controls are automatically resized by Resizer. The  Enabled property can be used to enabled or disable automatic resizing of child controls. The  HostFormSettings property is used to specify whether the size and position of the host form are saved when closed and reloaded when opened and whether the form is resized when the display resolution changes.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.Resizer.#ctor">
            <summary>Initialize a new instance of the Resizer class.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.Resizer.#ctor">
            <summary>Initialize a new instance of the Resizer class.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.Resizer.#ctor(System.ComponentModel.IContainer)">
            <summary>Initialize a new instance of the Resizer class.</summary>
            <param name="container">A container for the Resizer object.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.Resizer.GetResizerSettings(System.Windows.Forms.Control)">
            <summary>Gets the resizer settings for the specified control.</summary>
            <returns>The resizer settings for the specified control.</returns>
            <param name="control">The control whose settings are to be retrieved.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.Resizer.SetResizerSettings(System.Windows.Forms.Control,LogicNP.ShellObjects.ResizerSettings)">
            <summary>Sets the resizer settings for the specified control.</summary>
            <param name="control">The control for which the resizer settings are to be saved.</param>
            <param name="resizerSettings">The new resizer settings for the control.</param>
        </member>
        <member name="P:LogicNP.ShellObjects.Resizer.CurrentFontScale">
            <summary>Gets the ratio of the current font size to the design time font size</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.Resizer.CurrentXScale">
            <summary>Gets the ratio of the current host form with to the design time host form width.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.Resizer.CurrentYScale">
            <summary>Gets the ratio of the current host form height to the design time host form height.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.Resizer.Enabled">
            <summary>Gets/sets whether automatic sizing of child controls of the host form is enabled.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.Resizer.HostControl">
            <summary>Gets/sets the host control whose child control will be automatically resized by the Resizer component.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.Resizer.HostFormSettings">
            <summary>Gets/sets whether the size and position of the host form are saved when closed and restored when opened.</summary>
            <remarks>    If this value is set to true, the size and position of     the host form are saved when closed and restored when opened.     The size and position are saved in the     Environment.SpecialFolder.APplicationData folder in the file     which is named after the type name of the host form. For     example, if the full type name (including namespace) of the     host form is MyApp.MainForm, then the file name is     "MyApp.MainForm.resizer_settings".     When this property is true, the form is also resized if     the display resolution is different from the resolution under     which the form was designed. This can happen if the display     resolution is changed or the form is opened on a machine on     which the resolution is different.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.Resizer.ControlResize">
            <summary>Occurs when a child control of the host for is about to be resized.</summary>
        </member>
        <member name="E:LogicNP.ShellObjects.Resizer.ResizeComplete">
            <summary>Occurs when all child controls of the host form are resized.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.ResizerSettings">
            <summary>Represents the resizer settings of a child control of the host form of the Resizer component.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ResizerSettings.Settings">
            <summary>Gets/sets the settings which determine how the control associated with this object is resized.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.RunOnceTrigger">
            <summary>Represents the trigger that fires only once at a specific time.</summary>
            <remarks>Use the StartDateTime property to specify the date and time at which the trigger fires.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.RunOnceTrigger.#ctor">
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.RunOnceTrigger.#ctor">
            <summary>Initializes a new instance of the  RunOnceTrigger class that fires only once.</summary>
            <returns>A RunOnceTrigger Object</returns>
            <remarks>    This constructor initializes the other property as     follows:     StartDateTime = Time at which the trigger is     created.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.RunOnceTrigger.#ctor(System.DateTime)">
            <summary>Initializes a new instance of the  RunOnceTrigger class that fires once at a specified time. Remarks</summary>
            <returns>A RunOnceTrigger Object</returns>
            <remarks>None.</remarks>
            <param name="runDateTime">Sets the time at which the trigger will fire.</param>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellAppBar">
            <summary>The ShellAppBar components converts a form into an application desktop toolbar similar to Quick Launch</summary>
            <remarks>    ShellAppBar allows you to easily and     quickly convert your forms into application desktop toolbars     similar to Quick Launch, with complete     animated AutoHide functionality and     drag-drop docking to screen edges.     To convert the form to an application desktop toolbar,     simply add the ShellAppBar component to your     form. When the form is loaded it will be docked to a screen     edge specified by the          DockingEdge property. The          AutoHide property specifies whether the appbar is     auto-hidden when not in use. The          AllowResize property specifies whether the appbar can be     resized by the user. The          AllowedDragDockingEdges to specify whether the appbar can     be docked to different screen edges by dragging it around. Set     this property to None to prevent     drag-docking.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellAppBar.#ctor">
            <summary>Initializes new instance of  ShellAppBar classInitializes new instance of ShellAppBar class Initializes new instance of  ShellAppBar class</summary>
            <returns>ShellAppBar A container for ShellAppBar</returns>
            <remarks>None. None. None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellAppBar.#ctor(System.ComponentModel.IContainer)">
            <summary>Initializes new instance of  ShellAppBar class</summary>
            <returns>ShellAppBar</returns>
            <remarks>None.</remarks>
            <param name="container">A container for ShellAppBar</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellAppBar.SetDockingEdgeAndScreen(LogicNP.ShellObjects.DockingEdges,System.Windows.Forms.Screen)">
            <summary>Docks the appbar to the specified screen and edge.</summary>
            <remarks>Use this method to set/change both the docking edge and screen of the appbar. To dock to a different edge on the same screen, use the  DockingEdge property.</remarks>
            <param name="edge">             The edge to which the appbar should be docked.     </param>
            <param name="screen">             The screen(monitor) to which the appbar should be         docked.     </param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellAppBar.SetHostForm(System.IntPtr)">
            <summary>Associates the ShellAppBar component with the specified window and converts the window into an appbar.</summary>
            <remarks>    Normally, the ShellAppBar component is used on a form     derived from the class System.Windows.Forms. However, using     this method, ShellAppbar can also be used to convert other     controls or non-Windows-Forms windows into appbars.     To de-associate the window from the ShellAppBar     component, call this method passing a 'null' value as the     parameter.</remarks>
            <param name="nNewValue">The handle of the window which is to be converted into an appbar.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellAppBar.StartDragDock">
            <summary>Starts a drag-dock operation of the appbar.</summary>
            <remarks>This method can be used to explicitly start a drag-dock operation. Normally a drag-dock operation is automatically started by ShellAppBar when the user starts dragging the appbar by clicking on an empty area of the appbar. However, an empty area might not be available if the entire appbar is occupied by child controls. In that case, you can catch "mouse-down" events on child controls and initiate drag-dock using this method.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellAppBar.AllowedDragDockingEdges">
            <summary>Gets/Sets the edges to which the appbar can be docked.</summary>
            <remarks>To prevent drag-docking, set this property to DragDockingEdges.None. Otherwise, drag-docking is allowed only to those edges with are specified in this property. UnDocking is allowed if this property contains the DragDockingEdges.UnDocked flag. To allow docking to all edges as well as undocking, set this property to DragDockingEdges.All.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellAppBar.AllowResize">
            <summary>Gets/Sets whether the application desktop toolbar can be resized by the user when docked.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellAppBar.AlwaysOnTop">
            <summary>Gets/Sets whether the application desktop toolbar will always remain on top of all other windows</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellAppBar.AutoHide">
            <summary>Gets/Sets whether the application desktop toolbar should be auto-hidden.</summary>
            <remarks>    Even if this property is set to True,     there is no guarantee that autohide functionality will be     active for the appbar because only one autohide appbar can     present at a given screen edge. You can query whether autohide     functionality is active using the          IsAutoHidden property.     For example, if the          DockingEdge property is set to Top and the     AutoHide property is set to True, but if     another auto-hidden appbar is already present at the top edge     of the screen then auohide functionality will not be active. In     this case, the appbar will become a normal docked appbar. If     the          DockingEdge property is subsequently changed to another     edge where another autohide appbar is not already present,     autohide functionality is activated for the appbar.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellAppBar.AutoHideAppBarState">
            <summary>Gets/Sets whether the application desktop toolbar is hidden or visible in AutoHide mode.</summary>
            <remarks>    The value of this property is only valid if autohide     functionality is active for the appbar     (     IsAutoHidden property returns     True).     You can show or hide an autohide appbar by changing this     property.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellAppBar.AutoHidePinned">
            <summary>Gets/Sets whether an auto-hidden appbar is pinned to be always visible.</summary>
            <remarks>If this property is set to true, then an auto-hidden appbar does not auto-hide and remains visible even if the mouse pointer moves away from over it. This property can be used to temporarily keep an auto-hidden visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellAppBar.AutoHideShowDelay">
            <summary>Gets/sets the time delay (in milliseconds) after which a auto-hidden appbar is displayed.</summary>
            <remarks>When the mouse moves over the thin edge of an auto-hidden appbar, the appbar is displayed after a short delay. This property can be used to control this delay.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellAppBar.DockingEdge">
            <summary>Gets/Sets the screen edge to which the application desktop toolbar is docked.</summary>
            <remarks>To undock the appbar, set this property to DockingEdges.UnDocked.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellAppBar.DockingScreen">
            <summary>Gets/sets the screen(monitor) to which the appbar is docked.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellAppBar.HAnchor">
            <summary>Gets/Sets the horizontal anchor setting of the appbar when it is docked to the left or right edge of the screen.</summary>
            <remarks>By default, when docked to the top or bottom edge of the screen, the appbar is stretched along its width so that it fills the entire width of the screen. Using this property, this behavior can be changed so that the appbar anchors to the right side or the left side or the center of the screen.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellAppBar.HideAnimTime">
            <summary>Gets/Sets the time (in milliseconds) used for the visible to invisible transition animation of an auto-hidden appbar.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellAppBar.HostForm">
            <summary>Gets/Sets the form which will be converted by ShellAppBar into an application desktop toolbar</summary>
            <remarks>    When ShellAppBar is used at design-time,     the value of the property is automatically set to the form     which hosts the ShellAppBar component.     If ShellAppBar is created dynamically at     runtime, this property must be explicitly set to the desired     form which is to be converted into an appbar (as shown in the     example above).</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellAppBar.IsAutoHidden">
            <summary>Gets whether the application desktop toolbar is operating in 'AutoHide' mode</summary>
            <remarks>    Even if the          AutoHide property is set to True, there is     no guarantee that autohide functionality will be active for the     appbar because only one autohide appbar can present to a given     screen edge. You can query whether autohide functionality is     active for the appbar using this property.     For example, if the          DockingEdge property is set to Top and the          AutoHide property is set to True and if     another auto-hidden appbar is already present at the top edge     of the screen then auohide functionality will not be active. In     this case, the appbar will become a normal docked appbar. If     the          DockingEdge property is subsequently changed to another     edge where another autohide appbar is not already present,     autohide functionality is activated for the appbar.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellAppBar.ShowAnimTime">
            <summary>Gets/Sets the time (in milliseconds) used for the invisible to visible transition animation of an auto-hidden appbar.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellAppBar.VAnchor">
            <summary>Gets/Sets the vertical anchor setting of the appbar when it is docked to the top or bottom edge of the screen.</summary>
            <remarks>By default, when docked to the left or right edge of the screen, the appbar is stretched along its height so that it fills the entire height of the screen. Using this property, this behavior can be changed so that the appbar anchors to the top side or the bottom side or the center of the screen.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellAppBar.AutoHideAppBarStateChanged">
            <summary>Occurs when an auto-hidden appbar changes state from visible to hidden and vice-versa.</summary>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellAppBar.DockingEdgeChanged">
            <summary>Occurs when the appbar to docked to another edge of the screen.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellContextMenu">
            <summary>Represents a node context menu</summary>
            <remarks>The ShellContextMenu class is used with     ShellPopupNotification and  ShellNotifyIcon controls. It represents the context menu that will be displayed to the user. An instance of a ShellContextMenu object is passed as a parameter to the ContextMenuPopup event of the  ShellPopupNotification and  ShellNotifyIcon controls. You can use this instance to modify the context menu that will be displayed to the user.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellContextMenu.AddItem(System.String)">
            <summary>Adds a new menuitem at the end of the contextmenu</summary>
            <returns>ShellMenuItem</returns>
            <remarks>None.</remarks>
            <param name="caption">The caption of the new menuitem to be added.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellContextMenu.Clear">
            <summary>Removes all menuitems from the contextmenu</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellContextMenu.FindItem(System.String)">
            <summary>Returns the first menuitem whose caption contains the specified search string</summary>
            <returns>ShellMenuItem</returns>
            <remarks>This method returns the first menuitem whose caption contains the specified search string. The search is case-insensitive. Before the caption of each menuitem is searched, all ampersand characters are removed from it.</remarks>
            <param name="caption">The caption of the search menu item.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellContextMenu.Getitem(System.Int32)">
            <summary>Returns the menuitem at the specified index in the contextmenu</summary>
            <returns>ShellMenuItem</returns>
            <remarks>If the index is out of range, a NULL value is returned.</remarks>
            <param name="index">The index of the menu item.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellContextMenu.InsertItem(System.String,System.Int32)">
            <summary>Inserts a new menuitem in the contextmenu at the specified index</summary>
            <returns>ShellMenuItem</returns>
            <remarks>This method returns the newly added menuitem. If the index is out of range, a NULL value is returned.</remarks>
            <param name="caption">The caption of the new menu item.</param>
            <param name="index">The index at which to insert the new menu item.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellContextMenu.RemoveItem(System.Int32)">
            <summary>Removes the menuitem at the specified index from the contextmenu</summary>
            <remarks>If the index is out of range then the function fails.</remarks>
            <returns>None.</returns>
            <param name="index">The index of the menu item.</param>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellContextMenu.ItemCount">
            <summary>Gets the number of menuitems in the contextmenu</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellContextMenu.Parent">
            <summary>Gets the parent contextmenu of this contextmenu</summary>
            <remarks>Use this method to access the parent contextmenu of this contextmenu. If the contextmenu does not have a parent, then a NULL value is returned.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellFileOperation">
            <summary>ShellFileOperation allows you to perform common operations such as Copy/Move/Rename and Delete on multiple files/folders with full sub-directory support and progress dialogs.</summary>
            <remarks>    Use the          SourceFiles and          DestinationFiles properties to fill the source and     destination files/folders. Then use the DoMove, DoCopy,     DoRename or DoDelete methods to perform the respective actions     on them.     The          Flags property specifies various settings for the operation     such as whether a progress dialog is to be shown. The          AreAnyOperationsAborted and          ErrorCode properties are used to determine the success     status of the operation.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellFileOperation.Copy">
            <summary>Performs a copy operation.</summary>
            <remarks>    You can copy multiple files/folders at once by adding     them to          SourceFiles. You can also copy each file/folder to its own     separate file/folder by adding the destinations to          DestinationFiles.     In case of failure, the          ErrorCode property can be used to determine the type of     error that occurred. The          AreAnyOperationsAborted property can be sued to determine     if any operations were aborted before they were     completed.</remarks>
            <returns>True, if the operation was successful; False otherwise.</returns>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellFileOperation.Delete">
            <returns>True, if the operation was successful; False otherwise.</returns>
            <remarks>    You can copy multiple files/folders at once by adding     them to          SourceFiles. The          DestinationFiles collection is not used.     In case of failure, the          ErrorCode property can be used to determine the type of     error that occurred. The          AreAnyOperationsAborted property can be sued to determine     if any operations were aborted before they were     completed.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellFileOperation.Move">
            <returns>True, if the operation was successful; False otherwise.</returns>
            <remarks>    You can move multiple files/folders at once by adding     them to          SourceFiles. You can also move each file/folder to its own     separate file/folder by adding the destinations to          DestinationFiles.     In case of failure, the          ErrorCode property can be used to determine the type of     error that occurred. The          AreAnyOperationsAborted property can be sued to determine     if any operations were aborted before they were     completed.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellFileOperation.Rename">
            <returns>True, if the operation was successful; False otherwise.</returns>
            <remarks>    You can only rename a single files/folder at one time.     The          DestinationFiles collection is not used.     In case of failure, the          ErrorCode property can be used to determine the type of     error that occurred. The          AreAnyOperationsAborted property can be sued to determine     if any operations were aborted before they were     completed.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellFileOperation.AreAnyOperationsAborted">
            <summary>Gets whether any operations were aborted before they were completed.</summary>
            <remarks>The Copy, Delete, Move and Rename functions can return true even if the user cancels the operation. Therefore, this property should be also checked to determine the exact status of the operation.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellFileOperation.AutoClearFilesAfterOperation">
            <summary>Gets/sets whether the SourceFiles and DestinationFiles collections are cleared automatically after an operation is performed.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellFileOperation.DestinationFiles">
            <summary>Gets the collection of destination files/folders for the operation.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellFileOperation.ErrorCode">
            <summary>Gets the error code which determines the status of the operation.</summary>
            <remarks>This property should be queried only if the Copy, Move, Rename and Delete methods return false.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellFileOperation.Flags">
            <summary>Gets/Sets the settings used for the file operation.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellFileOperation.HwndUIParent">
            <summary>Gets/Sets the handle to the window which should be used as a parent for any error/information messages that are displayed during the operation.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellFileOperation.ProgressDialogText">
            <summary>Gets/sets the text shown in the progress dialog which is displayed when the operation is performed.</summary>
            <remarks>This property only takes effect if the Flags property includes the  ShellFileOperationFLags.SimpleProgressDialog flag.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellFileOperation.SourceFiles">
            <summary>Gets the collection of source files/folders for the operation.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellLink">
            <summary>The ShellLink Control loads information from and saves information to shell links, also known as shortcut(*.lnk) files.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellLink.#ctor">
            <summary>Initializes new instance of ShellLink class.Initializes new instance of ShellLink class.</summary>
            <remarks>None.None.</remarks>
            <returns>A ShellLink object</returns>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellLink.#ctor(System.ComponentModel.IContainer)">
            <summary>Initializes new instance of ShellLink class.</summary>
            <returns>A ShellLink object</returns>
            <remarks>None.</remarks>
            <param name="container">The container for the ShellLink.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellLink.Clear">
            <summary>Clears all information about a previously loaded or saved shortcut.</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellLink.LoadFromFile">
            <summary>Loads information from a shortcut (*.lnk) file.</summary>
            <returns>Boolean</returns>
            <remarks>This method loads information from the specified shortcut file. The information can then be accessed using the various properties of the control.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellLink.SaveToFile(System.String)">
            <summary>Saves currently set information to a shortcut (*.lnk) file.</summary>
            <returns>Boolean</returns>
            <remarks>    The function creates a new shortcut file at the specified     file path using the currently set information. Please note that     the path should include the filename of the shortcut file     include its .lnk extension ( e.g. : "c:\shortcut to photos.lnk"     ).     The function returns True if the function succeeds or     False otherwise.</remarks>
            <param name="lnkPath">The path where the shortcut should be saved.</param>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellLink.Arguments">
            <summary>Gets or sets the command-line arguments associated with the shell link.</summary>
            <remarks>The length of the string should not be greater than 260 characters on Win98/WinMe and 1024 characters for Win2000/WinXP/Win2003.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellLink.Description">
            <summary>Gets or sets the description for the shell link.</summary>
            <remarks>The length of the string should not be greater than 260 characters on Win98/WinMe and 1024 characters for Win2000/WinXP/Win2003.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellLink.Hotkey">
            <summary>Gets or sets the hot key for the shell link.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellLink.IconFile">
            <summary>Gets or sets the path of the icon for the shell link.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellLink.IconIndex">
            <summary>Gets or sets the index of the icon in the icon file for the shell link.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellLink.PIDL">
            <summary>Gets or sets the fully qualified shell item identifier list for the target of the shell link.</summary>
            <remarks>When you retrieve the property, it is your responsibility to free the memory occupied by the PIDL using the shell's memory allocator ( IMalloc ). When you set the property, a copy of the PIDL is made and you can continue using the PIDL for your own purposes.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellLink.ShowCommand">
            <summary>Gets or sets the show command for the shell link.</summary>
            <remarks>The show command specifies the initial show state of the window of the target application.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellLink.TargetPath">
            <summary>Gets or sets the full path of the target of the shell link.</summary>
            <remarks>If the shelllink points to a non-filesystem folder, this property returns an empty string. In this case, you can use the  PIDL property to get the fully qualified PIDL of the target.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellLink.WorkingDirectory">
            <summary>Gets or sets the working directory for the shell link.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellMenuItem">
            <summary>Represents a menu item in a context menu.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellMenuItem.BarBreak">
            <summary>Gets or sets a value indicating whether the menuitem is placed on a new line or in a new column</summary>
            <remarks>If this property is set to True, the menu item is placed in a new column; else menu item remains in its default placement in a new line. The default is False .</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellMenuItem.Break">
            <summary>Gets or sets a value indicating whether the menuitem is placed on a new line or in a new column</summary>
            <remarks>If this property is set to True, the menu item is placed in a new column; else menu item remains in its default placement in a new line. The default is False .</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellMenuItem.Caption">
            <summary>Gets or sets a value indicating the caption of the menu item</summary>
            <remarks>When you specify a caption for your menu item with the text parameter, you can also specify an access key by placing an '&amp;' before the character to be used as the access key. For example, to specify the "F" in "File" as an access key, you would specify the caption for the menu item as "&amp;File". You can use this feature to provide keyboard navigation for your menus.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellMenuItem.Checked">
            <summary>Gets or sets a value indicating whether a check mark appears next to the text of the menu item</summary>
            <remarks>You can use the Checked property in combination with other menu items in a menu to provide state for an application. For example, you can place a check mark on a menu item in a group of items to identify the size of the font to be displayed for the text in an application. You can also use the Checked property to identify the selected menu item in a group of mutually exclusive menu items.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellMenuItem.DefaultItem">
            <summary>Gets or sets a value indicating whether the menu item is the default menu item</summary>
            <remarks>The default menu item for a menu is boldfaced. When the user double-clicks a submenu that contains a default item, the default item is selected, and the submenu is closed. You can use the DefaultItem property to indicate, the default action that is expected in a menu or shortcut menu.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellMenuItem.Enabled">
            <summary>Gets or sets a value indicating whether the menu item is enabled</summary>
            <remarks>A menuItem that is disabled is displayed in a gray color to indicate its state. When a parent menu item is disabled, all submenu items are not displayed.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellMenuItem.HasSubMenu">
            <summary>Gets or sets a value indicating whether the menu item has a submenu</summary>
            <remarks>When this property is set to True , the SubMenu property returns the submenu associated with the menu item. If this property is set to False , the SubMenu property of the menu item returns NULL.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellMenuItem.ID">
            <summary>Gets the Windows identifier for this menu item</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellMenuItem.Index">
            <summary>Gets or sets a value indicating the position of the menu item in its parent menu</summary>
            <remarks>This property provides the indexed position of a menu item in the menu item collection of its parent menu. You can use this property to reposition a menu item to a different location within its menu.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellMenuItem.Parent">
            <summary>Gets the menu that contains this menu item</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellMenuItem.RadioChecked">
            <summary>Gets or sets a value indicating whether the menu item, if checked, displays a radio-button instead of a check mark</summary>
            <remarks>Check marks do not necessarily imply a mutually exclusive state for a group of menu items. You can use this property to indicate to the user that the check mark of a menu item is mutually exclusive.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellMenuItem.Separator">
            <summary>Gets or sets a value indicating whether the menu item is a separator</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellMenuItem.SubMenu">
            <summary>Gets the submenu, if any, associated with the menu item</summary>
            <remarks>If the  HasSubMenu property is True , then this property returns a valid ShellContextMenu representing the submenu for this menu item, else this property returns NULL.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellNotifyIcon">
            <summary>The ShellNotifyIcon Control allows you to add a icon in the system tray.</summary>
            <remarks>    The ShellNotifyIcon Control allows you     to add a icon in the system tray.     Each ShellNotifyIcon has an imagelist     which can be accessed using the          ImageList property. Images can be added to this imagelist     at runtime or at designtime. To add images at designtime,     right-click on the ShellNotifyIcon object in the Form designer     and select the "Edit ImageList..." menu item.     If the          Animate property is True, icons from this     imagelist are used for the animation. If the          Animate property is False, then the          ImageIndex property can be used to display different icons     at different times.     The icon in the system tray can be shown or hidden using     the          Visible property. A balloon style infotip can displayed     when the icon is first added to the system tray if the          BalloonStyle property is True.     A context menu can be displayed when the user clicks or     right-clicks on the system tray icon by calling the          InvokeContextMenu method in the event handler.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellNotifyIcon.#ctor">
            <summary>Initializes new instance of  ShellNotifyIcon class.Initializes new instance of class.Initializes new instance of  ShellNotifyIcon class.</summary>
            <returns>A objectA ShellNotifyIcon object</returns>
            <remarks>None.None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellNotifyIcon.#ctor(System.ComponentModel.IContainer)">
            <summary>Initializes new instance of  ShellNotifyIcon class.</summary>
            <returns>A ShellNotifyIcon object</returns>
            <remarks>None.</remarks>
            <param name="container">The container for ShellNotifyIcon</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellNotifyIcon.InvokeContextMenu">
            <summary>Displays a context menu.</summary>
            <returns>None.</returns>
            <remarks>This method is used to display a contextmenu in response to one of the mouse events like  MouseDown. Calling this method raises the  ContextMenuPopup event which is used to populate the contextmenu. If a menu item is selected, the  ContextMenuItemSelect event is raised.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellNotifyIcon.MaximizeFromTray(System.Windows.Forms.Form,LogicNP.ShellObjects.FormAnimStyles)">
            <summary>Reinserts the specified form to the taskbar and makes it visible, optionally with animation</summary>
            <returns>None.</returns>
            <remarks>Use this method with the  MinimizeToTray method.</remarks>
            <param name="form">The form which is to be maximized.</param>
            <param name="formAnimStyle">The animation style to be used.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellNotifyIcon.MinimizeToTray(System.Windows.Forms.Form,LogicNP.ShellObjects.FormAnimStyles)">
            <summary>Removes the specified form from the taskbar and hides it, optionally with animation</summary>
            <returns>None.</returns>
            <remarks>Use this method with the  MaximizeFromTray method.</remarks>
            <param name="form">The form to be minimized</param>
            <param name="formAnimStyle">The animation style to be used.</param>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellNotifyIcon.Animate">
            <summary>Gets or sets whether animation is used for the tray icon.</summary>
            <remarks>When this property is True, then the images in the imagelist are used to display an animation. Use the  AnimDelay,  AnimRepeatCount and  AnimInterval properties to control the animation.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellNotifyIcon.AnimDelay">
            <summary>Gets or sets the time duration between successive icons when animation is turned on.</summary>
            <remarks>This property only takes effect if the Animate property is True.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellNotifyIcon.AnimInterval">
            <summary>Gets or sets the time duration between successive runs of animations of the tray icon.</summary>
            <remarks>This property only takes effect if the  Animate property is True.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellNotifyIcon.AnimRepeatCount">
            <summary>Gets or sets the number of times that the animation is repeated.</summary>
            <remarks>    Set this property to 0 to repeat the animation     forever.     This property only takes effect if the          Animate property is True.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellNotifyIcon.BalloonStyle">
            <summary>Gets or sets whether the tray icon is shown using the balloon style.</summary>
            <remarks>    Setting this property to True causes a     balloon infotip to be displayed when the icon is first put in     the system tray. You can control the content and behavior of     this balloon using the          BalloonText,          BalloonTitle and          BalloonTimeout properties.     This property only takes effect on Windows 2000 or later     operating systems.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellNotifyIcon.BalloonText">
            <summary>Gets or sets the text shown in the balloon.</summary>
            <remarks>This property only takes effect if the  BalloonStyle property is True.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellNotifyIcon.BalloonTimeout">
            <summary>Gets or sets the time duration for which the balloon associated with the tray icon is displayed.</summary>
            <remarks>This property only takes effect if the  BalloonStyle property is True.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellNotifyIcon.BalloonTitle">
            <summary>Gets or sets the title text of the balloon associated with the tray icon.</summary>
            <remarks>This property only takes effect if the  BalloonStyle property is True.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellNotifyIcon.ImageIndex">
            <summary>Gets or sets the index of the icon which will showed in the system tray.</summary>
            <remarks>This property can be used to display different icons from the imagelist at different times to indicate different states of your application. This property only takes effect of the  Animate property is False.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellNotifyIcon.ImageList">
            <summary>Gets the imagelist of icons associated with the tray icon.</summary>
            <remarks>If the  Animate property is True, then the images in the imagelist are used to perform the animation. If the  Animate property is False, then the  ImageIndex property can be used to display different icons at different times.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellNotifyIcon.Tooltip">
            <summary>Gets or sets the tool tip displayed for the system tray icon.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellNotifyIcon.Visible">
            <summary>Gets or sets whether the icon is shown in the system tray.</summary>
            <remarks>This property can be used to show or hide the icon from the system tray.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellNotifyIcon.BalloonHide">
            <summary>Occurs after the balloon associated with the tray icon is hidden because the tray icon is removed from the system tray.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellNotifyIcon.BalloonHideTimeout">
            <summary>Occurs after the balloon associated with the tray icon is hidden because of a timeout.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellNotifyIcon.BalloonShow">
            <summary>Occurs after the balloon associated with the tray icon is displayed.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellNotifyIcon.BalloonUserClick">
            <summary>Occurs after the balloon associated with the tray icon is hidden because of a mouse click within its area.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellNotifyIcon.Click">
            <summary>Occurs when the mouse is clicked over the tray icon.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellNotifyIcon.ContextMenuItemSelect">
            <summary>Occurs after a context menu item is selected.</summary>
            <remarks>This event occurs if the user selects a menu item from the context that was displayed in response to the calling of the  InvokeContextMenu method.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellNotifyIcon.ContextMenuPopup">
            <summary>Occurs before a context menu is displayed in response to calling the InvokeContextMenu method.</summary>
            <remarks>The context menu is initially empty. You can use this event to modify the context menu that will be displayed to the user. If a user selects some menu item, the  ContextMenuItemSelect event is raised.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellNotifyIcon.DoubleClick">
            <summary>Occurs when the mouse is double-clicked over the tray icon.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellNotifyIcon.MouseDown">
            <summary>Occurs when a mouse button is pressed down over the tray icon.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellNotifyIcon.MouseMove">
            <summary>Occurs when the mouse moves over the tray icon.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellNotifyIcon.MouseUp">
            <summary>Occurs when a mouse button is released over the tray icon.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellPopup">
            <summary>The ShellPopup object represents a single popup notification.</summary>
            <remarks>    The ShellPopup object represents a     single popup notification. Shell popup notifications are     created and displayed by the          ShellPopupNotification control using the          ShowPopup or          CreatePopup methods. Multiple popup notifications can be     displayed at the same time. If the          PositioningStyle is PSAuto, then they are     automatically arranged so that they do not overlap each other.     The          AutoPositioningDirection property can used to control how     multiple popups are arranged. They can also be shown at     specific positions by setting the          PositioningStyle property to     PSCustom.     Each popup notification can display a logo image, a     background image, a close button, an options button, a text, a     link and a gripper bar. The          VisualStyle property can be used to display popup     notifications in either Office2003 or     MSN style. Various appearance properties can     be used to customize the visual appearance.     When the ShellPopup object is first     created is inherits all appearance and behavior related     properties from the          ShellPopupNotification control. After it is created, but     before it is displayed, any of its properties can be changed.     When showing or closing, the popup notifications can used     slide, fade or a combination of both animations as specified by     the          AnimationStyle property. The animation duration is     specified by the          AnimTime property.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellPopup.#ctor">
            <summary>Initializes new instance of  ShellPopup class.</summary>
            <returns>A ShellPopup object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellPopup.Close">
            <summary>Closes the popup notification.</summary>
            <returns>None.</returns>
            <remarks>The popup notification is closed using the animation style specified by the  AnimationStyle property.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellPopup.HitTest(System.Int32,System.Int32)">
            <summary>Returns the area of the popup notification under the specified coordinates.</summary>
            <remarks>See  ShellPopupAreas for the various areas of a shell popup notification.</remarks>
            <returns> ShellPopupAreas</returns>
            <param name="x">The x-coordinate for hittesting.</param>
            <param name="y">The y-coordinate for hittesting.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellPopup.InvokeContextMenu">
            <summary>Displays a context menu.</summary>
            <returns>None.</returns>
            <remarks>This method is used to display a contextmenu in response to the  OptionsButtonClick event. Calling this method raises the  ContextMenuPopup event which is used to populate the contextmenu. If a menu item is selected, the  ContextMenuItemSelect event is raised.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellPopup.SetAreaCursor(LogicNP.ShellObjects.ShellPopupAreas,System.Windows.Forms.Cursor)">
            <summary>Specifies a cursor for an area (such as the link) of the popup notification.</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
            <param name="area">The area of the shell popup notification.</param>
            <param name="c">The cursor for the specified area.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellPopup.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the screen position of the popup notification.</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
            <param name="left">The x coordinate of the top-left corner of the popup notification</param>
            <param name="top">The y coordinate of the top-left corner of the popup notification</param>
            <param name="width">The width of the popup notification.</param>
            <param name="height">The height of the popup notification.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellPopup.Show">
            <summary>Shows the ShellPopup.</summary>
            <returns>None.</returns>
            <remarks>The  BeforePopup event is raised before the popup notification is showed.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.ActiveShowTime">
            <summary>Gets or sets the time duration that the popup notification is shown before it is automatically hidden.</summary>
            <remarks>Set this property to 0(zero) to show the popup notification indefinitely.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.AllowDrag">
            <summary>Gets or sets whether the popup notification can be dragged.</summary>
            <remarks>This property determines whether popup notifications can dragged by the gripper bar in the Office2003 display mode.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.AnimationStyle">
            <summary>Gets or sets the animation style used to show the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.AnimTime">
            <summary>Gets or sets the time duration of the animation used for the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.BackColor">
            <summary>Gets or sets the back color of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.BackColor2">
            <summary>Gets or sets the second back color of the popup notification, used when gradient or hatch fill styles are specified.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.BackFillStyle">
            <summary>Gets or sets the background fill style of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.BackGradientMode">
            <summary>Gets or sets the gradient style of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.BackHatchStyle">
            <summary>Gets or sets the hatch style of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.BackImage">
            <summary>Gets or sets the background image of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.BackImageHAlign">
            <summary>Gets or sets the horizontal alignment of the background image of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.BackImageIsTransparent">
            <summary>Gets or sets whether the background image of the popup notification is drawn transparently.</summary>
            <remarks>If this property is True, the  BackImageTransparentColor property specifies the color in the back image to use as the transparent color.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.BackImageTransparentColor">
            <summary>Gets or sets the transparent color used to draw the background image of the popup notification.</summary>
            <remarks>This property only takes effect if the  BackImageIsTransparent property is True. In this case, the part of the backimage which is of the transparent color is not drawn .</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.BackImageVAlign">
            <summary>Gets or sets the vertical alignment of the background image of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.BorderColor">
            <summary>Gets or sets the border color of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.BorderColor3D">
            <summary>Gets or sets the second border color of the popup notification, used when a 3D border style is specified.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.BorderStyle">
            <summary>Gets or sets the border style of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.GripperColor">
            <summary>Gets or sets the gripper color of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.GripperColor2">
            <summary>Gets or sets the second gripper color of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.GripperGradientMode">
            <summary>Gets or sets the gradient style used for the gripper of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.Height">
            <summary>Gets or sets the height of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.Left">
            <summary>Gets or sets the left position of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.LinkColor">
            <summary>Gets or sets the color of the link of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.LinkColorHot">
            <summary>Gets or sets the color of the hot-state link of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.LinkFontName">
            <summary>Gets or sets the font name of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.LinkFontSize">
            <summary>Gets or sets the font size of the link of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.LinkFontStyle">
            <summary>Gets or sets the font style of the link of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.LinkFontStyleHot">
            <summary>Gets or sets the font style of the hot-state link of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.LinkHAlign">
            <summary>Gets or sets the horizontal alignment of the link of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.LinkString">
            <summary>Gets or sets the link text shown in the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.LinkVAlign">
            <summary>Gets or sets the vertical alignment of the link of the popup notification.</summary>
            <remarks>If the  VisualStyle is Office2003, then this property is ignored and the link is always drawn to the right of the logo image and at the top of the shell popup notification.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.LogoImage">
            <summary>Gets or sets the logo image of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.LogoImageHAlign">
            <summary>Gets or sets the horizontal alignment of the logo image of the popup notification.</summary>
            <remarks>If the  VisualStyle is Office2003, then this property is ignored and the logo image is always drawn at the top-left corner.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.LogoImageIsTransparent">
            <summary>Gets or sets whether the logo image of the popup notification is drawn transparently.</summary>
            <remarks>If this property is True, then the  LogoImageTransparentColor property determines the color that is used as the transparent color.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.LogoImageTransparentColor">
            <summary>Gets or sets the transparent color of the logo image of the popup notification.</summary>
            <remarks>This property takes effect only if the  LogoImageIsTransparent is True.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.LogoImageVAlign">
            <summary>Gets or sets the vertical alignment of the logo image of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.MaxOpacity">
            <summary>Gets or sets the maximum opacity of the popup notification when they are fully shown.</summary>
            <remarks>This value can range from 0 to 255, with 0 representing full transparency and 255 representing full opacity.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.ShowCloseButton">
            <summary>Gets or sets whether the close button is shown in the popup notification.</summary>
            <remarks>When the close button is clicked, the  BeforeClose event is raised and the popup notification is closed.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.ShowOptionsButton">
            <summary>Gets or sets whether the options button is shown in the popup notification.</summary>
            <remarks>When the options button is clicked the  OptionsButtonClick event is raised. A context menu can be displayed in the event handler by calling the  InvokeContextMenu method. This causes the  ContextMenuPopup event to be raised which can be used to populate the contextmenu.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.SlideStyle">
            <summary>Gets or sets the slide style used for animating the popup notification.</summary>
            <remarks>This property has effect only if the  AnimationStyle property is set to ASSlide.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.SoundFile">
            <summary>Gets/Sets the sound which is played when the popup notification is shown.</summary>
            <remarks>The property value can specify a full path to a wave audio file or the name of a system sound such as "SystemAsterisk" or "SystemExclamation".</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.TextColor">
            <summary>Gets or sets the text color of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.TextColorHot">
            <summary>Gets or sets the hot-state text color of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.TextFontName">
            <summary>Gets or sets the font name of the text of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.TextFontSize">
            <summary>Gets or sets the font size of the text of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.TextFontStyle">
            <summary>Gets or sets the font style of the text of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.TextFontStyleHot">
            <summary>Gets or sets the font style of the hot-state text of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.TextHAlign">
            <summary>Gets or sets the horizontal alignment of the text of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.TextString">
            <summary>Gets or sets the text shown in the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.TextVAlign">
            <summary>Gets or sets the vertical alignment of the text of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.Top">
            <summary>Gets or sets the top position of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.UserData">
            <summary>Gets or sets programmer defined data associated with the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.VisualStyle">
            <summary>Gets or sets the visual style of the popup notification.</summary>
            <remarks>When this property is set, then all appearance related properties are changed to reflect the new visual style if they have default values.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopup.Width">
            <summary>Gets or sets the width of the popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellPopupCancelEventArgs">
            <summary>Provides data for various ShellPopup events.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupCancelEventArgs.Popup">
            <summary>Gets the  ShellPopup for which the event occurred.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellPopupContextMenuEventArgs">
            <summary>Provides data for the  ContextMenuPopup event.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupContextMenuEventArgs.Popup">
            <summary>Gets the  ShellPopup for which this event occurs.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellPopupContextMenuItemEventArgs">
            <summary>Provides data for the ContextMenuItemSelect event.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupContextMenuItemEventArgs.Popup">
            <summary>Gets the  ShellPopup for which the event occurs.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellPopupEventArgs">
            <summary>Provides data for various events of the  ShellPopupNotification control.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupEventArgs.Popup">
            <summary>Gets the  ShellPopup for which the event occurs.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellPopupMouseEventArgs">
            <summary>Provides data for the  MouseMove,  MouseUp and  MouseDown events of the  ShellPopupNotification control.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupMouseEventArgs.MouseKeyState">
            <summary>Gets the state of the mouse buttons and the Shift and Control keys when the event occurred.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupMouseEventArgs.X">
            <summary>Gets the x-coordinate of the mouse when the event occurs.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupMouseEventArgs.Y">
            <summary>Gets the y-coordinate of the mouse when the event occurs.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellPopupNotification">
            <summary>The ShellPopupNotification Control displays multiple MSN and Office2003 style popup notifications.</summary>
            <remarks>    The ShellPopupNotification Control allows you to display     multiple MSN and Office2003     style popup notifications. Each popup notification is     represented by a          ShellPopup object. Popup notifications can be created and     displayed using the          CreatePopup and          ShowPopup methods. When a popup notification is first     created, it inherits all the properties from the     ShellPopupNotification Control. These     properties can be changed before it is displayed. When showing     or closing, the popup notifications can use slide, fade or a     combination of both animations as specified by     the     AnimationStyle property. The animation duration is     specified by the          AnimTime property.     Each popup notification can display a logo image, a     background image, a close button, an options button, a text, a     link and a gripper bar. The          VisualStyle property can be used to display popup     notifications in either Office2003 or MSN style. Various     appearance properties can be used to customize the visual     appearance.     Multiple popup notifications can be displayed at the same     time. If the          PositioningStyle is PSAuto, then they are     automatically arranged so that they do not overlap each other.     The          AutoPositioningDirection property can used to control how     multiple popups are arranged. They can also be shown at     specific positions by setting the          PositioningStyle property to     PSCustom.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellPopupNotification.#ctor">
            <summary>Initializes new instance of  ShellPopupNotification class.Initializes new instance of class. Initializes new instance of  ShellPopupNotification class.</summary>
            <returns>A ShellPopupNotification object</returns>
            <remarks>None. None. None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellPopupNotification.#ctor(System.ComponentModel.IContainer)">
            <summary>Initializes new instance of  ShellPopupNotification class.</summary>
            <remarks>None.</remarks>
            <returns>A ShellPopupNotification object</returns>
            <param name="container">A container for ShellPopupNotification</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellPopupNotification.CreatePopup">
            <summary>Creates a new popup notification.</summary>
            <remarks>When a  ShellPopup is first created, it inherits all properties from the  ShellPopupNotification Control. This method can be used to change the properties of the newly created popup notification before it is displayed using the  Show method.</remarks>
            <returns> ShellPopup</returns>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellPopupNotification.ShowPopup">
            <summary>Creates and shows a new popup notification.</summary>
            <returns>ShellPopup</returns>
            <remarks>To change the properties of the popup notification before it is shown, use the  CreatePopup method followed by the  Show method.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.ActiveShowTime">
            <summary>Gets or sets the time duration in milliseconds that popup notifications are shown before they are automatically closed.</summary>
            <remarks>If this property is set to 0 (zero), then popup notifications do not automatically close.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.AllowDrag">
            <summary>Gets or sets whether popup notifications can be dragged by the gripper bar in Office2003 style.</summary>
            <remarks>This property only takes effect if the  VisualStyle property is set to VSOffice2003.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.AnimationStyle">
            <summary>Gets or sets the animation style used to show popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.AnimTime">
            <summary>Gets or sets the time duration of the animation used for popup notifications.</summary>
            <remarks>This property specifies the time taken for popups to go from the closed to the fully shown ( or vice-versa ) state when using side, fade or slide-and-fade animation.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.AutoPopupHeight">
            <summary>Gets or sets the height of popup notifications when automatic positioning is used.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.AutoPopupWidth">
            <summary>Gets or sets the width of popup notifications when automatic positioning is used.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.AutoPositioningDirection">
            <summary>Gets or sets how multiple popup notifications are shown when automatic positioning is used.</summary>
            <remarks>    This property takes effect only if the          PositioningStyle property is Auto. This     property specifies how multiple popup notifications are     arranged when showed at the same. time. Multiple popup     notifications can be configured to be any corner of the screen     along the x-axis or along the y-axis. For example, if this     property is set to BottomLeftToTopLeft, then     the first popup is shown at the bottom-left corner, the next     popup is shown above that and so on. When another popup cannot     be fitted above this column of popups, it is shown in a new     column beside the existing column.     When popups are closed, their space is occupied by any     newly shown popups.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.BackColor">
            <summary>Gets or sets the back color of popup notifications.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.BackColor2">
            <summary>Gets or sets the second back color of popup notifications, used when gradient or hatch fill styles are specified.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.BackFillStyle">
            <summary>Gets or sets the background fill style of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.BackGradientMode">
            <summary>Gets or sets the gradient style of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.BackHatchStyle">
            <summary>Gets or sets the hatch style of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.BackImage">
            <summary>Gets or sets the background image shown in popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.BackImageHAlign">
            <summary>Gets or sets the horizontal alignment of the background image of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.BackImageIsTransparent">
            <summary>Gets or sets whether the background image of popup notifications is drawn transparently.</summary>
            <remarks>If this property is True, then the  BackImageTransparentColor property specifies the color to use as the transparent color.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.BackImageTransparentColor">
            <summary>Gets or sets the transparent color of the background image of popup notifications.</summary>
            <remarks>This property only takes effect if the  BackImageIsTransparent property is True.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.BackImageVAlign">
            <summary>Gets or sets the vertical alignment of the background image of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.BorderColor">
            <summary>Gets or sets the border color of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.BorderColor3D">
            <summary>Gets or sets the second border color of popup notifications, used when a 3D border style is specified.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.BorderStyle">
            <summary>Gets or sets the border style of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.CustomPopupHeight">
            <summary>Gets or sets the width of popup notifications when custom positioning is used.</summary>
            <remarks>This property only takes effect if the  PositioningStyle property is set to Custom.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.CustomPopupLeft">
            <summary>Gets or sets the left position of popup notifications when custom positioning is used.</summary>
            <remarks>This property only takes effect if the  PositioningStyle property is set to Custom.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.CustomPopupTop">
            <summary>Gets or sets the top position of popup notifications when custom positioning is used.</summary>
            <remarks>This property only takes effect if the  PositioningStyle property is set to Custom.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.CustomPopupWidth">
            <summary>Gets or sets the width of popup notifications when custom positioning is used.</summary>
            <remarks>This property only takes effect if the  PositioningStyle property is set to Custom.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.GripperColor">
            <summary>Gets or sets the gripper color of popup notifications.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.GripperColor2">
            <summary>Gets or sets the second gripper color of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.GripperGradientMode">
            <summary>Gets or sets the gradient style used for grippers.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.LinkColor">
            <summary>Gets or sets the link color of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.LinkColorHot">
            <summary>Gets or sets the hot-state link color of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.LinkFontName">
            <summary>Gets or sets the font name of the link of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.LinkFontSize">
            <summary>Gets or sets the font size of the link of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.LinkFontStyle">
            <summary>Gets or sets the font style of the link of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.LinkFontStyleHot">
            <summary>Gets or sets the font style of the hot-state link of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.LinkHAlign">
            <summary>Gets or sets the horizontal alignment of the link of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.LinkString">
            <summary>Gets or sets the link text shown in popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.LinkVAlign">
            <summary>Gets or sets the vertical alignment of the link of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.LogoImage">
            <summary>Gets or sets the logo image of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.LogoImageHAlign">
            <summary>Gets or sets the horizontal alignment of the logo image of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.LogoImageIsTransparent">
            <summary>Gets or sets whether the logo image of popup notifications is drawn transparently</summary>
            <remarks>If this property is True, then the  LogoImageTransparentColor property specifies the color in the logo image to use as the transparent color.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.LogoImageTransparentColor">
            <summary>Gets or sets the transparent color of the logo image of popup notifications.</summary>
            <remarks>This property only takes effect if the  LogoImageIsTransparent property is True.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.LogoImageVAlign">
            <summary>Gets or sets the vertical alignment of the logo image of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.MaxOpacity">
            <summary>Gets or sets the maximum opacity of popup notifications when they are fully shown.</summary>
            <remarks>The value of this property can range from 0 to 255, with 0 representing full transparency and 255 representing full opacity.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.PositioningStyle">
            <summary>Gets or sets whether popup notifications are automatically positioned or they used custom position coordinates.</summary>
            <remarks>If the PositioningStyle is Auto, then popup notifications are automatically arranged so that they do not overlap each other. The  AutoPositioningDirection property can used to control how multiple popups are arranged. They can also be shown at specific positions by setting the PositioningStyle to Custom.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.ShowCloseButton">
            <summary>Gets or sets whether the close button is shown in popup notifications.</summary>
            <remarks>When the close button is clicked, the  BeforeClose event is raised and the popup notification is closed.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.ShowOptionsButton">
            <summary>Gets or sets whether the options button is shown in popup notifications.</summary>
            <remarks>When the options button is clicked the  OptionsButtonClick event is raised. A context menu can be displayed in the event handler by calling the  InvokeContextMenu method. This causes the  ContextMenuPopup event to be raised which can be used to populate the contextmenu.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.SlideStyle">
            <summary>Gets or sets the slide style used for animating popup notifications.</summary>
            <remarks>This property only takes effect if the  AnimationStyle property is set to Slide. See  SlideStyles for the various slide styles that can be used.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.SoundFile">
            <summary>Gets/Sets the sound which is played when the popup notification is shown.</summary>
            <remarks>The property value can specify a full path to a wave audio file or the name of a system sound such as "SystemAsterisk" or "SystemExclamation".</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.TextColor">
            <summary>Gets or sets the text color of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.TextColorHot">
            <summary>Gets or sets the hot-state text color of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.TextFontName">
            <summary>Gets or sets the font name of the text of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.TextFontSize">
            <summary>Gets or sets the font size of the text of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.TextFontStyle">
            <summary>Gets or sets the font style of the text of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.TextFontStyleHot">
            <summary>Gets or sets the font style of the hot-state text of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.TextHAlign">
            <summary>Gets or sets the horizontal alignment of the text of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.TextString">
            <summary>Gets or sets the text shown in popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.TextVAlign">
            <summary>Gets or sets the vertical alignment of the text of popup notifications.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellPopupNotification.VisualStyle">
            <summary>Gets or sets the visual style of popup notifications.</summary>
            <remarks>Popup notifications can be showed in MSN or Office2003 styles.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellPopupNotification.AfterClose">
            <summary>Occurs after a popup notification is closed.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellPopupNotification.AfterPopup">
            <summary>Occurs after a popup notification is fully shown.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellPopupNotification.BeforeClose">
            <summary>Occurs before a popup notification is about to be closed.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellPopupNotification.BeforePopup">
            <summary>Occurs before a popup notification is shown.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellPopupNotification.CloseButtonClick">
            <summary>Occurs when the close button of a popup notification is clicked.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellPopupNotification.ContextMenuItemSelect">
            <summary>Occurs after a context menu item is selected.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellPopupNotification.ContextMenuPopup">
            <summary>Occurs before a context menu is displayed in response to calling the InvokeContextMenu method.</summary>
            <remarks>This event is used to populate the contextmenu that is about to be displayed. If a menu item is selected, the  ContextMenuItemSelect event is raised.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellPopupNotification.LinkClick">
            <summary>Occurs when the link of the popup notification is clicked.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellPopupNotification.MouseDown">
            <summary>Occurs when a mouse button is pressed over a popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellPopupNotification.MouseMove">
            <summary>Occurs when the mouse moves over a popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellPopupNotification.MouseUp">
            <summary>Occurs when a mouse button is released over a popup notification.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellPopupNotification.OptionsButtonClick">
            <summary>Occurs after the options button of a popup notification is clicked.</summary>
            <remarks>To display a context menu when this event is raised, call the  InvokeContextMenu method in the event handler. This causes the  ContextMenuPopup event to be raised, which can be used to populate the contextmenu.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.ShellPopupNotification.TextClick">
            <summary>Occurs when the text of the popup notification is clicked.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellProgressDialog">
            <summary>The ShellProgressDialog displays a standard system progress dialog with animation and progress messages.</summary>
            <remarks>    The          Show method displays the progress dialog. After the     progress dialog is displayed, periodically call the          SetProgress method to display a progress indication to the     user. Immediately after calling the SetProgress method, query     the          HasUserCancelled property to determine whether the user has     cancelled the operation by clicking the 'Cancel' button of the     progress dialog. Finally, after the operation is complete, call     the          Hide method.     Each progress dialog can display upto three lines of     text. These can set using the          Line1,          Line2 and          Line3 properties. The progress dialog can also optionally     display an estimate of the time remaining in line three, if the          ShowTimeRemaining property is True. The          Animation property specifies the animation that is     displayed in the progress dialog. The          CancelMessage property specifies the text that is display     on line three after the user presses the 'Cancel'     button.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellProgressDialog.#ctor">
            <summary>Initializes new instance of  ShellProgressDialog class.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellProgressDialog.#ctor">
            <summary>Initializes new instance of  ShellProgressDialog class.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellProgressDialog.#ctor(System.ComponentModel.IContainer)">
            <summary>Initializes new instance of  ShellProgressDialog class.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellProgressDialog.Hide">
            <summary>Hides the progress dialog from the screen.</summary>
            <remarks>This method is called when the user clicks the 'Cancel' button or after the operation is complete.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellProgressDialog.ResetTimeRemainingEstimate">
            <summary>Resets the internal timer which is used to calculate the estimate of the time remaining.</summary>
            <remarks>The progress dialog estimates the time remaining based on the amount of time elapsed between the moment when the  Show method was called and the latest call to the  SetProgress method. However, if the actual operation does not start immediately after the Show method is called, the ResetTimeRemainingEstimate method should be called just before it starts, so the estimate of the time remaining is correctly calculated.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellProgressDialog.SetAnimation(System.IntPtr,System.Int32)">
            <summary>Sets the custom animation to be displayed in the progress dialog.Specifies the custom animation to be displayed in the progress dialog.</summary>
            <remarks>This method should be called only when the  Animation property is set to  ProgressDialogAnimation.Custom</remarks>
            <param name="hInstAnimation">The handle to a module instance (loaded dll or exe file) which contains the animation.</param>
            <param name="idAnimation">The resource ID of the animation in the module.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellProgressDialog.SetProgress">
            <summary>Updates the progress indicator of the progress dialog.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellProgressDialog.SetProgress(System.Int32,System.Int32)">
            <summary>Updates the progress indicator of the progress dialog.</summary>
            <remarks>    The          PercentComplete property can be used instead of this method     to specify the amount of operation completed in percentage     terms.     Immediately after calling this method, the          HasUserCancelled method should be called to determine     whether the user has cancelled the operation by clicking the     'Cancel' button of the progress dialog. If the          HasUserCancelled returns true, the operation should be     discontinued and the progress dialog should be removed from the     screen using the          Hide method.</remarks>
            <param name="complete">The number of 'steps' completed.</param>
            <param name="total">The total number of 'steps' in the operation.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellProgressDialog.SetProgress(System.Int64,System.Int64)">
            <summary>Updates the progress indicator of the progress dialog.</summary>
            <remarks>    The          PercentComplete property can be used instead of this method     to specify the amount of operation completed in percentage     terms.     Immediately after calling this method, the          HasUserCancelled method should be called to determine     whether the user has cancelled the operation by clicking the     'Cancel' button of the progress dialog. If the          HasUserCancelled returns true, the operation should be     discontinued and the progress dialog should be removed from the     screen using the          Hide method.</remarks>
            <param name="complete">The number of 'steps' completed.</param>
            <param name="total">The total number of 'steps' in the operation.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellProgressDialog.Show">
            <summary>Displays the progress dialog to the user.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellProgressDialog.Show">
            <summary>Displays the progress dialog to the user.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellProgressDialog.Show(System.IntPtr)">
            <summary>Displays the progress dialog to the user.</summary>
            <param name="hWndParent">The handle of the window which should be used as the parent of the progress dialog.</param>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellProgressDialog.Animation">
            <summary>Gets the sets the animation that is displayed in the progress dialog.</summary>
            <remarks>Set this property to None to not display any animation in the progress dialog. Set this property to Custom to display a custom animation (using the  SetAnimation method) in the progress dialog.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellProgressDialog.CancelMessage">
            <summary>Gets or sets the text that is display after the user presses the cancel button of the progress dialog.</summary>
            <remarks>This text is displayed after the user presses the cancel button till the progress dialog is hidden (while cleanup of the operation is being performed).</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellProgressDialog.HasUserCancelled">
            <summary>Determines whether the user has pressed the 'cancel' button of the progress dialog,</summary>
            <remarks>This property must be queried after every call to  SetProgress or  PercentComplete. If this property returns true, the operation being performed must be aborted and the progress bar should be destroyed using the  Hide method.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellProgressDialog.Line1">
            <summary>Gets or sets the text displayed on the first line of the progress dialog.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellProgressDialog.Line2">
            <summary>Gets or sets the text displayed on the second line of the progress dialog.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellProgressDialog.Line3">
            <summary>Gets or sets the text displayed on the third line of the progress dialog.</summary>
            <remarks>If the  ShowTimeRemianing is set to True, the progress dialog displays an estimate of the time remaining in the third line. In this case, the Line3 property cannot be used to display text in the third line.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellProgressDialog.Modal">
            <summary>Gets or sets whether the progress dialog should be displayed modally or not.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellProgressDialog.PercentComplete">
            <summary>Gets the sets the amount, in percentage terms, of the operation completed.</summary>
            <remarks>    This property is a convenient alternative to the          SetProgress method.     Immediately after setting this property, the          HasUserCancelled method should be called to determine     whether the user has cancelled the operation by clicking the     'Cancel' button of the progress dialog. If the          HasUserCancelled returns true, the operation should be     discontinued and the progress dialog should be removed from the     screen using the          Hide method.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellProgressDialog.ProgressBarStyle">
            <summary>Gets or sets the style of the progress bar shown in the progress dialog.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellProgressDialog.ShowCancelButton">
            <summary>Gets or sets whether the 'cancel' button is displayed in the progress dialog.</summary>
            <remarks>This property only takes effect when running on Windows Vista.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellProgressDialog.ShowMinimizeButton">
            <summary>Gets or sets whether the 'minimize' button is displayed in title bar of the progress dialog.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellProgressDialog.ShowTimeRemaining">
            <summary>Gets or sets whether an estimate of the time remaining for the operation to complete is displayed in the progress bar.</summary>
            <remarks>If this property is set to True, the third line ( Line3 property) of the progress dialog cannot be used to display custom text.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellProgressDialog.Title">
            <summary>Gets or sets the title (shown in the title bar) of the progress dialog.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellTaskBar">
            <summary>The ShellTaskBar component allows you to organize, re-order, delete or add tabs in the Windows TaskBar.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellTaskBar.ActivateTab">
            <summary>Activates the specified tab.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellTaskBar.ActivateTab(LogicNP.ShellObjects.ShellTaskBarTab)">
            <summary>Activates the specified tab.</summary>
            <param name="tab">The tab to activate.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellTaskBar.ActivateTab(System.IntPtr)">
            <summary>Activates the tab representing the specified window handle.</summary>
            <param name="hwnd">The window handle whose tab is to be activated.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellTaskBar.AddTab(System.IntPtr)">
            <summary>Adds a new tab to the taskbar representing the specified window handle.</summary>
            <param name="hwnd">The window handle for which a new tab is to be added.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellTaskBar.AddTabs">
            <summary>Adds the specified list of tabs to the taskbar.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellTaskBar.AddTabs(System.IntPtr[])">
            <summary>Adds new tabs to the taskbar representing the specified list of window handles.</summary>
            <param name="hwnds">The array of window handles for which new tabs are to be added.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellTaskBar.AddTabs(LogicNP.ShellObjects.ShellTaskBarTab[])">
            <summary>Adds the specified tabs to the taskbar.</summary>
            <param name="tabs">The array of tabs to be added to the taskbar.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellTaskBar.DeleteAllTabs">
            <summary>Deletes all tabs from the taskbar.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellTaskBar.DeleteTab">
            <summary>Deletes the specified tab from the taskbar.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellTaskBar.DeleteTab(LogicNP.ShellObjects.ShellTaskBarTab)">
            <summary>Deletes the specified tab from the taskbar.</summary>
            <param name="tab">The tab to be deleted.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellTaskBar.DeleteTab(System.IntPtr)">
            <summary>Deletes the tab representing the specified window handle.</summary>
            <param name="hwnd">The window handle whose tab is to be deleted.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellTaskBar.GetTabs">
            <summary>Gets all tabs currently present in the taskbar.</summary>
            <returns>An array of ShellTaskBarTab objects representing all the tabs currently present in the taskbar.</returns>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellTaskBarTab">
            <summary>Represents a tab in the taskbar.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellTaskBarTab.WindowCaption">
            <summary>Gets the caption of the window that the tab represents.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellTaskBarTab.WindowHandle">
            <summary>Gets the handle of the window that the tab represents.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellUtils">
            <summary>ShellUtils is utility component contain miscellaneous shell utility methods.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.AddToRecentList(System.String)">
            <summary>Adds the specified file/folder to the list of 'Recently Used Documents'.</summary>
            <param name="path">The path representing the file or folder to be added to the list of 'Recently Used Documents'.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.AddToStartupRunList(LogicNP.ShellObjects.StartupType,System.String)">
            <summary>Adds the specified executable file to the system startup list.</summary>
            <param name="type">Specifies when and for what user the executable file runs on system startup.</param>
            <param name="path">The full path of the executable file.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.Capture">
            <summary>Captures the specified screen element.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.Capture(System.Windows.Forms.Screen)">
            <summary>Takes a screen-shot of the specified screen.</summary>
            <returns>A Bitmap representing the screen-shot of the specified screen.</returns>
            <param name="screen">The screen whose shot is to be taken.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.Capture(System.Windows.Forms.Screen,System.Boolean)">
            <summary>Takes a screen-shot of the specified screen.</summary>
            <returns>A Bitmap representing the screen-shot of the specified screen.</returns>
            <param name="screen">The screen whose shot is to be taken.</param>
            <param name="workingAreaOnly">True if only the working area(area excluding the taskbar/other appbars) is to be captured; False to capture the whole screen.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.Capture(System.Diagnostics.Process)">
            <summary>Takes a screen-shot of the main window of the specified screen.</summary>
            <returns>A Bitmap representing the screen-shot of the main window of the specified process.</returns>
            <param name="process">The process whose shot is to be taken.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.Capture(System.Windows.Forms.Control)">
            <summary>Takes a screen-shot of the specified control.</summary>
            <returns>A Bitmap representing the screen-shot of the specified control.</returns>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.Capture(System.Windows.Forms.Control,System.Boolean)">
            <summary>Takes a screen-shot of the specified control.</summary>
            <returns>A Bitmap representing the screen-shot of the specified control.</returns>
            <param name="clientOnly">True if only the client area(area excluding the border/caption bar) is to be captured; False to capture the whole control.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.Capture(System.IntPtr)">
            <summary>Takes a screen-shot of the specified window.</summary>
            <returns>A Bitmap representing the screen-shot of the specified window.</returns>
            <param name="handle">The window whose shot is to be taken.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.Capture(System.IntPtr,System.Boolean)">
            <summary>Takes a screen-shot of the specified window.</summary>
            <returns>A Bitmap representing the screen-shot of the specified window.</returns>
            <param name="handle">The window whose shot is to be taken.</param>
            <param name="clientOnly">True if only the client area(area excluding the border/caption bar) is to be captured; False to capture the whole window.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.Capture(System.Drawing.Rectangle)">
            <returns>A Bitmap representing the screen-shot of the specified rectangular part of the screen.</returns>
            <param name="rc">The rectangle whose shot is to be taken.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.CaptureAllScreens">
            <summary>Takes a screen-shot of all screens separately.</summary>
            <returns>An array of bitmaps representing the screen-shot of all screens taken separately.</returns>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.CaptureEntireScreen">
            <summary>Takes a screen-shot of the all screens combined together.</summary>
            <returns>A Bitmap representing the screen-shot of all screens combined together.</returns>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.CascadeWindows">
            <summary>Cascades all currently open top-level windows.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.EmptyRecentList">
            <summary>Removes all entries from the list of 'Recently Used Documents'.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.MinimizeAll">
            <summary>Minimizes all currently open top-level windows.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.RemoveFromStartupRunList(LogicNP.ShellObjects.StartupType,System.String)">
            <summary>Removes the specified executable file from the system startup list.</summary>
            <param name="type">Specifies when and for what user the executable file runs on system startup.</param>
            <param name="path">The full path of the executable file.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.RunControlPanelItem(System.String)">
            <summary>Runs the specified control panel item.</summary>
            <param name="itemName">The control panel item to run.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.SetWallpaper">
            <summary>Sets the specified bitmap as the desktop wallpaper.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.SetWallpaper(System.Drawing.Bitmap,LogicNP.ShellObjects.WallpaperStyle)">
            <summary>Sets the specified bitmap as the desktop wallpaper.</summary>
            <returns>True if the wallpaper was successfully set; False otherwise.</returns>
            <param name="bmp">The bitmap which is to be set as the wallpaper.</param>
            <param name="style">The style of the wallpaper.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.SetWallpaper(System.String,LogicNP.ShellObjects.WallpaperStyle)">
            <summary>Sets the specified bitmap file as the desktop wallpaper.</summary>
            <returns>True if the wallpaper was successfully set; False otherwise.</returns>
            <param name="fileName">The bitmap file which is to be set as the wallpaper.</param>
            <param name="style">The style of the wallpaper.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.ShowDateTimePropertiesDialog">
            <summary>Shows the system's 'Date Time Properties' dialog.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.ShowFileRunDialog">
            <summary>Shows the system's 'Run File..' dialog.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.ShowFindComputerDialog">
            <summary>Shows the system's 'Find Computer' dialog.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.ShowOpenWithDialog(System.String)">
            <summary>Shows the system's 'Open With' dialog.</summary>
            <param name="path">The full path of the file which is to be opened.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.ShowPickIconDialog(System.String)">
            <summary>Shows the system's 'Pick Icon' dialog.</summary>
            <returns>An Icon object representing the icon that the user picked from the specified exe or dll file.</returns>
            <param name="path">The full path of exe or dll file whose icons are to browsed.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.ShowSearchFilesDialog">
            <summary>Shows the system's 'Search' dialog.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.ShowShutdownWindowsDialog">
            <summary>Shows the system's 'ShutDown' dialog.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.ShowTaskBarPropertiesDialog">
            <summary>Shows the system's 'TaskBar Properties' dialog.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.ShowWindowsHelp">
            <summary>Shows the system help.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.StartScreenSaver">
            <summary>Starts the current system screen saver.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.TerminateScreenSaver">
            <summary>Terminates the screen saver if it is currently running.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.TileWindowsHorizontally">
            <summary>Tiles all currently open top-level windows horizontally.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.TileWindowsVertically">
            <summary>Tiles all currently open top-level windows vertically.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.ToggleDesktop">
            <summary>Toggles the 'Desktop' ON or OFF. It either hides all open windows and shows the desktop, or it hides the desktop and shows all open windows.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.ShellUtils.UndoMinimizeAll">
            <summary>Un-does the previous 'Minimize All' command.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellUtils.IsScreenSaverRunning">
            <summary>Gets/Sets whether the screen saver is currently running.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellUtils.ScreenSaver">
            <summary>Gets/Sets the full path of the screen saver executable file.</summary>
            <remarks>To change the system screen saver, set this property to the the full path of the screen saver executable file.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellUtils.ScreenSaverActive">
            <summary>Gets/Sets whether a screen saver has been specified.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellUtils.ScreenSaverIsSecure">
            <summary>Gets/Sets whether the screen saver shows the 'login' dialog when stopped.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.ShellUtils.ScreenSaverTimeout">
            <summary>Gets/Sets the time (in milliseconds) after which the screen saver activates.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.SingleInstanceComponent">
            <summary>The SingleInstanceComponent prevents more than one instance of your application from running at the same time.</summary>
            <remarks>    To use the SingleInstanceComponent, simply     call the          NotifyExistingInstance method; if this method returns true,     no other instance of the application is running and application     can proceed with its run. The code is as follows     :     static     void     Main()      {     if(SingleInstanceComponent.NotifyExistingInstance(null))     {     SingleInstanceComponent.NewInstance += new     NewInstanceEventHandler(OnNewInstance);     Application.Run(new     Form1());     }     }     To gain more control over whether     additional instances are allowed, you can handle the          NewInstance event in your first instance as follows     :     static     void     Main()      {     if(SingleInstanceComponent.NotifyExistingInstance(null))     {     SingleInstanceComponent.NewInstance += new     NewInstanceEventHandler(OnNewInstance);     Application.Run(new     Form1());     }     }     static     internal void     OnNewInstance(object     sender,NewInstanceEventArgs e)     {     e.AllowInstance = MessageBox.Show(e.Data.ToString()     ,"Allow instance to     run?",MessageBoxButtons.YesNo)==DialogResult.Yes ?     true:false;     }     The          NotifyExistingInstance method accepts one parameter as data     which is passed along to an earlier instance through the          NewInstance event. This data can be accessed in the event     handler through the          e.Data property.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.SingleInstanceComponent.#ctor">
            <summary>Initializes a new instance of the  SingleInstanceComponent class.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.SingleInstanceComponent.NotifyExistingInstance(System.Object)">
            <summary>Notifies an existing running instance of the same application (if any) that a new instance is being started.</summary>
            <returns>True, if the current application instance should continue running, False, if the current application instance should quit immediately.</returns>
            <remarks>    This method should be called at the very beginning of the     application. If this method returns true, then it means that no     existing instance of the application exists or that the     existing instance is allowing the new instance to run. In this     case, the application should proceed as normal. If this method     returns true, it means that an existing instance of the     application is running and it has denied permission to the new     application. In this case, the new instance should exit     immediately.     This method attempts to notify an existing running     instance of the same application that a new instance of the     application is about to be started. The existing instance     receives this notification in the form of the          NewInstance event.</remarks>
            <param name="data">The data to pass to the existing instance of the application.</param>
        </member>
        <member name="P:LogicNP.ShellObjects.SingleInstanceComponent.ApplicationID">
            <summary>Gets/sets the string identifier of the application.</summary>
            <remarks>Each distinct application is given a unique string identifier by SingleInstanceComponent to allow it to identify an existing running instance of the same application. The default identifier given to an application is the full name of the assembly of the application including its version, culture and public key token if any. If desired, a custom identifier can be given by setting this property to the desired value at the very beginning of your application.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.SingleInstanceComponent.NewInstance">
            <summary>Occurs when a new instance of the same has started.</summary>
            <remarks>    To prevent the new instance of the application from     running, set the AllowInstance property to     False. The Data property is the data passed by     the new instance of the application to the existing instance     through the          NotifyExistingInstance method.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.SystemHook">
            <summary>Allows listening to system-wide mouse and keyboard input using Windows hooks.</summary>
            <remarks>    The SystemHook component uses Windows hooks which allows     you to listen to system-wide mouse and keyboard input even when     your application is not the foreground application.     The          Enabled property enables/disables the hook. The          MouseDown,          MouseUp,          MouseClick,          MouseDoubleClick,          MouseMove and          MouseWheel events are raised when the corresponding mouse     input occurs in any application. The          KeyDown,          KeyUp and          KeyPress events are raised when the corresponding keyboard     input occurs.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.SystemHook.Enabled">
            <summary>Gets/Sets whether the component is enabled and listening to mouse/keyboard inputs.</summary>
            <remarks>To remove the hook and stop listening to mouse/keyboard input, set this property to False.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.SystemHook.KeyDown">
            <summary>Occurs when a key is pressed anywhere in the system.</summary>
            <remarks>If the Handled property of KeyEventHandler object is set to True, then the input is not sent to the application.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.SystemHook.KeyPress">
            <summary>Occurs when a key is pressed anywhere in the system.</summary>
            <remarks>If the Handled property of KeyEventHandler object is set to True, then the input is not sent to the application.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.SystemHook.KeyUp">
            <summary>Occurs when a key is released anywhere in the system.</summary>
            <remarks>If the Handled property of KeyEventHandler object is set to True, then the input is not sent to the application.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.SystemHook.MouseClick">
            <summary>Occurs the mouse is clicked anywhere in the system.</summary>
            <remarks>If the  Handled property of  MouseHookEventArgs object is set to True, then the input is not sent to the application.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.SystemHook.MouseDoubleClick">
            <summary>Occurs the mouse is double-clicked anywhere in the system.</summary>
            <remarks>If the  Handled property of  MouseHookEventArgs object is set to True, then the input is not sent to the application.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.SystemHook.MouseDown">
            <summary>Occurs the mouse is pressed anywhere in the system.</summary>
            <remarks>If the  Handled property of  MouseHookEventArgs object is set to True, then the input is not sent to the application.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.SystemHook.MouseMove">
            <summary>Occurs the mouse is moved anywhere in the system.</summary>
            <remarks>If the  Handled property of  MouseHookEventArgs object is set to True, then the input is not sent to the application.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.SystemHook.MouseUp">
            <summary>Occurs the mouse is released anywhere in the system.</summary>
            <remarks>If the  Handled property of  MouseHookEventArgs object is set to True, then the input is not sent to the application.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.SystemHook.MouseWheel">
            <summary>Occurs the mouse wheel is scrolled anywhere in the system.</summary>
            <remarks>If the  Handled property of  MouseHookEventArgs object is set to True, then the input is not sent to the application.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.SystemHotKey">
            <summary>The SystemHotkey component defines and responds to a system-wide hotkey.</summary>
            <remarks>The SystemHotKey component features full designer support and allows the definition of a hot key via the Visual Studio.Net designer. Alternatively, the  SetHotKey method can be used to set the hot key via code. The currently set hot key can be retrieved using the  HotKey and  HotKeyModifiers properties. The  Enabled property determines whether the hotkey is enabled and is being listened for. The  HotKeyPressed event is raised when the hot key is pressed.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.SystemHotKey.SetHotKey(System.Windows.Forms.Keys,LogicNP.ShellObjects.KeyModifiers)">
            <summary>Sets the hot key for the component.</summary>
            <remarks>If the hot key set via this method is different from the existing hot key, the existing hot key is disabled and unregistered from the system.</remarks>
            <param name="key">The key which should be used as the hot key.</param>
            <param name="keyModifiers">The additional keys (such as Shift/Ctrl,etc) that must be pressed along with the main key for the hot key to be triggered.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.SystemHotKey.ShowHotKeyEditorDialog">
            <summary>Displays a dialog which allows the user to change the hot key.</summary>
            <returns>One of the DialogResult values.</returns>
        </member>
        <member name="P:LogicNP.ShellObjects.SystemHotKey.Enabled">
            <summary>Gets/sets whether the hot key is enabled and being listened for.</summary>
            <remarks>This property can be used to temporarily disable the hot key and stop listening for it.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.SystemHotKey.HotKey">
            <summary>Gets the currently set hot key.</summary>
            <remarks>To set a new hot key/key modifiers, use the  SetHotKey method.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.SystemHotKey.HotKeyModifiers">
            <summary>Gets the currently set hot key modifiers.</summary>
            <remarks>To set a new hot key/key modifiers, use the  SetHotKey method.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.SystemHotKey.IsRegistered">
            <summary>Gets whether the system hotkey is successfully registered.</summary>
        </member>
        <member name="E:LogicNP.ShellObjects.SystemHotKey.HotKeyPressed">
            <summary>Occurs when the hot key is pressed.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.SystemIdleTimer">
            <summary>The SystemIdleTimer component allows you to get notified when the system is idle for a specified amount of time and when it exits the idle state.</summary>
            <remarks>The  IdleTimeout property specifies the amount of time that the system must remain idle (no keyboard or mouse input) before the  SystemIdle event is raised. When the system exits the idle state, the  SystemResume event is raised. Every 100 milliseconds, the  Tick event is raised. The  SystemIdleTime property gets the time that the system has been idle (milliseconds since last keyboard or mouse input).</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.SystemIdleTimer.Enabled">
            <summary>Gets/Sets whether the component is enabled.</summary>
            <remarks>If this property is set to True, the  SystemIdle event is raised after the system remains idle for an amount of time greater than the value of the  IdleTimeout property.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.SystemIdleTimer.IdleTimeout">
            <summary>Gets/Sets the time (in milliseconds) that the system must remain idle for the  SystemIdle event to be raised.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.SystemIdleTimer.SystemIdleTime">
            <summary>Gets/Sets the amount of time (in milliseconds) that has elapsed since the system has been idle.</summary>
            <remarks>This value determines the time in milliseconds since the last keyboard or mouse input.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.SystemIdleTimer.SystemIdle">
            <summary>Occurs when the system enters the idle state.</summary>
        </member>
        <member name="E:LogicNP.ShellObjects.SystemIdleTimer.SystemResume">
            <summary>Occurs when the system exits the idle state.</summary>
            <remarks>After the system enters an idle state, the first keyboard or mouse input causes the system to exit the idle state and this event is then raised.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.SystemIdleTimer.Tick">
            <summary>Occurs every 100 milliseconds as long as the component is enabled.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.Task">
            <summary>Represents a task in the Scheduled Tasks folder.</summary>
            <remarks>    Use the          CreateTask method of the          TaskScheduler class to create a new task and use the          ApplicationName property of this class to assign a program     run by the task.     Use the          Flags property to get/set the required flags. Use the          Parameters property to get/set the command line parameters     for the task. Use the          Priority property to get/set different priority levels for     the task.     To get/set the collection of triggers associated with the     task use the          Triggers property. Use the          Save method to save the changes made with the task and     close the task using the          Close method.     Note     Always save the task before closing     it.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.Task.Close">
            <summary>Closes the task.</summary>
            <returns>None.</returns>
            <remarks>    After a task is closed, accessing its members causes an     error.     Always use the          Save method of the     Task     class to save the changes made with the task before closing     it.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.Task.DisplayPropertiesUI">
            <summary>Displays the property pages of this task.</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.Task.Dispose">
            <summary>Closes the task.</summary>
            <remarks>This method internally calls the  Close method of the Task class.</remarks>
            <returns>None</returns>
        </member>
        <member name="M:LogicNP.ShellObjects.Task.GetAccountInformation">
            <summary>Gets the user account under which the task will run.</summary>
            <returns>String</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.Task.Run">
            <summary>Runs the task immediately.</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.Task.Save">
            <summary>Saves changes made to an opened/created task.</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.Task.SetAccountInformation(System.String,System.String)">
            <summary>Sets the user account under which the task will run.</summary>
            <returns>None</returns>
            <remarks>    To run the task under the local system account, specify     an empty string ("") as account name and null as the password.     The caller must be running in an administrator account or in     the local system account for this to work.     You can also specify a null password if the task has the     flag          RunOnlyIfLoggedOn set.This allows you to schedule a task     for an account for which you don't know the password, but the     account must be logged on interactively at the time the task     runs.</remarks>
            <param name="accountName">The name of the account</param>
            <param name="password">The password for the account.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.Task.Terminate">
            <summary>Attempts to terminate the execution of a running task.</summary>
            <returns>None.</returns>
            <remarks>This method operates asynchronously and returns immediately without waiting for the task to terminate.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.Task.ToString">
            <summary>None</summary>
            <returns>String</returns>
            <remarks>None</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Task.ApplicationName">
            <summary>Gets or sets the full path of the program that the task will run.</summary>
            <remarks>If you specify only the filename, the Task Scheduler searches the PATH environment variable to find the correct path. If the application name specifies a program, the name should have the .exe extension to ensure that the Task Scheduler user interface properly displays the application's icon.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Task.Comment">
            <summary>Gets or sets the comment associated with the task.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Task.Creator">
            <summary>Gets or sets the creator of the task.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Task.ExitCode">
            <summary>Gets the Win32 exit code from the last execution of the task.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Task.Flags">
            <summary>Gets or sets the flags associated with the current task.</summary>
            <remarks>For more information about the flags , see the documentation of TaskFlags enumeration.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Task.IdleWaitDeadlineMinutes">
            <summary>Gets or sets the maximum number of minutes that Task Scheduler will wait past the scheduled start time of the task to check if the computer is idle.</summary>
            <remarks>If the StartOnlyIfIdle flag is set for the task, the task runs at its scheduled time only if the system becomes idle for the amount of time specified by this property. The Task Scheduler service will wait up to that many minutes past the scheduled start time to see if the system becomes idle.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Task.IdleWaitMinutes">
            <summary>Gets or sets the number of minutes that the computer must remain idle before a task having an idle trigger is run.</summary>
            <remarks>This value is used when a  EventTrigger of type OnIdle is added to the trigger list of the task.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Task.InfiniteRunTime">
            <summary>Specifies a constant value. It used to set the  MaxRunTime property of the Task class and indicates that the task will run indefinitely.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Task.MaxRunTime">
            <summary>Gets or sets the maximum length of time the task is permitted to run.</summary>
            <remarks>If you set the MaxRunTime property to the constant value returned by the  InfiniteRunTime property, the task will run indefinitely.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Task.MostRecentRunTime">
            <summary>Gets the most recent time the task began running.</summary>
            <remarks>This property returns a constant DateTime.MinValue if the task has not run.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Task.Name">
            <summary>Gets the name of the task.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Task.NextRunTime">
            <summary>Gets the next time the task will run.</summary>
            <remarks>This property returns DateTime.MinValue if the task is not scheduled to run.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Task.Parameters">
            <summary>Gets or sets the command-line parameters for the program associated with the task.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Task.Priority">
            <summary>Gets or sets the priority for the task.</summary>
            <remarks>none.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Task.Status">
            <summary>Gets the status of the task.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Task.Triggers">
            <summary>Gets the collection of the triggers associated with the task.</summary>
            <remarks>Use the  TriggerList class to handle the collection of the triggers associated with the task.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Task.WorkingDirectory">
            <summary>Gets or sets the working directory for the program associated with the task.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialog">
            <summary>Represents a TaskDialog.</summary>
            <remarks>    A TaskDialog is an advanced dialog box supported by     Windows Vista which can be used to convey information to the     user, provide them progress feedback and present choices and     tasks to them. It is intended to replace the Message Box found     in earlier operating systems.     The TitleText, MainText, ContentText, ExpandedText and     FooterText properties are used to display various kinds of text     in the TaskDialog. The MainIcon and FooterIcon properties are     used to display icons along with texts. The Buttons and     RadioButtons properties are used to display buttons and radio     buttons in the task dialog. The CommonButtons property is used     to display common buttons such as OK, Cancel in the task     dialog.     Note : The 'Task Dialog' is a newly added feature     in Windows Vista and therefore the TaskDialog component only     works on Windows Vista. Attempting to call the Show method on     other OS throws an exception.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskDialog.#ctor">
            <summary>Initializes new instance of  TaskDialog class.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskDialog.#ctor">
            <summary>Initializes new instance of  TaskDialog class.</summary>
            <returns>A  TaskDialog Object</returns>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskDialog.#ctor(System.ComponentModel.IContainer)">
            <summary>Initializes new instance of  TaskDialog class.</summary>
            <returns>A  TaskDialog Object</returns>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskDialog.GetClickedButtonID">
            <summary>Gets the ID of the button that was clicked before the task dialog was closed.</summary>
            <remarks>Use this method to determine the button that was clicked by the user before the task dialog was closed. The ID returned by this method can identify common buttons with IDs defined in the  TaskDialogCommonButtonIDs class as well as custom buttons having custom specified IDs.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskDialog.GetSelectedRadioButtonID">
            <summary>Gets the ID of the radio button that was selected by the user before the task dialog was closed.</summary>
            <remarks>The ID returned by this method is -1 if no radio button was selected by the user. If a radio button is selected, this method returns the ID of that radio button as specified when the radio button is added to the  RadioButtons property of  TaskDialog class.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskDialog.IsCheckBoxChecked">
            <summary>Gets whether the check box shown in the task dialog was checked when the task dialog was closed.</summary>
            <returns>True, if the check box was checked, False otherwise.</returns>
            <remarks>The return value of this method is valid only if the  CheckBoxVisible property of  TaskDialog is set to True.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskDialog.PerformButtonClick(System.Int32)">
            <summary>Simulates the click of a task dialog button.</summary>
            <param name="btnID">The ID of the button which should be clicked. This can be one of the common button IDs as defined in the  TaskDialogCommonButtonIDs class or custom IDs as specified when adding custom buttons using the  CustomButtons property.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskDialog.PerformRadioButtonClick(System.Int32)">
            <summary>Simulates the selection of a task dialog radio button.</summary>
            <param name="btnID">The ID of the radio button that should be selected. This is the same as that specified when the radio button is added to the  RadioButtons property of  TaskDialog class.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskDialog.Show">
            <summary>Shows the taskdialog UI based on current taskdialog instance at runtime.</summary>
            <returns>None</returns>
            <remarks>Set different properties of the taskdialog instance before show method.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskDialog.SwitchToTaskDialog(LogicNP.ShellObjects.TaskDialog)">
            <summary>Displays a new UI in the task dialog at runtime, based on the specified TaskDialog instance</summary>
            <remarks>This method can be used to dynamically switch the UI of the current task dialog at runtime. This method is typically called in one of the event handlers of the TaskDialog class such as the  ButtonClick event.</remarks>
            <returns>None</returns>
            <param name="newTaskDialog">The new TaskDialog instance which specifies the new UI for the current task dialog.</param>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.AllowDialogCancellation">
            <summary>Gets/sets whether the task dialog can be closed using the Alt+F4, Escape key or the title bar's close button even if the task dialog does not contain a Cancel button.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.CanBeMinimised">
            <summary>Get/sets whether the task dialog can be minimized.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.CheckBoxChecked">
            <summary>Gets/sets whether the check box in the task dialog is checked.</summary>
            <remarks>This property can be set both before the task dialog is shown as well as when it is visible. After the task dialog is closed, the  IsCheckBoxChecked method can be used to determine whether the check box was checked by the user.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.CheckBoxText">
            <summary>Gets/sets the caption of the check box shown in the task dialog.</summary>
            <remarks>This property cannot be changed while the task dialog is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.CheckBoxVisible">
            <summary>Gets/sets whether the check box in the task dialog is visible.</summary>
            <remarks>This property cannot be changed while the task dialog is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.CommonButtons">
            <summary>Gets the common buttons (OK,Cancel) which will be shown in the task dialog.</summary>
            <remarks>    If this property is set to None and no     custom buttons are added to the task dialog, then an     OK button is shown by default.     This property cannot be changed while the task dialog is     visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.ContentText">
            <summary>Gets/sets the content text of the task dialog.</summary>
            <remarks>    The context text is shown below the main text in the task     dialog.     This property can be set both before the task dialog is     shown as well as when it is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.CustomButtons">
            <summary>Gets the collection of custom buttons shown in the task dialog.</summary>
            <remarks>If no custom buttons are added to the task dialog and the     CommonButtons property is set to None, then a OK button is shown in the task dialog by default.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.CustomButtonStyle">
            <summary>Gets/sets the display style of the custom buttons shown in the task dialog.</summary>
            <remarks>This property cannot be changed while the task dialog is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.DefaultButtonID">
            <summary>Gets/sets the identifier of the button which will act as the default button of the task dialog.</summary>
            <remarks>    The ID can be one of the common button IDs as defined in     the          TaskDialogCommonButtonIDs class or custom IDs specified     when custom buttons are added to the TaskDialog using the          CustomButtons property.     This property cannot be changed while the task dialog is     visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.DefaultRadioButtonID">
            <summary>Gets/sets the identifier of the radio button which will be selected when the task dialog is shown.</summary>
            <remarks>    This ID is the same as that specified when the radio     button is added to the          RadioButtons property of          TaskDialog class.     This property cannot be changed while the task dialog is     visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.EnableHyperLinks">
            <summary>Gets/sets whether hyperlink processing is enabled for text specified in the ContentText, ExpandedText and FooterText properties.</summary>
            <remarks>    When this property is set to True, the     ContentText, ExpandedText and FooterText properties may contain     HTML hyperlinks in the form : &lt;A     HREF="http://www.ssware.com"&gt;HyperLink Text&lt;/A&gt;     When a hyperlink is clicked, the          HyperLinkClick event is raised.     This property cannot be changed while the task dialog is     visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.EnableTimer">
            <summary>Gets/sets whether the task dialog timer is enabled.</summary>
            <remarks>    If this property is set to True, the          TimerTick event continuously fires approximately every 200     milliseconds.     This property cannot be changed while the task dialog is     visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.ExpandedText">
            <summary>Gets/sets the text shown within the expando control of the task dialog.</summary>
            <remarks>    This property can be set both before the task dialog is     shown as well as when it is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.ExpandedTextPosition">
            <summary>Gets/sets the position of the expanded text shown in the task dialog.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.ExpandoControlCollapsedText">
            <summary>Gets/sets the caption of the expando control of the task dialog when it is collapsed.</summary>
            <remarks>This property cannot be changed while the task dialog is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.ExpandoControlExpandedText">
            <summary>Gets/sets the caption of the expando control of the task dialog when it is expanded.</summary>
            <remarks>This property cannot be changed while the task dialog is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.ExpandoControlState">
            <summary>Gets/sets whether the expando control of the task dialog is expanded or collapsed.</summary>
            <remarks>This property cannot be changed while the task dialog is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.ExpandoControlVisible">
            <summary>Gets/sets whether the expando control of the task dialog is visible.</summary>
            <remarks>    This property can be set both before the task dialog is     shown as well as when it is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.FooterIcon">
            <summary>Gets/sets the icon shown beside the footer text of the task dialog.</summary>
            <remarks>    This icon is used only if the          FooterIconType property is set to     Custom.     This property can be set both before the task dialog is     shown as well as when it is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.FooterIconType">
            <summary>Gets/sets the type of the icon shown beside the footer text of the task dialog.</summary>
            <remarks>    If this property is set to Custom, a     custom icon specified using the          FooterIcon property is displayed. To not display any icon,     set this property to None.     This property can be set both before the task dialog is     shown as well as when it is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.FooterText">
            <summary>Gets/sets the caption of the footer of the task dialog.</summary>
            <remarks>    This property can be set both before the task dialog is     shown as well as when it is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.IsShown">
            <summary>Gets whether the task dialog is currently shown.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.MainIcon">
            <summary>Gets/sets the icon shown beside the main text of the task dialog.</summary>
            <remarks>    This icon is used only if the          MainIconType property is set to     Custom.     This property can be set both before the task dialog is     shown as well as when it is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.MainIconType">
            <summary>Gets/sets the type of the icon shown beside the footer text of the task dialog.</summary>
            <remarks>    If this property is set to Custom, a     custom icon specified using the          MainIcon property is displayed. To not display any icon,     set this property to None.     This property can be set both before the task dialog is     shown as well as when it is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.MainText">
            <summary>Gets/sets the main text of the task dialog.</summary>
            <remarks>    This property can be set both before the task dialog is     shown as well as when it is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.ProgressBarMarqueeSpeed">
            <summary>Gets/sets the marquee speed of the progress bar of the task dialog.</summary>
            <remarks>    This property is only used if the          ProgressBarViewStyle property is set to          ProgressBarStyle.Marquee.     This property can be set both before the task dialog is     shown as well as when it is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.ProgressBarValueCurrent">
            <summary>Gets/sets the value of the progress bar of the task dialog.</summary>
            <remarks>    The ProgressBarValueCurrent value should not exceed          ProgressBarValueMax value set.     This property is only used if the          ProgressBarViewStyle property is not set to          ProgressBarStyle.None.     This property can be set both before the task dialog is     shown as well as when it is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.ProgressBarValueMax">
            <summary>Gets/sets the maximum value of the progress bar of the task dialog.</summary>
            <remarks>    The maximum value allowed for this property is     100.     This property is only used if the          ProgressBarViewStyle property is not set to          ProgressBarStyle.None.     This property can be set both before the task dialog is     shown as well as when it is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.ProgressBarValueMin">
            <summary>Gets/sets the minimum value of the progress bar of the task dialog.</summary>
            <remarks>    The value of this property should not set less than     0.     This property is only used if the          ProgressBarViewStyle property is set to          ProgressBarStyle.Marquee.     This property can be set both before the task dialog is     shown as well as when it is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.ProgressBarViewStyle">
            <summary>Gets/sets the type of the progress bar shown in the task dialog.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.RadioButtons">
            <summary>Gets the collection of radio buttons shown in the task dialog.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.RTLLayout">
            <summary>Gets/sets whether the text shown in the task dialog is shown right to left.</summary>
            <remarks>    This property cannot be changed while the task dialog is     visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialog.TitleText">
            <summary>Gets/sets the caption of the task dialog.</summary>
            <remarks>    This property cannot be changed while the task dialog is     visible.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.TaskDialog.AfterConstruct">
            <summary>Occurs immediately after the task dialog is constructed.</summary>
            <remarks>This even occurs before the  BeforeShow event.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.TaskDialog.BeforeDestroy">
            <summary>Occurs before the task dialog is destroyed.</summary>
        </member>
        <member name="E:LogicNP.ShellObjects.TaskDialog.BeforeShow">
            <summary>Occurs just before the task dialog is shown.</summary>
            <remarks>This event occurs after the  AfterConstruct event.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.TaskDialog.ButtonClick">
            <summary>Occurs when a button in the task dialog is clicked.</summary>
            <remarks>    The          ButtonID property of          TaskDialogButtonClickEventArgs class specifies the ID of     the button that was clicked.     To prevent the task dialog from closing set Cancel     property of the          TaskDialogButtonClickEventArgs class to     True, otherwise task dialog will be     closed.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.TaskDialog.CheckboxCheck">
            <summary>Occurs after the check state of the check box changes.</summary>
            <remarks>The  Checked property of the  TaskDialogCheckboxCheckEventArgs class specifies whether the check box was checked or unchecked.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.TaskDialog.ExpandoControlClick">
            <summary>Occurs when the expando control of the task dialog is clicked.</summary>
            <remarks>The  Expanded property of  TaskDialogExpandoControlClickEventArgs class specifies whether the expando control was expanded or collapsed.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.TaskDialog.HelpRequested">
            <summary>Occurs when the F1 key is pressed while the task dialog is shown.</summary>
        </member>
        <member name="E:LogicNP.ShellObjects.TaskDialog.HyperLinkClick">
            <summary>Occurs when a hyperlink in the task dialog is clicked.</summary>
            <remarks>If the  EnableHyperLinks property of  TaskDialog class is set to True, then the ContentText, ExpandedText and FooterText can contain HTML hyperlinks. This event is raised when one of these hyperlinks is clicked. The  Link property of  TaskDialogHyperLinkClickEventArgs class specifies the link that was clicked.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.TaskDialog.RadioButtonClick">
            <summary>Occurs when a radio button in the task dialog is selected.</summary>
            <remarks>The  RadioButtonID property of  TaskDialogRadioButtonClickEventArgs class specifies the ID of the radio button that was clicked.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.TaskDialog.TimerTick">
            <summary>Occurs when the task dialog timer fires.</summary>
            <remarks>If the  EnableTimer property of  TaskDialog class is set to True, this event is raised approximately every 200 milliseconds.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogButton">
            <summary>Represents a custom button in the task dialog.</summary>
            <remarks>    A custom button is added to a task dialog using the          CustomButtons property of TaskDIalog.     The          ID property identifies the button via a numeric identifier.     The          Text property is used to specify the caption for the     button.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialogButton.Enabled">
            <summary>Gets/sets whether the button is enabled.</summary>
            <remarks>    This property can be set both before the task dialog is     shown as well as when it is visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialogButton.ID">
            <summary>Gets/sets the identifier for the button.</summary>
            <remarks>    A button in a task dialog is identified by its numeric     identifier. This ID can be used to distinguish buttons in          ButtonClick event of TaskDialog class.     This property cannot be changed while the task dialog is     visible.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialogButton.ShowShieldIcon">
            <summary>Gets/sets whether the button shows a shield icon.</summary>
            <remarks>A button should show a shield icon if the action invoked by the button click requires privilege elevation.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialogButton.Text">
            <summary>Gets/sets the caption of the button.</summary>
            <remarks>    This property cannot be changed while the task dialog is     visible.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogButtonClickEventArgs">
            <summary>Provides data for the  ButtonClick event of  TaskDialog class.</summary>
            <remarks>The  ButtonID property of TaskDialogButtonClickEventArgs class specifies the ID of the button that was clicked. To prevent the task dialog from closing set Cancel property of the TaskDialogButtonClickEventArgs class to True, otherwise task dialog will be closed.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialogButtonClickEventArgs.ButtonID">
            <summary>Gets the ID of the button that was clicked.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogButtonList">
            <summary>Represents a collection of task dialog buttons.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskDialogButtonList.Add(LogicNP.ShellObjects.TaskDialogButton)">
            <summary>Adds the specified button to the collection</summary>
            <returns>The index of the newly added button.</returns>
            <param name="button">The button to add.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskDialogButtonList.Clear">
            <summary>Removes all buttons from the collection.</summary>
            <returns>None.</returns>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskDialogButtonList.Contains(LogicNP.ShellObjects.TaskDialogButton)">
            <summary>Determines whether the collection contains the specified button.</summary>
            <returns>bool</returns>
            <param name="tbutton">True, if the button exists in the collection, False otherwise.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskDialogButtonList.CopyTo(System.Array,System.Int32)">
            <summary>Copies the collection to an array</summary>
            <returns>None.</returns>
            <param name="array">The array to copy to.</param>
            <param name="index">The starting index from which to copy.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskDialogButtonList.IndexOf(LogicNP.ShellObjects.TaskDialogButton)">
            <summary>Gets the index of the specified button in the collection.</summary>
            <returns>The index of the specified button in the collection.</returns>
            <param name="tbutton">The button whose index is to be determined.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskDialogButtonList.Remove(LogicNP.ShellObjects.TaskDialogButton)">
            <summary>Removes the specified button from the collection.</summary>
            <returns>None.</returns>
            <param name="tbutton">The button to remove.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskDialogButtonList.RemoveAt(System.Int32)">
            <summary>Removes the button at the specified index.</summary>
            <returns>None.</returns>
            <param name="index">The index of the button that should be removed.</param>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialogButtonList.Count">
            <summary>Gets the number of buttons in the collection.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogCheckboxCheckEventArgs">
            <summary>Provides data for the  CheckboxCheck event of  TaskDialog class.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialogCheckboxCheckEventArgs.Checked">
            <summary>Gets whether the check box was checked or unchecked.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogCommonButtonIDs">
            <summary>Defines numeric identifiers for common task dialog buttons.</summary>
            <remarks>A task dialog can contain common buttons such as OK or Cancel which have predefined IDs which are defined in this class. The IDs can be used to identify buttons in the  ButtonClick event of TaskDialog and the  GetClickedButtonID and  PerformButtonClick methods of TaskDIalog.</remarks>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogCommonButtonIDs.IDABORT">
            <summary>Gets the ID of the Abort button</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogCommonButtonIDs.IDCANCEL">
            <summary>Gets the ID of the Cancel button</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogCommonButtonIDs.IDIGNORE">
            <summary>Gets the ID of the Ignore button</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogCommonButtonIDs.IDNO">
            <summary>Gets the ID of the No button</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogCommonButtonIDs.IDOK">
            <summary>Gets the ID of the OK button</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogCommonButtonIDs.IDRETRY">
            <summary>Gets the ID of the Retry button</summary>
        </member>
        <member name="F:LogicNP.ShellObjects.TaskDialogCommonButtonIDs.IDYES">
            <summary>Gets the ID of the Yes button</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogExpandoControlClickEventArgs">
            <summary>Provides data for the  ExpandoControlClick event of  TaskDialog class.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialogExpandoControlClickEventArgs.Expanded">
            <summary>Gets whether the expando control was expanded or collapsed.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogHyperLinkClickEventArgs">
            <summary>Provides data for the  HyperLinkClick event of  TaskDialog class.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialogHyperLinkClickEventArgs.Link">
            <summary>Gets the caption of the hyperlink that was clicked.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogRadioButtonClickEventArgs">
            <summary>Provides data for the  RadioButtonClick event of  TaskDialog class.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialogRadioButtonClickEventArgs.RadioButtonID">
            <summary>Gets the ID of the radio button.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogTimerTickEventArgs">
            <summary>Provides data for the  TimerTick event of  TaskDialog class.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskDialogTimerTickEventArgs.Ticks">
            <summary>Gets the ticks, in milliseconds, that have passed.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskScheduler">
            <summary>Represents the Windows Task Scheduler service.</summary>
            <remarks>The TaskScheduler class represents the Windows Task Scheduler service and can be used to manipulate, create and delete tasks. Use the  CreateTask method of create a new task, the  OpenTask method to open an existing task and the  DeleteTask method to delete an existing task</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskScheduler.#ctor">
            <summary>Initializes a new instance of the  TaskScheduler class.</summary>
            <remarks>None.</remarks>
            <returns>A TaskScheduler object</returns>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskScheduler.CreateTask(System.String)">
            <summary>Creates a new task having the specified name.</summary>
            <returns>Task</returns>
            <remarks>The name of the class can only include those characters which are valid in file names.</remarks>
            <param name="name">The name to be given to the task.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskScheduler.DeleteTask(System.String)">
            <summary>Deletes the task having the specified name.</summary>
            <returns>Boolean</returns>
            <remarks>None</remarks>
            <param name="name">The name of the task to delete.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskScheduler.GetTaskNames">
            <summary>Returns an array of names of all tasks.</summary>
            <returns>String[]</returns>
            <remarks>The names returned include the file extension ".job" along with the task name.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.TaskScheduler.OpenTask(System.String)">
            <summary>Opens the task having the specified name.</summary>
            <returns>A Task instance or null if the task with the specified name does not exist.</returns>
            <remarks>None.</remarks>
            <param name="name">The name of the task to open.</param>
        </member>
        <member name="P:LogicNP.ShellObjects.TaskScheduler.TargetComputer">
            <summary>Gets or sets the target computer whose tasks are to be manipulated.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.TrayImageList">
            <summary>The TrayImageList represents the imagelist associated with the  ShellNotifyIcon control</summary>
            <remarks>    The TrayImageList represents the imagelist associated     with the          ShellNotifyIcon control. This imagelist can be accessed     using the          ImageList property. Images can be added to this imagelist     at runtime or at designtime. To add images at designtime,     right-click on the ShellNotifyIcon object in the Form designer     and select the "Edit ImageList..." menu item. To add images at     runtime, use the          Add method.     If the          Animate property of          ShellNotifyIcon is True, icons from this     imagelist are used for the animation. If the          Animate property is False , then the          ImageIndex property can be used to display different icons     at different times.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.TrayImageList.Add(System.Drawing.Bitmap)">
            <summary>Adds a image to the imagelist.</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
            <param name="bmp">The bitmap to be added</param>
        </member>
        <member name="M:LogicNP.ShellObjects.TrayImageList.AddStrip(System.Drawing.Bitmap,System.Int32)">
            <summary>Adds a series of bitmaps to the image list from a bitmap strip.</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
            <param name="bmp">The bitmap strip.</param>
            <param name="width">The width of individual images in the strip.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.TrayImageList.GetAt(System.Int32)">
            <summary>Gets the image at the specified index from the imagelist.</summary>
            <returns>Bitmap</returns>
            <remarks>None.</remarks>
            <param name="index">The index of image</param>
        </member>
        <member name="M:LogicNP.ShellObjects.TrayImageList.RemoveAll">
            <summary>Removes all images from the imagelist.</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.TrayImageList.RemoveAt(System.Int32)">
            <summary>Removes the image at the specified index from the imagelist.</summary>
            <remarks>None.</remarks>
            <returns>Bitmap</returns>
            <param name="index">The index of image</param>
        </member>
        <member name="P:LogicNP.ShellObjects.TrayImageList.Count">
            <summary>Gets the number of images in the imagelist.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TrayImageList.TransparentColor">
            <summary>Gets or sets the color used as a transparent color for images in the imagelist.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.Trigger">
            <summary>Represents base class for different kinds of triggers that can be associated with a task.</summary>
            <remarks>The Trigger class is the base class of all the trigger classes. There are different types of triggers including a daily, weekly or monthly trigger, a run-once trigger or an idle trigger. The Type property specifies the type of the trigger.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.Trigger.Clone">
            <summary>Creates the copy of the trigger.</summary>
            <remarks>None.</remarks>
            <returns>A Trigger Object</returns>
        </member>
        <member name="P:LogicNP.ShellObjects.Trigger.EndDate">
            <summary>Gets or sets the end date of the trigger.</summary>
            <remarks>Only the year, month and day of the DateTime are used. This property only takes effect if the  IsEndDateValid property is True.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Trigger.IsEndDateValid">
            <summary>Gets or sets whether the EndDate property is valid.</summary>
            <remarks>If this property is True, then the  EndDate property specifies the date when the trigger deactivates. If this property is False, then the  EndDate property has no effect and the trigger remains active indefinitely.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Trigger.StartDateTime">
            <summary>Gets or sets the starting date and time of the trigger.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Trigger.Type">
            <summary>Gets the type of the trigger.</summary>
            <remarks>From the trigger class different types of triggers are derived.Type property specifies the type of the trigger created. For detailed information see,  TriggerType Enumeration.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.TriggerList">
            <summary>Represents the collection of triggers associated with a task.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.TriggerList.Add(LogicNP.ShellObjects.Trigger)">
            <summary>Add the specified trigger to the collection.</summary>
            <returns>Index of added trigger.</returns>
            <remarks>None.</remarks>
            <param name="trigger">The trigger to add.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.TriggerList.Clear">
            <summary>Remove all triggers from collection.</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.TriggerList.Contains(LogicNP.ShellObjects.Trigger)">
            <summary>Determines whether the specified trigger is part of the collection.</summary>
            <returns>True if the trigger is found in the collection, false otherwise.</returns>
            <remarks>None.</remarks>
            <param name="trigger">The trigger to find.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.TriggerList.CopyTo(System.Array,System.Int32)">
            <summary>Copies all the triggers in the collection to an array, beginning at the given index.</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
            <param name="array">The array to copy the triggers into.</param>
            <param name="index">The index at which to start copying.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.TriggerList.Dispose">
            <summary>Disposes resources associated with all triggers in the collection</summary>
            <returns>None</returns>
            <remarks>None</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.TriggerList.GetEnumerator">
            <summary>Gets an enumerator for the collection.</summary>
            <returns>Enumerator for TriggerList.</returns>
            <remarks>None</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.TriggerList.IndexOf(LogicNP.ShellObjects.Trigger)">
            <summary>Gets the index of the specified trigger.</summary>
            <returns>The zero based index of the trigger in the collection and -1 if the trigger is not part of the collection.</returns>
            <remarks>None.</remarks>
            <param name="trigger">The trigger to find.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.TriggerList.Remove(LogicNP.ShellObjects.Trigger)">
            <summary>Removes the trigger from the collection.</summary>
            <returns>None.</returns>
            <remarks>If the trigger is not in the collection, nothing happens. (No exception.)</remarks>
            <param name="trigger">The trigger to remove.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.TriggerList.RemoveAt(System.Int32)">
            <summary>Removes the trigger at a specified index.</summary>
            <returns>None.</returns>
            <param name="index">The index of trigger to remove.</param>
        </member>
        <member name="P:LogicNP.ShellObjects.TriggerList.Count">
            <summary>Gets the number of triggers in the collection.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TriggerList.IsFixedSize">
            <summary>Gets whether collection is of a fixed size.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TriggerList.IsReadOnly">
            <summary>Gets whether the collection is read-only.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TriggerList.IsSynchronized">
            <summary>Returns whether the collection is synchronized state.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.TriggerList.Item(System.Int32)">
            <summary>Gets or sets the trigger at the specified index.</summary>
            <remarks>None.</remarks>
            <param name="index">Index of the task</param>
        </member>
        <member name="P:LogicNP.ShellObjects.TriggerList.SyncRoot">
            <summary>Gets the root object for synchronization.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.UrlLink">
            <summary>The LogicNP Software URlLink component loads information from and saves information to internet shortcut(*.url) files</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.UrlLink.#ctor">
            <summary>Initializes new instance of class.Initializes new instance of class.Initializes new instance of UrlLink class.</summary>
            <returns>A objectA UrlLink object</returns>
            <remarks>None. None.None.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.UrlLink.#ctor(System.ComponentModel.IContainer)">
            <summary>Initializes new instance of UrlLink class.</summary>
            <returns>A UrlLink object</returns>
            <remarks>None.</remarks>
            <param name="container">A container for UrlLink</param>
        </member>
        <member name="M:LogicNP.ShellObjects.UrlLink.Clear">
            <summary>Clears all information about a previously loaded or saved shortcut.</summary>
            <remarks>None.</remarks>
            <returns>None.</returns>
        </member>
        <member name="M:LogicNP.ShellObjects.UrlLink.LoadFromFile(System.String)">
            <summary>Loads information from a url link(*.url) file.</summary>
            <returns>Boolean</returns>
            <remarks>This method loads information from the specified shortcut file. The information can then be accessed using the various properties of the control.</remarks>
            <param name="lnkPath">The full path of the shortcut file.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.UrlLink.SaveToFile(System.String)">
            <summary>Saves currently set information to a url link (*.url) file.</summary>
            <returns>Boolean</returns>
            <remarks>    The function creates a new internet shortcut file at the     specified file path using the currently set information. Please     note that the path should include the filename of the shortcut     file include its .url extension ( e.g. :     "c:\shortcut to www.ssware.com.url" ).     The function returns True if the     function succeeds or False otherwise.</remarks>
            <param name="lnkPath">The path where the shortcut should be saved.</param>
        </member>
        <member name="P:LogicNP.ShellObjects.UrlLink.Author">
            <summary>Gets or sets the author of the url link.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.UrlLink.Comments">
            <summary>Gets or sets comments associated with the url link.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.UrlLink.Description">
            <summary>Gets or sets the description for the url link.</summary>
            <remarks>The length of the string should not be greater than 260 characters on Win98/WinMe and 1024 characters for Win2000/WinXP/Win2003.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.UrlLink.Hotkey">
            <summary>Gets or sets the hot key for the url link.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.UrlLink.IconFile">
            <summary>Gets or sets the path of the icon for the url link.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.UrlLink.IconIndex">
            <summary>Gets or sets the index of the icon in the icon file for the url link.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.UrlLink.ShowCommand">
            <summary>Gets or sets the show command for the url link.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.UrlLink.Url">
            <summary>Gets or sets the url that the url link points to.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.UrlLink.WhatsNew">
            <summary>Gets or sets the WhatsNew text for the url link.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.UrlLink.WorkingDirectory">
            <summary>Gets or sets the working directory for the url link.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.WeeklyTrigger">
            <summary>Represents a trigger that fires at a specific time, on the specific days of the week and on the specific week interval.</summary>
            <remarks>Use the  StartDateTime property to specify the date and time at which the trigger fires. Use the  WeeksInterval property to specify the interval in terms of the weeks between two successive runs of a trigger.To set the day on which trigger will fire use  DaysOfTheWeek property.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.WeeklyTrigger.#ctor">
            <summary>Initializes a new instance of the  WeeklyTrigger class that fires on the specified days of the weeks after specified interval of weeks and at the specified time.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.WeeklyTrigger.#ctor">
            <summary>Initializes a new instance of the  WeeklyTrigger class.</summary>
            <remarks>    This initializes properties as follows:     DaysOfTheWeek = Monday     WeeksInterval = 1     StartDateTime = Time at which the trigger is     created.</remarks>
            <returns>A  WeeklyTrigger Object</returns>
        </member>
        <member name="M:LogicNP.ShellObjects.WeeklyTrigger.#ctor(System.DateTime,LogicNP.ShellObjects.DaysOfTheWeek)">
            <summary>Initializes a new instance of the  WeeklyTrigger class that fires on the specified days of the weeks of every week.</summary>
            <returns>A WeeklyTrigger Object</returns>
            <remarks>    This initializes properties as follows:     WeeksInterval = 1</remarks>
            <param name="runDateTime">Sets the time at which the trigger will fire.</param>
            <param name="daysOfTheWeek">Sets the days of the week.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.WeeklyTrigger.#ctor(System.DateTime,LogicNP.ShellObjects.DaysOfTheWeek,System.Int16)">
            <summary>Initializes a new instance of the  WeeklyTrigger class that fires on the specified days of the weeks after specified interval of weeks and at the specified time.</summary>
            <returns>A WeeklyTrigger Object</returns>
            <param name="runDateTime">Sets the time at which the trigger will fire.</param>
            <param name="daysOfTheWeek">Sets the days of the week.</param>
            <param name="weeksInterval">Sets the interval of weeks between two successive WeeklyTriggers. If the WeeksInterval is set to 1, the task runs on every week.This parameter can not set to a value less than 1. If it is set less than 1, then an argumentexception is thrown.</param>
        </member>
        <member name="P:LogicNP.ShellObjects.WeeklyTrigger.DaysOfTheWeek">
            <summary>Gets or sets the days of the week on which weekly trigger will fire.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WeeklyTrigger.WeeksInterval">
            <summary>Gets or sets the interval of weeks between two successive runs of the weekly triggers.</summary>
            <remarks>If WeeksInterval is set to 1, the task runs every week.</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.Wizard">
            <summary>    The Wizard control creates a navigable     user interface consisting of multiple steps/pages</summary>
            <remarks>    The Wizard control features full design-time support     allowing you to design your wizard steps completely at     design-time.     The          Pages property can be used to access/modify the collection     of pages comprising the wizard. The          SelectedPage and          SelectedPageIndex properties can be used to get/set the     currently selected page/page index in the wizard. The          BackButtonClick,          CancelButtonClick,          FinishButtonClick,          HelpButtonClick and          NextButtonClick can be used to handle button clicks in the     wizard. The          Perform* methods can be used to simulate button clicks via     code.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.Wizard.PerformBackButtonClick">
            <summary>Simulates a click of the Back button of the Wizard.</summary>
            <remarks>Calling this method has the same effect as the user clicking the Back button of the wizard. The  BackButtonClick event of both wizard and the currently selected wizard page is raised; the  Reason property of  WizardPageCancelEventArgs is set to NavigateBackCode.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.Wizard.PerformCancelButtonClick">
            <summary>Simulates a click of the Cancel button of the Wizard.</summary>
            <remarks>Calling this method has the same effect as the user clicking the Cancel button of the wizard. The  CancelButtonClick event of both wizard and the currently selected wizard page is raised.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.Wizard.PerformFinishButtonClick">
            <summary>Simulates a click of the Finish button of the Wizard.</summary>
            <remarks>Calling this method has the same effect as the user clicking the Finish button of the wizard. The  FinishButtonClick event of both wizard and the currently selected wizard page is raised.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.Wizard.PerformHelpButtonClick">
            <summary>Simulates a click of the Help button of the Wizard.</summary>
            <remarks>Calling this method has the same effect as the user clicking the Help button of the wizard. The  HelpButtonClick event of both wizard and the currently selected wizard page is raised.</remarks>
        </member>
        <member name="M:LogicNP.ShellObjects.Wizard.PerformNextButtonClick">
            <summary>Simulates a click of the Next button of the Wizard.</summary>
            <remarks>Calling this method has the same effect as the user clicking the Next button of the wizard. The  NextButtonClick event of both wizard and the currently selected wizard page is raised; the  Reason property of  WizardPageCancelEventArgs is set to NavigateNextCode.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Wizard.AlwaysShowFinishButton">
            <summary>Gets/sets whether the Finish button is always shown in addition to the Next button</summary>
            <remarks>    If this property is True, then the     Finish button is always shown in addition to the Next button     irrespective of whether the current wizard page is the     Finish/last page. However, the Finish button is disabled if the     current wizard page is not the Finish/last page.     If this property is set to False, then     the Finish button is shown on Finish/last pages while the Next     button is hidden. On all other pages, the Next button is shown     while the Finish button is hidden.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Wizard.BackButton">
            <summary>Gets the Back button of the wizard.</summary>
            <remarks>This property can be used to retrieve the Back button of the wizard and change the properties of the button.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Wizard.CancelButton">
            <summary>Gets the Cancel button of the wizard.</summary>
            <remarks>This property can be used to retrieve the Cancel button of the wizard and change the properties of the button.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Wizard.DisableButtonsOnPageChange">
            <summary>Gets/sets whether wizard buttons are disabled between page changes.</summary>
            <remarks>If wizard page changes is a time-consuming operation, this property can be set to True to prevent the user from changing pages before the current page change is complete.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Wizard.FinishButton">
            <summary>Gets the Finish button of the wizard.</summary>
            <remarks>This property can be used to retrieve the Finish button of the wizard and change the properties of the button.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Wizard.HelpButton">
            <summary>Gets the Help button of the wizard.</summary>
            <remarks>This property can be used to retrieve the Help button of the wizard and change the properties of the button.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Wizard.NextButton">
            <summary>Gets the Next button of the wizard.</summary>
            <remarks>This property can be used to retrieve the Next button of the wizard and change the properties of the button.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Wizard.PageBackTrackingStyle">
            <summary>Gets/sets how the wizard backtracks when the Back button is clicked.</summary>
            <remarks>    The wizard normally displays pages in sequential order -     in the order in which pages appear in the Pages collection.     However, this behavior can be overridden by handling the     BackButtonClick and the NextButtonClick events.     If this property is set to StackBased, then the last     selected page before the currently selected page is displayed     when a back navigation occurs. If this property is set to     Sequential, then that page in the page collection which occurs     before the currently selected page, is displayed when a back     navigation occurs.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Wizard.Pages">
            <summary>Gets the collection of wizard pages that comprise the wizard.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.Wizard.Painter">
            <summary>Gets/sets the painter that is used to paint the wizard.</summary>
            <remarks>    If this property is set to null, then a default painter -     an instance of          WizardPainterClassic class is used to paint the wizard. You     can use your own painter by implementing the          IWizardPainter interface and set this property to the     object implementing that interface.     The Painter property of WizardPage overrides this     property. If a painter is specified for a page and that page is     the currently displayed page in the wizard, then the page's     painter is used instead of the wizard's painter.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Wizard.SelectedPage">
            <summary>Gets/sets the currently selected page in the wizard.</summary>
            <remarks>You can use this property to select a new page in the wizard. This succeeds only if the page belongs to the wizard, that is, it is added to the wizard's page collection via the  Pages property.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Wizard.SelectedPageIndex">
            <summary>Gets/sets the index of the currently selected page in the wizard page collection.</summary>
            <remarks>You can use this property to select a new page into the wizard. This will throw an exception if the index is out of range.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.Wizard.ShowWaitCursorOnPageChange">
            <summary>Gets/sets whether a wait cursor is shown between wizard page changes.</summary>
            <remarks>If wizard page changes is a time-consuming operation, this property can be set to True to display a wait cursor during the change.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.Wizard.BackButtonClick">
            <summary>Occurs when the Back button is clicked.</summary>
        </member>
        <member name="E:LogicNP.ShellObjects.Wizard.CancelButtonClick">
            <summary>Occurs when the Cancel button is clicked.</summary>
        </member>
        <member name="E:LogicNP.ShellObjects.Wizard.FinishButtonClick">
            <summary>Occurs when the Finish button is clicked.</summary>
        </member>
        <member name="E:LogicNP.ShellObjects.Wizard.HelpButtonClick">
            <summary>Occurs when the Help button is clicked.</summary>
        </member>
        <member name="E:LogicNP.ShellObjects.Wizard.NextButtonClick">
            <summary>Occurs when the Next button is clicked.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.WizardPage">
            <summary>Represents a page in the wizard.</summary>
            <remarks>    The          Caption and          Description properties can be used to set the caption and     description shown in the wizard page header when this page is     the currently selected page. The visibility/enable-state of     wizard buttons can be changed on a per-page basis using the          *ButtonEnabled and          *ButtonVisible properties. The          PageType property specifies whether the page is a Welcome,     Inner or Finish page. The          *ButtonClick events of the page are raised when the wizard     buttons are clicked. The          AfterHide,          AfterShow,          BeforeHide and          BeforeShow events are raised when the page is     selected/deselected as the current page of the wizard.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.BackButtonEnabled">
            <summary>Gets/sets whether the Back button of the wizard is enabled when this page is the currently selected page in the wizard.</summary>
            <remarks>The Back button can be enabled/disabled on a per-page basis using this property. To allow the wizard to automatically enable/disable the button depending on whether the page is the first, last or middle page in the page collection, set this property to Auto.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.BackButtonVisible">
            <summary>Gets/sets whether the Back button of the wizard is visible when this page is the currently selected page in the wizard.</summary>
            <remarks>The Back button can be shown/hidden on a per-page basis using this property. To allow the wizard to automatically show/hide the button depending on whether the page is the first, last or middle page in the page collection, set this property to Auto.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.CancelButtonEnabled">
            <summary>Gets/sets whether the Cancel button of the wizard is enabled when this page is the currently selected page in the wizard.</summary>
            <remarks>The Cancel button can be enabled/disabled on a per-page basis using this property. To allow the wizard to automatically enable/disable the button, set this property to Auto.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.CancelButtonVisible">
            <summary>Gets/sets whether the Cancel button of the wizard is visible when this page is the currently selected page in the wizard.</summary>
            <remarks>The Cancel button can be shown/hidden on a per-page basis using this property. To allow the wizard to automatically show/hide the button, set this property to Auto.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.Caption">
            <summary>Gets/sets the caption of the page.</summary>
            <remarks>The description is shown in the wizard header area when this page is the currently selected page.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.Description">
            <summary>Gets/sets the description of the page.</summary>
            <remarks>The description is shown in the wizard header area when this page is the currently selected page.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.FinishButtonEnabled">
            <summary>Gets/sets whether the Finish button of the wizard is enabled when this page is the currently selected page in the wizard.</summary>
            <remarks>The Finish button can be enabled/disabled on a per-page basis using this property. To allow the wizard to automatically enable/disable the button depending on whether the page is the first, last or middle page in the page collection, set this property to Auto.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.FinishButtonVisible">
            <summary>Gets/sets whether the Finish button of the wizard is visible when this page is the currently selected page in the wizard.</summary>
            <remarks>The Finish button can be shown/hidden on a per-page basis using this property. To allow the wizard to automatically show/hide the button depending on whether the page is the first, last or middle page in the page collection, set this property to Auto.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.HeaderHeight">
            <summary>Gets/sets the height of the wizard header area in pixels.</summary>
            <remarks>The wizard header height can be set on a per-page basis using this property.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.HeaderImage">
            <summary>Gets/sets the image that is shown in the wizard header area.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.HeaderVisible">
            <summary>Gets/sets whether the wizard header should be shown for this page.</summary>
            <remarks>When this property is set to Auto, the wizard automatically determines whether the page header should be displayed for this page based on whether the page is a Welcome, Inner or Finish page.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.HelpButtonEnabled">
            <summary>Gets/sets whether the Help button of the wizard is enabled when this page is the currently selected page in the wizard.</summary>
            <remarks>The Help button can be enabled/disabled on a per-page basis using this property. To allow the wizard to automatically enable/disable the button, set this property to Auto.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.HelpButtonVisible">
            <summary>Gets/sets whether the Help button of the wizard is visible when this page is the currently selected page in the wizard.</summary>
            <remarks>The Help button can be shown/hidden on a per-page basis using this property. To allow the wizard to automatically show/hide the button, set this property to Auto.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.HostFormCaption">
            <summary>Gets/sets the caption of the host form when this page is selected in the wizard.</summary>
            <remarks>This property can be set to automatically change the caption of the host form of the wizard (the form on which the wizard control resides). Every time a new page is displayed by the wizard, the caption of the host form is set to the HostFormCaption property of the page. The caption is set only if the property is not null.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.Index">
            <summary>Gets the index of the page in the wizard page collection.</summary>
            <remarks>If the page does not belong to a wizard, this property returns -1.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.IsSelected">
            <summary>Gets whether the page is the currently selected page in the wizard.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.NextButtonEnabled">
            <summary>Gets/sets whether the Next button of the wizard is enabled when this page is the currently selected page in the wizard.</summary>
            <remarks>The Next button can be enabled/disabled on a per-page basis using this property. To allow the wizard to automatically enable/disable the button depending on whether the page is the first, last or middle page in the page collection, set this property to Auto.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.NextButtonVisible">
            <summary>Gets/sets whether the Next button of the wizard is visible when this page is the currently selected page in the wizard.</summary>
            <remarks>The Next button can be shown/hidden on a per-page basis using this property. To allow the wizard to automatically show/hide the button depending on whether the page is the first, last or middle page in the page collection, set this property to Auto.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.PageType">
            <summary>Gets/sets the page type.</summary>
            <remarks>If the visibility/enabled-state of the wizard buttons is set to Auto, then the PageType property determines which buttons are enabled/disabled and shown/hidden. The wizard header is also shown/hidden depending on the PageType property.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.Painter">
            <summary>Gets/sets the wizard painter for the page.</summary>
            <remarks>This property overrides the Painter property of wizard for this page only. When this page is currently selected in the wizard, then the painter assigned to this page via this property is used to paint the wizard. if this property is null, the wizard-level painter is used and if that is null, then the default  WizardPainterClassic is used.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPage.Wizard">
            <summary>Gets the wizard to which this page belongs.</summary>
            <remarks>This property returns null if the page has not been added to any wizard.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.WizardPage.AfterHide">
            <summary>Occurs after the page is hidden.</summary>
            <remarks>A page is hidden when a new page is selected in the wizard.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.WizardPage.AfterShow">
            <summary>Occurs after the page is shown.</summary>
            <remarks>The page is shown as a result of it being selected in the wizard.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.WizardPage.BackButtonClick">
            <summary>Occurs after the Back button is clicked.</summary>
        </member>
        <member name="E:LogicNP.ShellObjects.WizardPage.BeforeHide">
            <summary>Occurs before a page is about to be hidden.</summary>
            <remarks>A page is hidden when a new page is selected in the wizard. To prevent the page change, you can set the Cancel property of  WizardPageCancelEventArgs class to False.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.WizardPage.BeforeShow">
            <summary>Occurs before the page is about to be shown.</summary>
            <remarks>The page is shown as a result of it being selected in the wizard. To prevent the page change, you can set the Cancel property of  WizardPageCancelEventArgs class to False.</remarks>
        </member>
        <member name="E:LogicNP.ShellObjects.WizardPage.CancelButtonClick">
            <summary>Occurs after the Cancel button is clicked.</summary>
        </member>
        <member name="E:LogicNP.ShellObjects.WizardPage.FinishButtonClick">
            <summary>Occurs after the Finish button is clicked.</summary>
        </member>
        <member name="E:LogicNP.ShellObjects.WizardPage.HelpButtonClick">
            <summary>Occurs after the Help button is clicked.</summary>
        </member>
        <member name="E:LogicNP.ShellObjects.WizardPage.NextButtonClick">
            <summary>Occurs after the Next button is clicked.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.WizardPageCancelEventArgs">
            <summary>Provides data for the  BackButtonClick and  NextButtonClick events of Wizard and  WizardPage.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPageCancelEventArgs.NewPage">
            <summary>Gets/sets the new page that will be displayed in the wizard.</summary>
            <remarks>This property can be accessed to determined the new page that will be displayed in the wizard in response to the click of the Back/Next button. You can set this property to a new page if you want to change the page that will displayed by the wizard by default.</remarks>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPageCancelEventArgs.Reason">
            <summary>Gets the cause of the page change.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.WizardPageCollection">
            <summary>Represents a collection of wizard pages.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.WizardPageCollection.Add(LogicNP.ShellObjects.WizardPage)">
            <summary>Adds the specified wizard page to the collection.</summary>
            <returns>The index of the added wizard page in the collection.</returns>
            <param name="page">The page to be added.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.WizardPageCollection.AddRange(LogicNP.ShellObjects.WizardPage[])">
            <summary>Adds the specified array of wizard pages to the collection.</summary>
            <param name="pageArray">The array of wizard pages to be added.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.WizardPageCollection.Clear">
            <summary>Removes all wizard pages from the collection.</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.WizardPageCollection.Contains(LogicNP.ShellObjects.WizardPage)">
            <summary>Determines whether the collection contains the specified wizard page.</summary>
            <returns>True if the collection contains the specified page, False otherwise.</returns>
            <param name="page">The wizard page to search for.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.WizardPageCollection.GetEnumerator">
            <summary>Retrieves an enumerator for the collection</summary>
        </member>
        <member name="M:LogicNP.ShellObjects.WizardPageCollection.IndexOf(LogicNP.ShellObjects.WizardPage)">
            <summary>Gets the zero-based index of the specified wizard page in the collection.</summary>
            <returns>The index of the page in the collection or -1 if the page is not in the collection.</returns>
            <param name="page">The page whose index is to be queried.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.WizardPageCollection.Insert(System.Int32,LogicNP.ShellObjects.WizardPage)">
            <summary>Inserts the specified page in the collection at the specified index.</summary>
            <param name="index">The index where the page should be added.</param>
            <param name="page">The page which is to be added.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.WizardPageCollection.Remove(LogicNP.ShellObjects.WizardPage)">
            <summary>Removes the specified page from the collection.</summary>
            <param name="page">The page which is to be removed.</param>
        </member>
        <member name="M:LogicNP.ShellObjects.WizardPageCollection.RemoveAt(System.Int32)">
            <summary>Removes the page at the specified index from the collection.</summary>
            <param name="index">The index of the page to remove.</param>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPageCollection.Count">
            <summary>Gets the number of pages in the collection.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.WizardPaintButtonEventArgs">
            <summary>Provides data for painting wizard buttons.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPaintButtonEventArgs.Button">
            <summary>Gets the button which is being painted.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.WizardPaintEventArgs">
            <summary>Provides data for painting the wizard.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPaintEventArgs.Bounds">
            <summary>Gets the bounds in which painting should be done.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPaintEventArgs.Graphics">
            <summary>Gets the Graphics object on which painting should be done.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPaintEventArgs.Wizard">
            <summary>Gets the wizard which is being painted.</summary>
        </member>
        <member name="P:LogicNP.ShellObjects.WizardPaintEventArgs.WizardPage">
            <summary>Gets the wizard page which is being painted.</summary>
            <remarks>This value is valid only for the  PaintPage method of  IWizardPainter interface</remarks>
        </member>
        <member name="T:LogicNP.ShellObjects.ContextMenuEventHandler">
            <summary>Represents the method that will handle the ContextMenuPopup event of  ShellNotifyIcon and  ShellPopup.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN.</remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A  ContextMenuEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.ShellObjects.ContextMenuItemEventHandler">
            <summary>Represents the method that will handle the ContextMenuItemSelect event of  ShellNotifyIcon and  ShellPopup.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN.</remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A  ContextMenuItemEventArgs that contains the event data</param>
        </member>
        <member name="T:LogicNP.ShellObjects.ControlResizeEventHandler">
            <summary>Represents the method that will handle the  ControlResize event of Resizer class.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A  ControlResizeEventArgs that contains the event data</param>
        </member>
        <member name="T:LogicNP.ShellObjects.MouseHookEventHandler">
            <summary>Represents the method that will handle mouse events of     SystemHook class.</summary>
        </member>
        <member name="T:LogicNP.ShellObjects.NewInstanceEventHandler">
            <summary>Represents the method that will handle the  NewInstance event of  SingleInstanceComponent class.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A  NewInstanceEventArgs that contains the event data</param>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellPopupCancelEventHandler">
            <summary>Represents the method that will handle various events of the  ShellPopupNotification control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN.</remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A  ShellPopupCancelEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellPopupContextMenuEventHandler">
            <summary>Represents the method that will handle the  ContextMenuPopup event of the  ShellPopupNotification control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN.</remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A  ShellPopupContextMenuEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellPopupContextMenuItemEventHandler">
            <summary>Represents the method that will handle the  ContextMenuItemSelect event of the  ShellPopupNotification control</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN.</remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A  ShellPopupContextMenuItemEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellPopupEventHandler">
            <summary>Represents the method that will handle the various events of the  ShellPopupNotification control</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN.</remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A  ShellPopupEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.ShellObjects.ShellPopupMouseEventHandler">
            <summary>Represents the method that will handle the  MouseMove,  MouseUp and  MouseDown events of the  ShellPopupNotification control.</summary>
            <returns>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A  ShellPopupMouseEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogButtonClickEventHandler">
            <summary>Represents the method that will handle the  ButtonClick event of  TaskDialog class.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A  TaskDialogButtonClickEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogCheckboxCheckEventHandler">
            <summary>Represents the method that will handle the  CheckboxCheck event of  TaskDialog class.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A  TaskDialogCheckboxCheckEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogExpandoControlClickEventHandler">
            <summary>Represents the method that will handle the  ExpandoControlClick event of  TaskDialog class.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A  TaskDialogExpandoControlClickEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogHyperLinkClickEventHandler">
            <summary>Represents the method that will handle the  HyperLinkClick event of  TaskDialog class.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A  TaskDialogHyperLinkClickEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogRadioButtonClickEventHandler">
            <summary>Represents the method that will handle the  RadioButtonClick event of  TaskDialog class.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A  TaskDialogRadioButtonClickEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.ShellObjects.TaskDialogTimerTickEventHandler">
            <summary>Represents the method that will handle the  TimerTick event of  TaskDialog class.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A  TaskDialogTimerTickEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.ShellObjects.WizardPageCancelEventHandler">
            <summary>Represents the method that will handle the  BackButtonClick and  NextButtonClick events of Wizard and  WizardPage.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A  WizardPageCancelEventArgs that contains the event data.</param>
        </member>
    </members>
</doc>
