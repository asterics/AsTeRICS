<project name="APE.imported" basedir="." xmlns:fx="javafx:com.sun.javafx.tools.ant">
	<!-- define macro for easier finding paths:
	searches for a filename pattern in a given dir and returns the first element by setting the given property name.
	 -->
    <macrodef name="findfirstpath">
      <attribute name="dir"/>
      <attribute name="name"/>
      <attribute name="property"/>
      <sequential>
        <pathconvert property="@{property}" setonempty="false">
          <first>
            <fileset dir="@{dir}" erroronmissingdir="false">	        	
	          <include name="@{name}"/>
	        </fileset>
      	  </first>
        </pathconvert>
      </sequential>
    </macrodef>	
	
	<property name="APE.propertiesFile" value="APE.properties"></property>
	<property name="APE.optionalServicesFile" value="" />
	
	<loadproperties srcFile="${APE.propertiesFile}" />
	
	<!-- set default value of prop -->
	<property name="fx.deploy.verbose" value="false"/>
	
	<condition property="APE.buildDir" value="build/">		
		<not>
			<isset property="APE.buildDir" />
		</not>
	</condition>
	
	<property name="build.merged" location="${APE.buildDir}/merged" />
	<property name="build.merged.ARE" location="${build.merged}/bin/ARE" />
	<property name="build.deploy" location="${APE.buildDir}/deploy" />
	
	<!-- 
	Define os.name for Bundle-NativeCode statement in MANIFEST of plugins:
	As on Windows the alias os.name (win32) is not correctly matched, we have to manually define the property
	so that the native bundles start on windows 10.
	@see https://github.com/asterics/AsTeRICS/issues/17
	
	Note: Maybe we should also set the alias for Linux and Mac manually, because here we hardcode the
	runtime os.name at build time. So the os.names could actually differ, although according to the list of os.names 
	(https://www.osgi.org/developer/specifications/reference/)
	for Linux there is only 1 name and for Mac OSX also.
	-->
	<condition property="org.osgi.framework.os.name" value="win32" else="${os.name}">
		<os family="windows" />
	</condition>
	
	<!-- the build platform is actually also the target platform, so we can differ the services files configuration -->
	<condition property="APE.isWindows">
		<os family="windows" />
	</condition>
	<condition property="APE.isLinux">
		<and>
			<os family="unix" />
			<not>
				<os family="mac"/>
			</not>
		</and>
	</condition>
	<condition property="APE.isMacOSX">
		<os family="mac" />
	</condition>
		
	<condition property="APE.targetOS" value="windows">
		<os family="windows" />
	</condition>
	<condition property="APE.targetOS" value="linux">
		<and>
			<os family="unix" />
			<not>
				<os family="mac"/>
			</not>
		</and>
	</condition>
	<condition property="APE.targetOS" value="macosx">
		<os family="mac" />
	</condition>


	<!-- create platform dependent property value for services startup when starting the ARE -->
	<property name="APE.servicesFiles" value="${APE.optionalServicesFile}" />

	<!-- if property is not set, set it to false -->
	<condition property="APE.embedJava" value="false">
		<not>
			<isset property="APE.embedJava" />
		</not>
	</condition>

	<!-- save user setting of the property. to be used in the findjava and run targets -->	
	<condition property="fx.platform.basedir.orig" value="${fx.platform.basedir}">		
		<isset property="fx.platform.basedir" />
	</condition>
	
	<!-- if fx.platform.basedir is not set, java.home will be used as platform for embedding java -->
	<condition property="fx.platform.basedir" value="${java.home}">		
		<not>
			<isset property="fx.platform.basedir" />
		</not>
	</condition>
		
	<!-- only if APE.embedJava=true the JRE of the configured platform.basedir will be embedded -->
	<condition property="APE.embedJava.fx.platform.basedir" value="${fx.platform.basedir}" else="">
		<istrue value="${APE.embedJava}"/>
	</condition>
	
	<!-- in case of embeddedjava add a postfix to the application name -->
	<condition property="APE.fx.deploy.outfile" value="${fx.application.name}-javaembedded" else="${fx.application.name}">
		<istrue value="${APE.embedJava}"/>
	</condition>	
	
	<!-- if ARE.baseURI is not set, try to find a default value in the following order:
	1) dependencies/AsTeRICS/bin/ARE (if Asterics is added as submodule)
	2) ../AsTeRICS/bin/ARE (if it's an APE projectdir withouth FABI and FLipMouse folder structure)
	3) ../../AsTeRICS/bin/ARE (if it's an AT solution folder structure)
	4) C:/Program Files (x86)/AsTeRICS/ARE/ (if there is an Asterics installation on windows)
	-->
	<condition property="ARE.baseURI" value="dependencies/AsTeRICS/bin/ARE/">
		<available file="dependencies/AsTeRICS/bin/ARE/" type="dir"/>
	</condition>
	<condition property="ARE.baseURI" value="../AsTeRICS/bin/ARE/">
		<available file="../AsTeRICS/bin/ARE/" type="dir"/>
	</condition>
	<condition property="ARE.baseURI" value="../../AsTeRICS/bin/ARE/">
		<available file="../../AsTeRICS/bin/ARE/" type="dir"/>
	</condition>
	<condition property="ARE.baseURI" value="C:/Program Files (x86)/AsTeRICS/ARE/">
		<available file="C:/Program Files (x86)/AsTeRICS/ARE/" type="dir"/>
	</condition>
	
	<!-- if ARE.baseURI is not set assume that APE is located in the parent folder of basedir -->
	<condition property="APE.baseURI" else="${ARE.baseURI}/../APE/" value="${basedir}/../">
		<not>
			<isset property="ARE.baseURI" />
		</not>
	</condition>
	
	<!-- check if the used ARE.baseURI is binary only (e.g. Asterics 2.8 installation or a source code repo -->
	<available file="${ARE.baseURI}/../../ARE/build.xml" property="ARE.baseURI.is.snapshot"/>

	<!-- tries to detect the installation path of a jre with 32bit architecture -->
	<findfirstpath dir="C:/Program Files (x86)/Java" name="**/java.exe" property="APE.jre32.bin.path.windows"/>		
	<!-- set APE.jre.bin.path to the path of a 32bit JRE, if the property fx.platform.basedir was not set manually in APE.properties
	and targetOS is windows and a 32bit JRE could be found with the target findfirstpath. Otherwise set the property to the value of either fx.platform.basedir or JAVA_HOME, whatever was set.
	-->
	<condition property="APE.jre.bin.path" value="${APE.jre32.bin.path.windows}" else="${fx.platform.basedir}/bin/java">
		<and>
			<isset property="APE.jre32.bin.path.windows" />
			<isset property="APE.isWindows"/>
			<not>
				<isset property="fx.platform.basedir.orig" />			
			</not>
		</and>
	</condition>
    <echo>  Using JRE path: ${APE.jre.bin.path}</echo>

	
	<!-- Set some defaults if the values were not set so far, neither as -D property nor in APE.properties file.-->
	<condition property="APE.buildMode" else="${APE.buildMode}" value="devel">
		<not>
			<isset property="APE.buildMode" />
		</not>
	</condition>
	<condition property="APE.dataCopyMode" else="${APE.dataCopyMode}" value="ALL">
		<not>
			<isset property="APE.dataCopyMode" />
		</not>
	</condition>
	<condition property="APE.webCopyMode" else="${APE.webCopyMode}" value="ALL">
		<not>
			<isset property="APE.webCopyMode" />
		</not>
	</condition>
	<!--
	<echoproperties>
	</echoproperties>
	-->

	<!-- clean temporary files and folder -->
	<target name="clean" depends="cleanup" description="Clean temporary folder and files e.g. build and tmp">
		<delete includeemptydirs="true" dir="tmp/">
		</delete>
	</target>

	<target name="init-fx-tasks">
		<path id="fxant">
			<filelist>
				<file name="${java.home}\..\lib\ant-javafx.jar" />
				<file name="${java.home}\lib\jfxrt.jar" />
				<file name="${basedir}" />
			</filelist>
		</path>

		<taskdef resource="com/sun/javafx/tools/ant/antlib.xml" uri="javafx:com.sun.javafx.tools.ant" classpathref="fxant" />
	</target>

	<!-- cleans up the build folder only -->
	<target name="cleanup">
		<delete includeemptydirs="true" failonerror="false" dir="${APE.buildDir}/">
		</delete>
	</target>
	<target name="setup-staging-area">
		<mkdir dir="${build.deploy}" />
		<delete failonerror="false">
			<fileset dir="${build.merged.ARE}" includes="**/*.log" />
		</delete>
		<delete failonerror="false">
			<fileset dir="${build.merged.ARE}/profile/org.eclipse.osgi" />
		</delete>
		<delete failonerror="false" file="${build.merged.ARE}/profile/loader_componentlist.ini">
		</delete>
	</target>
		
	<!-- calls the javafx deployment tasks and creates the requested installers -->
	<target name="make-installer-only" depends="init-fx-tasks">
		<fx:resources id="appRes">
			<fx:fileset dir="${build.merged.ARE}" />
			<fx:fileset dir="${build.merged.ARE}" type="license" includes="LICENSE" />
		</fx:resources>

		
		<fx:deploy verbose="${fx.deploy.verbose}" embedJNLP="false" extension="false" includeDT="false" offlineAllowed="true" outdir="${build.deploy}" outfile="${fx.application.name}" nativeBundles="${fx.deploy.nativeBundles}" updatemode="background">
			<fx:application id="${fx.application.name}" name="${fx.application.name}" mainClass="org.eclipse.core.runtime.adaptor.EclipseStarter" version="${fx.application.version}" toolkit="swing" />
			<fx:preferences shortcut="${fx.preferences.shortcut}" install="${fx.preferences.install}" menu="${fx.preferences.menu}" />

			<fx:platform basedir="${APE.embedJava.fx.platform.basedir}">				
				<property name="osgi.configuration.area" value="profile" />
				<property name="osgi.clean" value="true" />
				<property name="org.osgi.framework.bootdelegation" value="*" />
				<property name="org.osgi.framework.system.packages.extra" value="sun.misc" />
				<property name="Ansi" value="true" />
				<property name="java.util.logging.config.file" value="logging.properties" />
				<!--
				<property name="eu.asterics.ARE.startModel" value="autostart.acs" />
				-->
				<property name="eu.asterics.ARE.ServicesFiles" value="${APE.servicesFiles}" />
				<property name="org.osgi.framework.os.name" value="${org.osgi.framework.os.name}"/>
			</fx:platform>
		
			<fx:resources refid="appRes" />
			<fx:info title="${fx.info.title}" vendor="${fx.info.vendor}" description="${fx.info.description}" license="${fx.info.license}" category="${fx.info.category}" />
		</fx:deploy>
		
		<!-- Finally, rename the outfile in the case of APE.embedJava=true.
		This is a dirty solution but it is needed because the fx:deploy.outfile attribute does not work as expected
		-->

		<subant target="make-installer-only-windows" buildpath="." antfile="build.xml"/>
		<subant target="make-installer-only-linux" buildpath="." antfile="build.xml"/>
		<subant target="make-installer-only-macosx" buildpath="." antfile="build.xml"/>

	</target>

	<target name="make-installer-only-windows" if="APE.isWindows">
		<move verbose="true" failonerror="false" file="${build.deploy}/bundles/${fx.application.name}-${fx.application.version}.exe" tofile="${build.deploy}/bundles/${APE.fx.deploy.outfile}-${fx.application.version}.exe"/>
		<move verbose="true" failonerror="false" file="${build.deploy}/bundles/${fx.application.name}-${fx.application.version}.msi" tofile="${build.deploy}/bundles/${APE.fx.deploy.outfile}-${fx.application.version}.msi"/>
	</target>

	<target name="make-installer-only-linux" if="APE.isLinux">
		<move verbose="true" failonerror="false" file="${build.deploy}/bundles/${fx.application.name}-${fx.application.version}.deb" tofile="${build.deploy}/bundles/${APE.fx.deploy.outfile}-${fx.application.version}.deb"/>
		<move verbose="true" failonerror="false" file="${build.deploy}/bundles/${fx.application.name}-${fx.application.version}-1.i386.rpm" tofile="${build.deploy}/bundles/${APE.fx.deploy.outfile}-${fx.application.version}-1.i386.rpm"/>
	</target>
	<target name="make-installer-only-macosx" if="APE.isMacOSX">
		<move verbose="true" failonerror="false" file="${build.deploy}/bundles/${fx.application.name}-${fx.application.version}.dmg" tofile="${build.deploy}/bundles/${APE.fx.deploy.outfile}-${fx.application.version}.dmg"/>
		<move verbose="true" failonerror="false" file="${build.deploy}/bundles/${fx.application.name}-${fx.application.version}.pkg" tofile="${build.deploy}/bundles/${APE.fx.deploy.outfile}-${fx.application.version}.pkg"/>		
	</target>

	<!-- call APE tool from build script to copy AsTeRICS resources to ${build.merged.ARE} -->
	<target name="APE-copy" description="Build APE project: The result can be found in the build/merged folder.">
		<java jar="${APE.baseURI}/APE.jar" fork="true" failonerror="true">
		    <!-- 
			If the user manually overrides property values with -D on the command line this is only allowed for the following properties.
			The others may only be set in the file APE.properties 
			Ensure that the APE-copy command has the same property values as the ant build files in case of overriding them.
			-->
			<sysproperty key="APE.projectDir" value="${basedir}"/>
			<sysproperty key="ARE.baseURI" value="${ARE.baseURI}"/>
			<sysproperty key="APE.buildDir" value="${APE.buildDir}"/>
			<sysproperty key="APE.dataCopyMode" value="${APE.dataCopyMode}"/>
			<sysproperty key="APE.webCopyMode" value="${APE.webCopyMode}"/>			
			<sysproperty key="APE.buildMode" value="${APE.buildMode}"/>	
		</java>	
		<!-- fix cr and lf and set execution permissions -->
		<fixcrlf srcdir="${build.merged.ARE}" includes="*.sh"/>
		<chmod dir="${build.merged.ARE}" includes="*.sh" perm="ugo+rx" failonerror="false"/>			
	</target>

	<!-- call APE tool from build script to copy AsTeRICS resources to ${build.merged.ARE} -->
	<target name="APE-copy-release" description="Build APE project for deployment: The result can be found in the build/merged folder." depends="cleanup, setup-staging-area, build-dependencies-release">
		<java jar="${APE.baseURI}/APE.jar" fork="true" failonerror="true">
		    <!-- 
			If the user manually overrides property values with -D on the command line this is only allowed for the following properties.
			The others may only be set in the file APE.properties 
			Ensure that the APE-copy command has the same property values as the ant build files in case of overriding them.
			-->
			<sysproperty key="APE.projectDir" value="${basedir}"/>
			<sysproperty key="ARE.baseURI" value="${ARE.baseURI}"/>
			<sysproperty key="APE.buildDir" value="${APE.buildDir}"/>
			<sysproperty key="APE.dataCopyMode" value="${APE.dataCopyMode}"/>
			<sysproperty key="APE.webCopyMode" value="${APE.webCopyMode}"/>
			<!-- force buildMode release to ensure that the merged folder is cleaned and only needed plugins are copied -->
			<sysproperty key="APE.buildMode" value="release"/>	
		</java>	
		<!-- fix cr and lf and set execution permissions -->
		<fixcrlf srcdir="${build.merged.ARE}" includes="*.sh"/>
		<chmod dir="${build.merged.ARE}" includes="*.sh" perm="ugo+rx" failonerror="false"/>			
	</target>

	<!-- build ARE if the ARE.baseURI points to an Astercis sourcecode repository -->
	<target name="build-dependencies" depends="cleanup" description="Builds an AsTeRICS snapshot, if ARE.baseURI points to one." if="ARE.baseURI.is.snapshot">
		<subant target="buildAllNoCleanNoCopyLicenses" buildpath="${ARE.baseURI}/../../ARE/"/>		
    </target>

	<!-- Build dependencies and APE project. -->
	<target name="build-all" depends="build-dependencies,APE-copy" description="Builds the dependencies and then executes APE-copy.">
    </target>

	<!-- build ARE if the ARE.baseURI points to an Astercis sourcecode repository -->
	<target name="build-dependencies-release" description="Builds an AsTeRICS snapshot with buildAll-release, if ARE.baseURI points to one." if="ARE.baseURI.is.snapshot">
		<!-- Ensure to call buildAll-release target of AsTERICS framework -->
		<subant target="buildAll-release" buildpath="${ARE.baseURI}/../../"/>
    </target>	

	<target name="run" depends="build-all" description="Peforms build-all (builds all dependencies) and starts the ARE.">
		<condition property="osgi" value="${build.merged.ARE}/org.eclipse.osgi_3.14.0.v20190517-1309.jar" else="${build.merged.ARE}/org.eclipse.osgi_3.6.0.v20100517.jar">
			<available file="${build.merged.ARE}/org.eclipse.osgi_3.14.0.v20190517-1309.jar"/>
		</condition>

		<java jvm="${APE.jre.bin.path}" jar="${osgi}" dir="${build.merged.ARE}" fork="true" failonerror="true">			
			<sysproperty key="osgi.configuration.area" value="profile" />
			<sysproperty key="osgi.clean" value="true" />
			<sysproperty key="org.osgi.framework.bootdelegation" value="*" />
			<sysproperty key="org.osgi.framework.system.packages.extra" value="sun.misc" />
			<sysproperty key="Ansi" value="true" />
			<sysproperty key="java.util.logging.config.file" value="logging.properties" />
			<!--
			<sysproperty key="eu.asterics.ARE.startModel" value="autostart.acs" />
			-->
			<sysproperty key="eu.asterics.ARE.ServicesFiles" value="${APE.servicesFiles}" />
			<sysproperty key="org.osgi.framework.os.name" value="${org.osgi.framework.os.name}"/>
		</java>	
	</target>

	<target name="run-debug" depends="build-all" description="Peforms build-all (builds all dependencies) and starts the ARE with debug options (port 1044).">
		<condition property="osgi" value="${build.merged.ARE}/org.eclipse.osgi_3.14.0.v20190517-1309.jar" else="${build.merged.ARE}/org.eclipse.osgi_3.6.0.v20100517.jar">
			<available file="${build.merged.ARE}/org.eclipse.osgi_3.14.0.v20190517-1309.jar"/>
		</condition>

		<java jvm="${APE.jre.bin.path}" jar="${osgi}" dir="${build.merged.ARE}" fork="true" failonerror="true">			
			<sysproperty key="osgi.configuration.area" value="profile" />
			<sysproperty key="osgi.clean" value="true" />
			<sysproperty key="org.osgi.framework.bootdelegation" value="*" />
			<sysproperty key="org.osgi.framework.system.packages.extra" value="sun.misc" />
			<sysproperty key="Ansi" value="true" />
			<sysproperty key="java.util.logging.config.file" value="logging.properties" />
			<sysproperty key="eu.asterics.mw.services.AstericsErrorHandling.consoleLogLevel" value="FINE"/>
			<!--
			<sysproperty key="eu.asterics.ARE.startModel" value="autostart.acs" />
			-->
			<sysproperty key="eu.asterics.ARE.ServicesFiles" value="${APE.servicesFiles}" />		
			<sysproperty key="org.osgi.framework.os.name" value="${org.osgi.framework.os.name}"/>
			<jvmarg value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1044"/>
		</java>
	</target>
	
	<target name="run-quick" depends="APE-copy" description="Copies custom files (calls APE-copy) and starts the ARE. This target is for quick testing of changes in the custom folder.">
		<condition property="osgi" value="${build.merged.ARE}/org.eclipse.osgi_3.14.0.v20190517-1309.jar" else="${build.merged.ARE}/org.eclipse.osgi_3.6.0.v20100517.jar">
			<available file="${build.merged.ARE}/org.eclipse.osgi_3.14.0.v20190517-1309.jar"/>
		</condition>

		<java jvm="${APE.jre.bin.path}" jar="${osgi}" dir="${build.merged.ARE}" fork="true" failonerror="true">			
			<sysproperty key="osgi.configuration.area" value="profile" />
			<sysproperty key="osgi.clean" value="true" />
			<sysproperty key="org.osgi.framework.bootdelegation" value="*" />
			<sysproperty key="org.osgi.framework.system.packages.extra" value="sun.misc" />
			<sysproperty key="Ansi" value="true" />
			<sysproperty key="java.util.logging.config.file" value="logging.properties" />
			<sysproperty key="eu.asterics.mw.services.AstericsErrorHandling.consoleLogLevel" value="FINE"/>
			<!--
			<sysproperty key="eu.asterics.ARE.startModel" value="autostart.acs" />
			-->
			<sysproperty key="eu.asterics.ARE.ServicesFiles" value="${APE.servicesFiles}" />		
			<sysproperty key="org.osgi.framework.os.name" value="${org.osgi.framework.os.name}"/>
		</java>	
	</target>	

	<!-- test macro findfirstpath -->
	<target name="test-findfirstpath">
	    <findfirstpath dir="C:/Program Files (x86)/AsTeRICS/Java" name="**/java.exe" property="match.1"/>
	    <echo message="found: ${match.1}"/>
	    <findfirstpath dir="custom" name="**/*.md" property="match.2"/>
	    <echo message="found: ${match.2}"/>
    </target>	
</project>
