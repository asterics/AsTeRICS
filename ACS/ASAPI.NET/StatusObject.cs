/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Asterics.ASAPI {

    [Serializable]
    public partial class StatusObject : TBase {
        private string _status;
        private string _involvedComponentID;
        private string _errorMsg;

        public string Status {
            get {
                return _status;
            }
            set {
                __isset.status = true;
                this._status = value;
            }
        }

        public string InvolvedComponentID {
            get {
                return _involvedComponentID;
            }
            set {
                __isset.involvedComponentID = true;
                this._involvedComponentID = value;
            }
        }

        public string ErrorMsg {
            get {
                return _errorMsg;
            }
            set {
                __isset.errorMsg = true;
                this._errorMsg = value;
            }
        }


        public Isset __isset;
        [Serializable]
        public struct Isset {
            public bool status;
            public bool involvedComponentID;
            public bool errorMsg;
        }

        public StatusObject() {
        }

        public void Read(TProtocol iprot) {
            TField field;
            iprot.ReadStructBegin();
            while (true) {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop) {
                    break;
                }
                switch (field.ID) {
                    case 1:
                        if (field.Type == TType.String) {
                            Status = iprot.ReadString();
                        } else {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == TType.String) {
                            InvolvedComponentID = iprot.ReadString();
                        } else {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 3:
                        if (field.Type == TType.String) {
                            ErrorMsg = iprot.ReadString();
                        } else {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot) {
            TStruct struc = new TStruct("StatusObject");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (Status != null && __isset.status) {
                field.Name = "status";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Status);
                oprot.WriteFieldEnd();
            }
            if (InvolvedComponentID != null && __isset.involvedComponentID) {
                field.Name = "involvedComponentID";
                field.Type = TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(InvolvedComponentID);
                oprot.WriteFieldEnd();
            }
            if (ErrorMsg != null && __isset.errorMsg) {
                field.Name = "errorMsg";
                field.Type = TType.String;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(ErrorMsg);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString() {
            StringBuilder sb = new StringBuilder("StatusObject(");
            sb.Append("Status: ");
            sb.Append(Status);
            sb.Append(",InvolvedComponentID: ");
            sb.Append(InvolvedComponentID);
            sb.Append(",ErrorMsg: ");
            sb.Append(ErrorMsg);
            sb.Append(")");
            return sb.ToString();
        }

    }

}
