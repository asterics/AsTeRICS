/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Asterics.ASAPI {
    public class AsapiServer {
        public interface Iface {
            List<string> GetAvailableComponentTypes();
            string GetModel();
            void DeployModel(string modelInXml);
            void DeployFile(string filename);
            void DeployModelWithFile(string filename, string modelInXml);
            void NewModel();
            void RunModel();
            void PauseModel();
            void StopModel();
            List<string> GetComponents();
            List<string> GetChannels(string componentID);
            void InsertComponent(string componentID, string componentType);
            void RemoveComponent(string componentID);
            List<string> GetAllPorts(string componentID);
            List<string> GetInputPorts(string componentID);
            List<string> GetOutputPorts(string componentID);
            void InsertChannel(string channelID, string sourceComponentID, string sourcePortID, string targetComponentID, string targetPortID);
            void RemoveChannel(string channelID);
            List<string> GetComponentPropertyKeys(string componentID);
            string GetComponentProperty(string componentID, string key);
            string SetComponentProperty(string componentID, string key, string value);
            List<string> GetPortPropertyKeys(string componentID, string portID);
            string GetPortProperty(string componentID, string portID, string key);
            string SetPortProperty(string componentID, string portID, string key, string value);
            List<string> GetChannelPropertyKeys(string channelID);
            string GetChannelProperty(string channelID, string key);
            string SetChannelProperty(string channelID, string key, string value);
            string RegisterRemoteConsumer(string sourceComponentID, string sourceOutputPortID);
            void UnregisterRemoteConsumer(string remoteConsumerID);
            string RegisterRemoteProducer(string targetComponentID, string targetInputPortID);
            void UnregisterRemoteProducer(string remoteProducerID);
            byte[] PollData(string courceComponentID, string sourceOutputPortID);
            void SendData(string targetComponentID, string targetInputPortID, byte[] data);
            string RegisterLogListener();
            void UnregisterLogListener(string logListenerID);
            void storeModel(string modelInXML, string filename);
            bool deleteModelFile(string filename);
            List<string> listAllStoredModels();
            string getModelFromFile(string filename);
            string getLogFile();
            List<StatusObject> QueryStatus(bool fullList);
            List<string> getRuntimePropertyList(string componentID, string key);
            List<string> getBundleDescriptors();
            int Ping();
        }

        public class Client : Iface {
            public Client(TProtocol prot)
                : this(prot, prot) {
            }

            public Client(TProtocol iprot, TProtocol oprot) {
                iprot_ = iprot;
                oprot_ = oprot;
            }

            protected TProtocol iprot_;
            protected TProtocol oprot_;
            protected int seqid_;

            public TProtocol InputProtocol {
                get { return iprot_; }
            }
            public TProtocol OutputProtocol {
                get { return oprot_; }
            }


            public List<string> GetAvailableComponentTypes() {
                send_GetAvailableComponentTypes();
                return recv_GetAvailableComponentTypes();
            }

            public void send_GetAvailableComponentTypes() {
                oprot_.WriteMessageBegin(new TMessage("GetAvailableComponentTypes", TMessageType.Call, seqid_));
                GetAvailableComponentTypes_args args = new GetAvailableComponentTypes_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public List<string> recv_GetAvailableComponentTypes() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetAvailableComponentTypes_result result = new GetAvailableComponentTypes_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAvailableComponentTypes failed: unknown result");
            }

            public string GetModel() {
                send_GetModel();
                return recv_GetModel();
            }

            public void send_GetModel() {
                oprot_.WriteMessageBegin(new TMessage("GetModel", TMessageType.Call, seqid_));
                GetModel_args args = new GetModel_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public string recv_GetModel() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetModel_result result = new GetModel_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetModel failed: unknown result");
            }

            public void DeployModel(string modelInXml) {
                send_DeployModel(modelInXml);
                recv_DeployModel();
            }

            public void send_DeployModel(string modelInXml) {
                oprot_.WriteMessageBegin(new TMessage("DeployModel", TMessageType.Call, seqid_));
                DeployModel_args args = new DeployModel_args();
                args.ModelInXml = modelInXml;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_DeployModel() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                DeployModel_result result = new DeployModel_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                return;
            }

            public void DeployFile(string filename) {
                send_DeployFile(filename);
                recv_DeployFile();
            }

            public void send_DeployFile(string filename) {
                oprot_.WriteMessageBegin(new TMessage("DeployFile", TMessageType.Call, seqid_));
                DeployFile_args args = new DeployFile_args();
                args.Filename = filename;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_DeployFile() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                DeployFile_result result = new DeployFile_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                return;
            }

            public void DeployModelWithFile(string filename, string modelInXml) {
                send_DeployModelWithFile(filename, modelInXml);
                recv_DeployModelWithFile();
            }

            public void send_DeployModelWithFile(string filename, string modelInXml) {
                oprot_.WriteMessageBegin(new TMessage("DeployModelWithFile", TMessageType.Call, seqid_));
                DeployModelWithFile_args args = new DeployModelWithFile_args();
                args.Filename = filename;
                args.ModelInXml = modelInXml;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_DeployModelWithFile() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                DeployModelWithFile_result result = new DeployModelWithFile_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                return;
            }

            public void NewModel() {
                send_NewModel();
                recv_NewModel();
            }

            public void send_NewModel() {
                oprot_.WriteMessageBegin(new TMessage("NewModel", TMessageType.Call, seqid_));
                NewModel_args args = new NewModel_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_NewModel() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                NewModel_result result = new NewModel_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                return;
            }

            public void RunModel() {
                send_RunModel();
                recv_RunModel();
            }

            public void send_RunModel() {
                oprot_.WriteMessageBegin(new TMessage("RunModel", TMessageType.Call, seqid_));
                RunModel_args args = new RunModel_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_RunModel() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                RunModel_result result = new RunModel_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                return;
            }

            public void PauseModel() {
                send_PauseModel();
                recv_PauseModel();
            }

            public void send_PauseModel() {
                oprot_.WriteMessageBegin(new TMessage("PauseModel", TMessageType.Call, seqid_));
                PauseModel_args args = new PauseModel_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_PauseModel() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                PauseModel_result result = new PauseModel_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                return;
            }

            public void StopModel() {
                send_StopModel();
                recv_StopModel();
            }

            public void send_StopModel() {
                oprot_.WriteMessageBegin(new TMessage("StopModel", TMessageType.Call, seqid_));
                StopModel_args args = new StopModel_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_StopModel() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                StopModel_result result = new StopModel_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                return;
            }

            public List<string> GetComponents() {
                send_GetComponents();
                return recv_GetComponents();
            }

            public void send_GetComponents() {
                oprot_.WriteMessageBegin(new TMessage("GetComponents", TMessageType.Call, seqid_));
                GetComponents_args args = new GetComponents_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public List<string> recv_GetComponents() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetComponents_result result = new GetComponents_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetComponents failed: unknown result");
            }

            public List<string> GetChannels(string componentID) {
                send_GetChannels(componentID);
                return recv_GetChannels();
            }

            public void send_GetChannels(string componentID) {
                oprot_.WriteMessageBegin(new TMessage("GetChannels", TMessageType.Call, seqid_));
                GetChannels_args args = new GetChannels_args();
                args.ComponentID = componentID;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public List<string> recv_GetChannels() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetChannels_result result = new GetChannels_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetChannels failed: unknown result");
            }

            public void InsertComponent(string componentID, string componentType) {
                send_InsertComponent(componentID, componentType);
                recv_InsertComponent();
            }

            public void send_InsertComponent(string componentID, string componentType) {
                oprot_.WriteMessageBegin(new TMessage("InsertComponent", TMessageType.Call, seqid_));
                InsertComponent_args args = new InsertComponent_args();
                args.ComponentID = componentID;
                args.ComponentType = componentType;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_InsertComponent() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                InsertComponent_result result = new InsertComponent_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                return;
            }

            public void RemoveComponent(string componentID) {
                send_RemoveComponent(componentID);
                recv_RemoveComponent();
            }

            public void send_RemoveComponent(string componentID) {
                oprot_.WriteMessageBegin(new TMessage("RemoveComponent", TMessageType.Call, seqid_));
                RemoveComponent_args args = new RemoveComponent_args();
                args.ComponentID = componentID;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_RemoveComponent() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                RemoveComponent_result result = new RemoveComponent_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                return;
            }

            public List<string> GetAllPorts(string componentID) {
                send_GetAllPorts(componentID);
                return recv_GetAllPorts();
            }

            public void send_GetAllPorts(string componentID) {
                oprot_.WriteMessageBegin(new TMessage("GetAllPorts", TMessageType.Call, seqid_));
                GetAllPorts_args args = new GetAllPorts_args();
                args.ComponentID = componentID;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public List<string> recv_GetAllPorts() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetAllPorts_result result = new GetAllPorts_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAllPorts failed: unknown result");
            }

            public List<string> GetInputPorts(string componentID) {
                send_GetInputPorts(componentID);
                return recv_GetInputPorts();
            }

            public void send_GetInputPorts(string componentID) {
                oprot_.WriteMessageBegin(new TMessage("GetInputPorts", TMessageType.Call, seqid_));
                GetInputPorts_args args = new GetInputPorts_args();
                args.ComponentID = componentID;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public List<string> recv_GetInputPorts() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetInputPorts_result result = new GetInputPorts_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetInputPorts failed: unknown result");
            }

            public List<string> GetOutputPorts(string componentID) {
                send_GetOutputPorts(componentID);
                return recv_GetOutputPorts();
            }

            public void send_GetOutputPorts(string componentID) {
                oprot_.WriteMessageBegin(new TMessage("GetOutputPorts", TMessageType.Call, seqid_));
                GetOutputPorts_args args = new GetOutputPorts_args();
                args.ComponentID = componentID;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public List<string> recv_GetOutputPorts() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetOutputPorts_result result = new GetOutputPorts_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetOutputPorts failed: unknown result");
            }

            public void InsertChannel(string channelID, string sourceComponentID, string sourcePortID, string targetComponentID, string targetPortID) {
                send_InsertChannel(channelID, sourceComponentID, sourcePortID, targetComponentID, targetPortID);
                recv_InsertChannel();
            }

            public void send_InsertChannel(string channelID, string sourceComponentID, string sourcePortID, string targetComponentID, string targetPortID) {
                oprot_.WriteMessageBegin(new TMessage("InsertChannel", TMessageType.Call, seqid_));
                InsertChannel_args args = new InsertChannel_args();
                args.ChannelID = channelID;
                args.SourceComponentID = sourceComponentID;
                args.SourcePortID = sourcePortID;
                args.TargetComponentID = targetComponentID;
                args.TargetPortID = targetPortID;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_InsertChannel() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                InsertChannel_result result = new InsertChannel_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                return;
            }

            public void RemoveChannel(string channelID) {
                send_RemoveChannel(channelID);
                recv_RemoveChannel();
            }

            public void send_RemoveChannel(string channelID) {
                oprot_.WriteMessageBegin(new TMessage("RemoveChannel", TMessageType.Call, seqid_));
                RemoveChannel_args args = new RemoveChannel_args();
                args.ChannelID = channelID;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_RemoveChannel() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                RemoveChannel_result result = new RemoveChannel_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                return;
            }

            public List<string> GetComponentPropertyKeys(string componentID) {
                send_GetComponentPropertyKeys(componentID);
                return recv_GetComponentPropertyKeys();
            }

            public void send_GetComponentPropertyKeys(string componentID) {
                oprot_.WriteMessageBegin(new TMessage("GetComponentPropertyKeys", TMessageType.Call, seqid_));
                GetComponentPropertyKeys_args args = new GetComponentPropertyKeys_args();
                args.ComponentID = componentID;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public List<string> recv_GetComponentPropertyKeys() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetComponentPropertyKeys_result result = new GetComponentPropertyKeys_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetComponentPropertyKeys failed: unknown result");
            }

            public string GetComponentProperty(string componentID, string key) {
                send_GetComponentProperty(componentID, key);
                return recv_GetComponentProperty();
            }

            public void send_GetComponentProperty(string componentID, string key) {
                oprot_.WriteMessageBegin(new TMessage("GetComponentProperty", TMessageType.Call, seqid_));
                GetComponentProperty_args args = new GetComponentProperty_args();
                args.ComponentID = componentID;
                args.Key = key;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public string recv_GetComponentProperty() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetComponentProperty_result result = new GetComponentProperty_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetComponentProperty failed: unknown result");
            }

            public string SetComponentProperty(string componentID, string key, string value) {
                send_SetComponentProperty(componentID, key, value);
                return recv_SetComponentProperty();
            }

            public void send_SetComponentProperty(string componentID, string key, string value) {
                oprot_.WriteMessageBegin(new TMessage("SetComponentProperty", TMessageType.Call, seqid_));
                SetComponentProperty_args args = new SetComponentProperty_args();
                args.ComponentID = componentID;
                args.Key = key;
                args.Value = value;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public string recv_SetComponentProperty() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                SetComponentProperty_result result = new SetComponentProperty_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetComponentProperty failed: unknown result");
            }

            public List<string> GetPortPropertyKeys(string componentID, string portID) {
                send_GetPortPropertyKeys(componentID, portID);
                return recv_GetPortPropertyKeys();
            }

            public void send_GetPortPropertyKeys(string componentID, string portID) {
                oprot_.WriteMessageBegin(new TMessage("GetPortPropertyKeys", TMessageType.Call, seqid_));
                GetPortPropertyKeys_args args = new GetPortPropertyKeys_args();
                args.ComponentID = componentID;
                args.PortID = portID;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public List<string> recv_GetPortPropertyKeys() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetPortPropertyKeys_result result = new GetPortPropertyKeys_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPortPropertyKeys failed: unknown result");
            }

            public string GetPortProperty(string componentID, string portID, string key) {
                send_GetPortProperty(componentID, portID, key);
                return recv_GetPortProperty();
            }

            public void send_GetPortProperty(string componentID, string portID, string key) {
                oprot_.WriteMessageBegin(new TMessage("GetPortProperty", TMessageType.Call, seqid_));
                GetPortProperty_args args = new GetPortProperty_args();
                args.ComponentID = componentID;
                args.PortID = portID;
                args.Key = key;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public string recv_GetPortProperty() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetPortProperty_result result = new GetPortProperty_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPortProperty failed: unknown result");
            }

            public string SetPortProperty(string componentID, string portID, string key, string value) {
                send_SetPortProperty(componentID, portID, key, value);
                return recv_SetPortProperty();
            }

            public void send_SetPortProperty(string componentID, string portID, string key, string value) {
                oprot_.WriteMessageBegin(new TMessage("SetPortProperty", TMessageType.Call, seqid_));
                SetPortProperty_args args = new SetPortProperty_args();
                args.ComponentID = componentID;
                args.PortID = portID;
                args.Key = key;
                args.Value = value;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public string recv_SetPortProperty() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                SetPortProperty_result result = new SetPortProperty_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetPortProperty failed: unknown result");
            }

            public List<string> GetChannelPropertyKeys(string channelID) {
                send_GetChannelPropertyKeys(channelID);
                return recv_GetChannelPropertyKeys();
            }

            public void send_GetChannelPropertyKeys(string channelID) {
                oprot_.WriteMessageBegin(new TMessage("GetChannelPropertyKeys", TMessageType.Call, seqid_));
                GetChannelPropertyKeys_args args = new GetChannelPropertyKeys_args();
                args.ChannelID = channelID;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public List<string> recv_GetChannelPropertyKeys() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetChannelPropertyKeys_result result = new GetChannelPropertyKeys_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetChannelPropertyKeys failed: unknown result");
            }

            public string GetChannelProperty(string channelID, string key) {
                send_GetChannelProperty(channelID, key);
                return recv_GetChannelProperty();
            }

            public void send_GetChannelProperty(string channelID, string key) {
                oprot_.WriteMessageBegin(new TMessage("GetChannelProperty", TMessageType.Call, seqid_));
                GetChannelProperty_args args = new GetChannelProperty_args();
                args.ChannelID = channelID;
                args.Key = key;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public string recv_GetChannelProperty() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetChannelProperty_result result = new GetChannelProperty_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetChannelProperty failed: unknown result");
            }

            public string SetChannelProperty(string channelID, string key, string value) {
                send_SetChannelProperty(channelID, key, value);
                return recv_SetChannelProperty();
            }

            public void send_SetChannelProperty(string channelID, string key, string value) {
                oprot_.WriteMessageBegin(new TMessage("SetChannelProperty", TMessageType.Call, seqid_));
                SetChannelProperty_args args = new SetChannelProperty_args();
                args.ChannelID = channelID;
                args.Key = key;
                args.Value = value;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public string recv_SetChannelProperty() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                SetChannelProperty_result result = new SetChannelProperty_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetChannelProperty failed: unknown result");
            }

            public string RegisterRemoteConsumer(string sourceComponentID, string sourceOutputPortID) {
                send_RegisterRemoteConsumer(sourceComponentID, sourceOutputPortID);
                return recv_RegisterRemoteConsumer();
            }

            public void send_RegisterRemoteConsumer(string sourceComponentID, string sourceOutputPortID) {
                oprot_.WriteMessageBegin(new TMessage("RegisterRemoteConsumer", TMessageType.Call, seqid_));
                RegisterRemoteConsumer_args args = new RegisterRemoteConsumer_args();
                args.SourceComponentID = sourceComponentID;
                args.SourceOutputPortID = sourceOutputPortID;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public string recv_RegisterRemoteConsumer() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                RegisterRemoteConsumer_result result = new RegisterRemoteConsumer_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterRemoteConsumer failed: unknown result");
            }

            public void UnregisterRemoteConsumer(string remoteConsumerID) {
                send_UnregisterRemoteConsumer(remoteConsumerID);
                recv_UnregisterRemoteConsumer();
            }

            public void send_UnregisterRemoteConsumer(string remoteConsumerID) {
                oprot_.WriteMessageBegin(new TMessage("UnregisterRemoteConsumer", TMessageType.Call, seqid_));
                UnregisterRemoteConsumer_args args = new UnregisterRemoteConsumer_args();
                args.RemoteConsumerID = remoteConsumerID;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_UnregisterRemoteConsumer() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                UnregisterRemoteConsumer_result result = new UnregisterRemoteConsumer_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                return;
            }

            public string RegisterRemoteProducer(string targetComponentID, string targetInputPortID) {
                send_RegisterRemoteProducer(targetComponentID, targetInputPortID);
                return recv_RegisterRemoteProducer();
            }

            public void send_RegisterRemoteProducer(string targetComponentID, string targetInputPortID) {
                oprot_.WriteMessageBegin(new TMessage("RegisterRemoteProducer", TMessageType.Call, seqid_));
                RegisterRemoteProducer_args args = new RegisterRemoteProducer_args();
                args.TargetComponentID = targetComponentID;
                args.TargetInputPortID = targetInputPortID;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public string recv_RegisterRemoteProducer() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                RegisterRemoteProducer_result result = new RegisterRemoteProducer_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterRemoteProducer failed: unknown result");
            }

            public void UnregisterRemoteProducer(string remoteProducerID) {
                send_UnregisterRemoteProducer(remoteProducerID);
                recv_UnregisterRemoteProducer();
            }

            public void send_UnregisterRemoteProducer(string remoteProducerID) {
                oprot_.WriteMessageBegin(new TMessage("UnregisterRemoteProducer", TMessageType.Call, seqid_));
                UnregisterRemoteProducer_args args = new UnregisterRemoteProducer_args();
                args.RemoteProducerID = remoteProducerID;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_UnregisterRemoteProducer() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                UnregisterRemoteProducer_result result = new UnregisterRemoteProducer_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                return;
            }

            public byte[] PollData(string courceComponentID, string sourceOutputPortID) {
                send_PollData(courceComponentID, sourceOutputPortID);
                return recv_PollData();
            }

            public void send_PollData(string courceComponentID, string sourceOutputPortID) {
                oprot_.WriteMessageBegin(new TMessage("PollData", TMessageType.Call, seqid_));
                PollData_args args = new PollData_args();
                args.CourceComponentID = courceComponentID;
                args.SourceOutputPortID = sourceOutputPortID;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public byte[] recv_PollData() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                PollData_result result = new PollData_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PollData failed: unknown result");
            }

            public void SendData(string targetComponentID, string targetInputPortID, byte[] data) {
                send_SendData(targetComponentID, targetInputPortID, data);
                recv_SendData();
            }

            public void send_SendData(string targetComponentID, string targetInputPortID, byte[] data) {
                oprot_.WriteMessageBegin(new TMessage("SendData", TMessageType.Call, seqid_));
                SendData_args args = new SendData_args();
                args.TargetComponentID = targetComponentID;
                args.TargetInputPortID = targetInputPortID;
                args.Data = data;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_SendData() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                SendData_result result = new SendData_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                return;
            }

            public string RegisterLogListener() {
                send_RegisterLogListener();
                return recv_RegisterLogListener();
            }

            public void send_RegisterLogListener() {
                oprot_.WriteMessageBegin(new TMessage("RegisterLogListener", TMessageType.Call, seqid_));
                RegisterLogListener_args args = new RegisterLogListener_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public string recv_RegisterLogListener() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                RegisterLogListener_result result = new RegisterLogListener_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterLogListener failed: unknown result");
            }

            public void UnregisterLogListener(string logListenerID) {
                send_UnregisterLogListener(logListenerID);
                recv_UnregisterLogListener();
            }

            public void send_UnregisterLogListener(string logListenerID) {
                oprot_.WriteMessageBegin(new TMessage("UnregisterLogListener", TMessageType.Call, seqid_));
                UnregisterLogListener_args args = new UnregisterLogListener_args();
                args.LogListenerID = logListenerID;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_UnregisterLogListener() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                UnregisterLogListener_result result = new UnregisterLogListener_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                return;
            }

            public void storeModel(string modelInXML, string filename) {
                send_storeModel(modelInXML, filename);
                recv_storeModel();
            }

            public void send_storeModel(string modelInXML, string filename) {
                oprot_.WriteMessageBegin(new TMessage("storeModel", TMessageType.Call, seqid_));
                storeModel_args args = new storeModel_args();
                args.ModelInXML = modelInXML;
                args.Filename = filename;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_storeModel() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                storeModel_result result = new storeModel_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                return;
            }

            public bool deleteModelFile(string filename) {
                send_deleteModelFile(filename);
                return recv_deleteModelFile();
            }

            public void send_deleteModelFile(string filename) {
                oprot_.WriteMessageBegin(new TMessage("deleteModelFile", TMessageType.Call, seqid_));
                deleteModelFile_args args = new deleteModelFile_args();
                args.Filename = filename;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public bool recv_deleteModelFile() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                deleteModelFile_result result = new deleteModelFile_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteModelFile failed: unknown result");
            }

            public List<string> listAllStoredModels() {
                send_listAllStoredModels();
                return recv_listAllStoredModels();
            }

            public void send_listAllStoredModels() {
                oprot_.WriteMessageBegin(new TMessage("listAllStoredModels", TMessageType.Call, seqid_));
                listAllStoredModels_args args = new listAllStoredModels_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public List<string> recv_listAllStoredModels() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                listAllStoredModels_result result = new listAllStoredModels_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listAllStoredModels failed: unknown result");
            }

            public string getModelFromFile(string filename) {
                send_getModelFromFile(filename);
                return recv_getModelFromFile();
            }

            public void send_getModelFromFile(string filename) {
                oprot_.WriteMessageBegin(new TMessage("getModelFromFile", TMessageType.Call, seqid_));
                getModelFromFile_args args = new getModelFromFile_args();
                args.Filename = filename;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public string recv_getModelFromFile() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                getModelFromFile_result result = new getModelFromFile_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getModelFromFile failed: unknown result");
            }

            public string getLogFile() {
                send_getLogFile();
                return recv_getLogFile();
            }

            public void send_getLogFile() {
                oprot_.WriteMessageBegin(new TMessage("getLogFile", TMessageType.Call, seqid_));
                getLogFile_args args = new getLogFile_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public string recv_getLogFile() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                getLogFile_result result = new getLogFile_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLogFile failed: unknown result");
            }

            public List<StatusObject> QueryStatus(bool fullList) {
                send_QueryStatus(fullList);
                return recv_QueryStatus();
            }

            public void send_QueryStatus(bool fullList) {
                oprot_.WriteMessageBegin(new TMessage("QueryStatus", TMessageType.Call, seqid_));
                QueryStatus_args args = new QueryStatus_args();
                args.FullList = fullList;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public List<StatusObject> recv_QueryStatus() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                QueryStatus_result result = new QueryStatus_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryStatus failed: unknown result");
            }

            public List<string> getRuntimePropertyList(string componentID, string key) {
                send_getRuntimePropertyList(componentID, key);
                return recv_getRuntimePropertyList();
            }

            public void send_getRuntimePropertyList(string componentID, string key) {
                oprot_.WriteMessageBegin(new TMessage("getRuntimePropertyList", TMessageType.Call, seqid_));
                getRuntimePropertyList_args args = new getRuntimePropertyList_args();
                args.ComponentID = componentID;
                args.Key = key;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public List<string> recv_getRuntimePropertyList() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                getRuntimePropertyList_result result = new getRuntimePropertyList_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRuntimePropertyList failed: unknown result");
            }

            public List<string> getBundleDescriptors() {
                send_getBundleDescriptors();
                return recv_getBundleDescriptors();
            }

            public void send_getBundleDescriptors() {
                oprot_.WriteMessageBegin(new TMessage("getBundleDescriptors", TMessageType.Call, seqid_));
                getBundleDescriptors_args args = new getBundleDescriptors_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public List<string> recv_getBundleDescriptors() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                getBundleDescriptors_result result = new getBundleDescriptors_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBundleDescriptors failed: unknown result");
            }

            public int Ping() {
                send_Ping();
                return recv_Ping();
            }

            public void send_Ping() {
                oprot_.WriteMessageBegin(new TMessage("Ping", TMessageType.Call, seqid_));
                Ping_args args = new Ping_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public int recv_Ping() {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                Ping_result result = new Ping_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.asapiEx) {
                    throw result.AsapiEx;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Ping failed: unknown result");
            }

        }
        public class Processor : TProcessor {
            public Processor(Iface iface) {
                iface_ = iface;
                processMap_["GetAvailableComponentTypes"] = GetAvailableComponentTypes_Process;
                processMap_["GetModel"] = GetModel_Process;
                processMap_["DeployModel"] = DeployModel_Process;
                processMap_["DeployFile"] = DeployFile_Process;
                processMap_["DeployModelWithFile"] = DeployModelWithFile_Process;
                processMap_["NewModel"] = NewModel_Process;
                processMap_["RunModel"] = RunModel_Process;
                processMap_["PauseModel"] = PauseModel_Process;
                processMap_["StopModel"] = StopModel_Process;
                processMap_["GetComponents"] = GetComponents_Process;
                processMap_["GetChannels"] = GetChannels_Process;
                processMap_["InsertComponent"] = InsertComponent_Process;
                processMap_["RemoveComponent"] = RemoveComponent_Process;
                processMap_["GetAllPorts"] = GetAllPorts_Process;
                processMap_["GetInputPorts"] = GetInputPorts_Process;
                processMap_["GetOutputPorts"] = GetOutputPorts_Process;
                processMap_["InsertChannel"] = InsertChannel_Process;
                processMap_["RemoveChannel"] = RemoveChannel_Process;
                processMap_["GetComponentPropertyKeys"] = GetComponentPropertyKeys_Process;
                processMap_["GetComponentProperty"] = GetComponentProperty_Process;
                processMap_["SetComponentProperty"] = SetComponentProperty_Process;
                processMap_["GetPortPropertyKeys"] = GetPortPropertyKeys_Process;
                processMap_["GetPortProperty"] = GetPortProperty_Process;
                processMap_["SetPortProperty"] = SetPortProperty_Process;
                processMap_["GetChannelPropertyKeys"] = GetChannelPropertyKeys_Process;
                processMap_["GetChannelProperty"] = GetChannelProperty_Process;
                processMap_["SetChannelProperty"] = SetChannelProperty_Process;
                processMap_["RegisterRemoteConsumer"] = RegisterRemoteConsumer_Process;
                processMap_["UnregisterRemoteConsumer"] = UnregisterRemoteConsumer_Process;
                processMap_["RegisterRemoteProducer"] = RegisterRemoteProducer_Process;
                processMap_["UnregisterRemoteProducer"] = UnregisterRemoteProducer_Process;
                processMap_["PollData"] = PollData_Process;
                processMap_["SendData"] = SendData_Process;
                processMap_["RegisterLogListener"] = RegisterLogListener_Process;
                processMap_["UnregisterLogListener"] = UnregisterLogListener_Process;
                processMap_["storeModel"] = storeModel_Process;
                processMap_["deleteModelFile"] = deleteModelFile_Process;
                processMap_["listAllStoredModels"] = listAllStoredModels_Process;
                processMap_["getModelFromFile"] = getModelFromFile_Process;
                processMap_["getLogFile"] = getLogFile_Process;
                processMap_["QueryStatus"] = QueryStatus_Process;
                processMap_["getRuntimePropertyList"] = getRuntimePropertyList_Process;
                processMap_["getBundleDescriptors"] = getBundleDescriptors_Process;
                processMap_["Ping"] = Ping_Process;
            }

            protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
            private Iface iface_;
            protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

            public bool Process(TProtocol iprot, TProtocol oprot) {
                try {
                    TMessage msg = iprot.ReadMessageBegin();
                    ProcessFunction fn;
                    processMap_.TryGetValue(msg.Name, out fn);
                    if (fn == null) {
                        TProtocolUtil.Skip(iprot, TType.Struct);
                        iprot.ReadMessageEnd();
                        TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                        oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                        x.Write(oprot);
                        oprot.WriteMessageEnd();
                        oprot.Transport.Flush();
                        return true;
                    }
                    fn(msg.SeqID, iprot, oprot);
                } catch (IOException) {
                    return false;
                }
                return true;
            }

            public void GetAvailableComponentTypes_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                GetAvailableComponentTypes_args args = new GetAvailableComponentTypes_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetAvailableComponentTypes_result result = new GetAvailableComponentTypes_result();
                result.Success = iface_.GetAvailableComponentTypes();
                oprot.WriteMessageBegin(new TMessage("GetAvailableComponentTypes", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetModel_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                GetModel_args args = new GetModel_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetModel_result result = new GetModel_result();
                result.Success = iface_.GetModel();
                oprot.WriteMessageBegin(new TMessage("GetModel", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void DeployModel_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                DeployModel_args args = new DeployModel_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                DeployModel_result result = new DeployModel_result();
                try {
                    iface_.DeployModel(args.ModelInXml);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("DeployModel", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void DeployFile_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                DeployFile_args args = new DeployFile_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                DeployFile_result result = new DeployFile_result();
                try {
                    iface_.DeployFile(args.Filename);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("DeployFile", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void DeployModelWithFile_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                DeployModelWithFile_args args = new DeployModelWithFile_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                DeployModelWithFile_result result = new DeployModelWithFile_result();
                try {
                    iface_.DeployModelWithFile(args.Filename, args.ModelInXml);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("DeployModelWithFile", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void NewModel_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                NewModel_args args = new NewModel_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                NewModel_result result = new NewModel_result();
                iface_.NewModel();
                oprot.WriteMessageBegin(new TMessage("NewModel", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void RunModel_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                RunModel_args args = new RunModel_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                RunModel_result result = new RunModel_result();
                try {
                    iface_.RunModel();
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("RunModel", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void PauseModel_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                PauseModel_args args = new PauseModel_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                PauseModel_result result = new PauseModel_result();
                try {
                    iface_.PauseModel();
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("PauseModel", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void StopModel_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                StopModel_args args = new StopModel_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                StopModel_result result = new StopModel_result();
                try {
                    iface_.StopModel();
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("StopModel", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetComponents_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                GetComponents_args args = new GetComponents_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetComponents_result result = new GetComponents_result();
                result.Success = iface_.GetComponents();
                oprot.WriteMessageBegin(new TMessage("GetComponents", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetChannels_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                GetChannels_args args = new GetChannels_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetChannels_result result = new GetChannels_result();
                result.Success = iface_.GetChannels(args.ComponentID);
                oprot.WriteMessageBegin(new TMessage("GetChannels", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void InsertComponent_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                InsertComponent_args args = new InsertComponent_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                InsertComponent_result result = new InsertComponent_result();
                try {
                    iface_.InsertComponent(args.ComponentID, args.ComponentType);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("InsertComponent", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void RemoveComponent_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                RemoveComponent_args args = new RemoveComponent_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                RemoveComponent_result result = new RemoveComponent_result();
                try {
                    iface_.RemoveComponent(args.ComponentID);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("RemoveComponent", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetAllPorts_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                GetAllPorts_args args = new GetAllPorts_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetAllPorts_result result = new GetAllPorts_result();
                try {
                    result.Success = iface_.GetAllPorts(args.ComponentID);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("GetAllPorts", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetInputPorts_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                GetInputPorts_args args = new GetInputPorts_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetInputPorts_result result = new GetInputPorts_result();
                try {
                    result.Success = iface_.GetInputPorts(args.ComponentID);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("GetInputPorts", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetOutputPorts_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                GetOutputPorts_args args = new GetOutputPorts_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetOutputPorts_result result = new GetOutputPorts_result();
                try {
                    result.Success = iface_.GetOutputPorts(args.ComponentID);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("GetOutputPorts", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void InsertChannel_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                InsertChannel_args args = new InsertChannel_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                InsertChannel_result result = new InsertChannel_result();
                try {
                    iface_.InsertChannel(args.ChannelID, args.SourceComponentID, args.SourcePortID, args.TargetComponentID, args.TargetPortID);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("InsertChannel", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void RemoveChannel_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                RemoveChannel_args args = new RemoveChannel_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                RemoveChannel_result result = new RemoveChannel_result();
                try {
                    iface_.RemoveChannel(args.ChannelID);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("RemoveChannel", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetComponentPropertyKeys_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                GetComponentPropertyKeys_args args = new GetComponentPropertyKeys_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetComponentPropertyKeys_result result = new GetComponentPropertyKeys_result();
                result.Success = iface_.GetComponentPropertyKeys(args.ComponentID);
                oprot.WriteMessageBegin(new TMessage("GetComponentPropertyKeys", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetComponentProperty_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                GetComponentProperty_args args = new GetComponentProperty_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetComponentProperty_result result = new GetComponentProperty_result();
                result.Success = iface_.GetComponentProperty(args.ComponentID, args.Key);
                oprot.WriteMessageBegin(new TMessage("GetComponentProperty", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void SetComponentProperty_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                SetComponentProperty_args args = new SetComponentProperty_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                SetComponentProperty_result result = new SetComponentProperty_result();
                result.Success = iface_.SetComponentProperty(args.ComponentID, args.Key, args.Value);
                oprot.WriteMessageBegin(new TMessage("SetComponentProperty", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetPortPropertyKeys_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                GetPortPropertyKeys_args args = new GetPortPropertyKeys_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetPortPropertyKeys_result result = new GetPortPropertyKeys_result();
                result.Success = iface_.GetPortPropertyKeys(args.ComponentID, args.PortID);
                oprot.WriteMessageBegin(new TMessage("GetPortPropertyKeys", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetPortProperty_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                GetPortProperty_args args = new GetPortProperty_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetPortProperty_result result = new GetPortProperty_result();
                result.Success = iface_.GetPortProperty(args.ComponentID, args.PortID, args.Key);
                oprot.WriteMessageBegin(new TMessage("GetPortProperty", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void SetPortProperty_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                SetPortProperty_args args = new SetPortProperty_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                SetPortProperty_result result = new SetPortProperty_result();
                result.Success = iface_.SetPortProperty(args.ComponentID, args.PortID, args.Key, args.Value);
                oprot.WriteMessageBegin(new TMessage("SetPortProperty", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetChannelPropertyKeys_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                GetChannelPropertyKeys_args args = new GetChannelPropertyKeys_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetChannelPropertyKeys_result result = new GetChannelPropertyKeys_result();
                result.Success = iface_.GetChannelPropertyKeys(args.ChannelID);
                oprot.WriteMessageBegin(new TMessage("GetChannelPropertyKeys", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetChannelProperty_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                GetChannelProperty_args args = new GetChannelProperty_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetChannelProperty_result result = new GetChannelProperty_result();
                result.Success = iface_.GetChannelProperty(args.ChannelID, args.Key);
                oprot.WriteMessageBegin(new TMessage("GetChannelProperty", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void SetChannelProperty_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                SetChannelProperty_args args = new SetChannelProperty_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                SetChannelProperty_result result = new SetChannelProperty_result();
                result.Success = iface_.SetChannelProperty(args.ChannelID, args.Key, args.Value);
                oprot.WriteMessageBegin(new TMessage("SetChannelProperty", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void RegisterRemoteConsumer_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                RegisterRemoteConsumer_args args = new RegisterRemoteConsumer_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                RegisterRemoteConsumer_result result = new RegisterRemoteConsumer_result();
                try {
                    result.Success = iface_.RegisterRemoteConsumer(args.SourceComponentID, args.SourceOutputPortID);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("RegisterRemoteConsumer", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void UnregisterRemoteConsumer_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                UnregisterRemoteConsumer_args args = new UnregisterRemoteConsumer_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                UnregisterRemoteConsumer_result result = new UnregisterRemoteConsumer_result();
                try {
                    iface_.UnregisterRemoteConsumer(args.RemoteConsumerID);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("UnregisterRemoteConsumer", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void RegisterRemoteProducer_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                RegisterRemoteProducer_args args = new RegisterRemoteProducer_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                RegisterRemoteProducer_result result = new RegisterRemoteProducer_result();
                try {
                    result.Success = iface_.RegisterRemoteProducer(args.TargetComponentID, args.TargetInputPortID);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("RegisterRemoteProducer", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void UnregisterRemoteProducer_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                UnregisterRemoteProducer_args args = new UnregisterRemoteProducer_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                UnregisterRemoteProducer_result result = new UnregisterRemoteProducer_result();
                try {
                    iface_.UnregisterRemoteProducer(args.RemoteProducerID);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("UnregisterRemoteProducer", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void PollData_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                PollData_args args = new PollData_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                PollData_result result = new PollData_result();
                try {
                    result.Success = iface_.PollData(args.CourceComponentID, args.SourceOutputPortID);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("PollData", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void SendData_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                SendData_args args = new SendData_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                SendData_result result = new SendData_result();
                try {
                    iface_.SendData(args.TargetComponentID, args.TargetInputPortID, args.Data);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("SendData", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void RegisterLogListener_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                RegisterLogListener_args args = new RegisterLogListener_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                RegisterLogListener_result result = new RegisterLogListener_result();
                result.Success = iface_.RegisterLogListener();
                oprot.WriteMessageBegin(new TMessage("RegisterLogListener", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void UnregisterLogListener_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                UnregisterLogListener_args args = new UnregisterLogListener_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                UnregisterLogListener_result result = new UnregisterLogListener_result();
                iface_.UnregisterLogListener(args.LogListenerID);
                oprot.WriteMessageBegin(new TMessage("UnregisterLogListener", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void storeModel_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                storeModel_args args = new storeModel_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                storeModel_result result = new storeModel_result();
                try {
                    iface_.storeModel(args.ModelInXML, args.Filename);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("storeModel", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void deleteModelFile_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                deleteModelFile_args args = new deleteModelFile_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                deleteModelFile_result result = new deleteModelFile_result();
                try {
                    result.Success = iface_.deleteModelFile(args.Filename);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("deleteModelFile", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void listAllStoredModels_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                listAllStoredModels_args args = new listAllStoredModels_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                listAllStoredModels_result result = new listAllStoredModels_result();
                try {
                    result.Success = iface_.listAllStoredModels();
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("listAllStoredModels", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getModelFromFile_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                getModelFromFile_args args = new getModelFromFile_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                getModelFromFile_result result = new getModelFromFile_result();
                try {
                    result.Success = iface_.getModelFromFile(args.Filename);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("getModelFromFile", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getLogFile_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                getLogFile_args args = new getLogFile_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                getLogFile_result result = new getLogFile_result();
                result.Success = iface_.getLogFile();
                oprot.WriteMessageBegin(new TMessage("getLogFile", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void QueryStatus_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                QueryStatus_args args = new QueryStatus_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                QueryStatus_result result = new QueryStatus_result();
                result.Success = iface_.QueryStatus(args.FullList);
                oprot.WriteMessageBegin(new TMessage("QueryStatus", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getRuntimePropertyList_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                getRuntimePropertyList_args args = new getRuntimePropertyList_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                getRuntimePropertyList_result result = new getRuntimePropertyList_result();
                try {
                    result.Success = iface_.getRuntimePropertyList(args.ComponentID, args.Key);
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("getRuntimePropertyList", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getBundleDescriptors_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                getBundleDescriptors_args args = new getBundleDescriptors_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                getBundleDescriptors_result result = new getBundleDescriptors_result();
                try {
                    result.Success = iface_.getBundleDescriptors();
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("getBundleDescriptors", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void Ping_Process(int seqid, TProtocol iprot, TProtocol oprot) {
                Ping_args args = new Ping_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                Ping_result result = new Ping_result();
                try {
                    result.Success = iface_.Ping();
                } catch (AsapiException asapiEx) {
                    result.AsapiEx = asapiEx;
                }
                oprot.WriteMessageBegin(new TMessage("Ping", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

        }


        [Serializable]
        public partial class GetAvailableComponentTypes_args : TBase {

            public GetAvailableComponentTypes_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetAvailableComponentTypes_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetAvailableComponentTypes_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetAvailableComponentTypes_result : TBase {
            private List<string> _success;

            public List<string> Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
            }

            public GetAvailableComponentTypes_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.List) {
                                {
                                    Success = new List<string>();
                                    TList _list0 = iprot.ReadListBegin();
                                    for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {
                                        string _elem2 = null;
                                        _elem2 = iprot.ReadString();
                                        Success.Add(_elem2);
                                    }
                                    iprot.ReadListEnd();
                                }
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetAvailableComponentTypes_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter3 in Success) {
                                oprot.WriteString(_iter3);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetAvailableComponentTypes_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetModel_args : TBase {

            public GetModel_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetModel_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetModel_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetModel_result : TBase {
            private string _success;

            public string Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
            }

            public GetModel_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.String) {
                                Success = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetModel_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetModel_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class DeployModel_args : TBase {
            private string _modelInXml;

            public string ModelInXml {
                get {
                    return _modelInXml;
                }
                set {
                    __isset.modelInXml = true;
                    this._modelInXml = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool modelInXml;
            }

            public DeployModel_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ModelInXml = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("DeployModel_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ModelInXml != null && __isset.modelInXml) {
                    field.Name = "modelInXml";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ModelInXml);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("DeployModel_args(");
                sb.Append("ModelInXml: ");
                sb.Append(ModelInXml);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class DeployModel_result : TBase {
            private AsapiException _asapiEx;

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool asapiEx;
            }

            public DeployModel_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("DeployModel_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("DeployModel_result(");
                sb.Append("AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class DeployFile_args : TBase {
            private string _filename;

            public string Filename {
                get {
                    return _filename;
                }
                set {
                    __isset.filename = true;
                    this._filename = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool filename;
            }

            public DeployFile_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                Filename = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("DeployFile_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Filename != null && __isset.filename) {
                    field.Name = "filename";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Filename);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("DeployFile_args(");
                sb.Append("Filename: ");
                sb.Append(Filename);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class DeployFile_result : TBase {
            private AsapiException _asapiEx;

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool asapiEx;
            }

            public DeployFile_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("DeployFile_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("DeployFile_result(");
                sb.Append("AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class DeployModelWithFile_args : TBase {
            private string _filename;
            private string _modelInXml;

            public string Filename {
                get {
                    return _filename;
                }
                set {
                    __isset.filename = true;
                    this._filename = value;
                }
            }

            public string ModelInXml {
                get {
                    return _modelInXml;
                }
                set {
                    __isset.modelInXml = true;
                    this._modelInXml = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool filename;
                public bool modelInXml;
            }

            public DeployModelWithFile_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                Filename = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String) {
                                ModelInXml = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("DeployModelWithFile_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Filename != null && __isset.filename) {
                    field.Name = "filename";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Filename);
                    oprot.WriteFieldEnd();
                }
                if (ModelInXml != null && __isset.modelInXml) {
                    field.Name = "modelInXml";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ModelInXml);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("DeployModelWithFile_args(");
                sb.Append("Filename: ");
                sb.Append(Filename);
                sb.Append(",ModelInXml: ");
                sb.Append(ModelInXml);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class DeployModelWithFile_result : TBase {
            private AsapiException _asapiEx;

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool asapiEx;
            }

            public DeployModelWithFile_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("DeployModelWithFile_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("DeployModelWithFile_result(");
                sb.Append("AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class NewModel_args : TBase {

            public NewModel_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("NewModel_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("NewModel_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class NewModel_result : TBase {

            public NewModel_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("NewModel_result");
                oprot.WriteStructBegin(struc);

                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("NewModel_result(");
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class RunModel_args : TBase {

            public RunModel_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("RunModel_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("RunModel_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class RunModel_result : TBase {
            private AsapiException _asapiEx;

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool asapiEx;
            }

            public RunModel_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("RunModel_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("RunModel_result(");
                sb.Append("AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class PauseModel_args : TBase {

            public PauseModel_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("PauseModel_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("PauseModel_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class PauseModel_result : TBase {
            private AsapiException _asapiEx;

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool asapiEx;
            }

            public PauseModel_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("PauseModel_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("PauseModel_result(");
                sb.Append("AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class StopModel_args : TBase {

            public StopModel_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("StopModel_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("StopModel_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class StopModel_result : TBase {
            private AsapiException _asapiEx;

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool asapiEx;
            }

            public StopModel_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("StopModel_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("StopModel_result(");
                sb.Append("AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetComponents_args : TBase {

            public GetComponents_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetComponents_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetComponents_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetComponents_result : TBase {
            private List<string> _success;

            public List<string> Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
            }

            public GetComponents_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.List) {
                                {
                                    Success = new List<string>();
                                    TList _list4 = iprot.ReadListBegin();
                                    for (int _i5 = 0; _i5 < _list4.Count; ++_i5) {
                                        string _elem6 = null;
                                        _elem6 = iprot.ReadString();
                                        Success.Add(_elem6);
                                    }
                                    iprot.ReadListEnd();
                                }
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetComponents_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter7 in Success) {
                                oprot.WriteString(_iter7);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetComponents_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetChannels_args : TBase {
            private string _componentID;

            public string ComponentID {
                get {
                    return _componentID;
                }
                set {
                    __isset.componentID = true;
                    this._componentID = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool componentID;
            }

            public GetChannels_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetChannels_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ComponentID != null && __isset.componentID) {
                    field.Name = "componentID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ComponentID);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetChannels_args(");
                sb.Append("ComponentID: ");
                sb.Append(ComponentID);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetChannels_result : TBase {
            private List<string> _success;

            public List<string> Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
            }

            public GetChannels_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.List) {
                                {
                                    Success = new List<string>();
                                    TList _list8 = iprot.ReadListBegin();
                                    for (int _i9 = 0; _i9 < _list8.Count; ++_i9) {
                                        string _elem10 = null;
                                        _elem10 = iprot.ReadString();
                                        Success.Add(_elem10);
                                    }
                                    iprot.ReadListEnd();
                                }
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetChannels_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter11 in Success) {
                                oprot.WriteString(_iter11);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetChannels_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class InsertComponent_args : TBase {
            private string _componentID;
            private string _componentType;

            public string ComponentID {
                get {
                    return _componentID;
                }
                set {
                    __isset.componentID = true;
                    this._componentID = value;
                }
            }

            public string ComponentType {
                get {
                    return _componentType;
                }
                set {
                    __isset.componentType = true;
                    this._componentType = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool componentID;
                public bool componentType;
            }

            public InsertComponent_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String) {
                                ComponentType = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("InsertComponent_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ComponentID != null && __isset.componentID) {
                    field.Name = "componentID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ComponentID);
                    oprot.WriteFieldEnd();
                }
                if (ComponentType != null && __isset.componentType) {
                    field.Name = "componentType";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ComponentType);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("InsertComponent_args(");
                sb.Append("ComponentID: ");
                sb.Append(ComponentID);
                sb.Append(",ComponentType: ");
                sb.Append(ComponentType);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class InsertComponent_result : TBase {
            private AsapiException _asapiEx;

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool asapiEx;
            }

            public InsertComponent_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("InsertComponent_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("InsertComponent_result(");
                sb.Append("AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class RemoveComponent_args : TBase {
            private string _componentID;

            public string ComponentID {
                get {
                    return _componentID;
                }
                set {
                    __isset.componentID = true;
                    this._componentID = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool componentID;
            }

            public RemoveComponent_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("RemoveComponent_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ComponentID != null && __isset.componentID) {
                    field.Name = "componentID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ComponentID);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("RemoveComponent_args(");
                sb.Append("ComponentID: ");
                sb.Append(ComponentID);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class RemoveComponent_result : TBase {
            private AsapiException _asapiEx;

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool asapiEx;
            }

            public RemoveComponent_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("RemoveComponent_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("RemoveComponent_result(");
                sb.Append("AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetAllPorts_args : TBase {
            private string _componentID;

            public string ComponentID {
                get {
                    return _componentID;
                }
                set {
                    __isset.componentID = true;
                    this._componentID = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool componentID;
            }

            public GetAllPorts_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetAllPorts_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ComponentID != null && __isset.componentID) {
                    field.Name = "componentID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ComponentID);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetAllPorts_args(");
                sb.Append("ComponentID: ");
                sb.Append(ComponentID);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetAllPorts_result : TBase {
            private List<string> _success;
            private AsapiException _asapiEx;

            public List<string> Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
                public bool asapiEx;
            }

            public GetAllPorts_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.List) {
                                {
                                    Success = new List<string>();
                                    TList _list12 = iprot.ReadListBegin();
                                    for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {
                                        string _elem14 = null;
                                        _elem14 = iprot.ReadString();
                                        Success.Add(_elem14);
                                    }
                                    iprot.ReadListEnd();
                                }
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetAllPorts_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter15 in Success) {
                                oprot.WriteString(_iter15);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                } else if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetAllPorts_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetInputPorts_args : TBase {
            private string _componentID;

            public string ComponentID {
                get {
                    return _componentID;
                }
                set {
                    __isset.componentID = true;
                    this._componentID = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool componentID;
            }

            public GetInputPorts_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetInputPorts_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ComponentID != null && __isset.componentID) {
                    field.Name = "componentID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ComponentID);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetInputPorts_args(");
                sb.Append("ComponentID: ");
                sb.Append(ComponentID);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetInputPorts_result : TBase {
            private List<string> _success;
            private AsapiException _asapiEx;

            public List<string> Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
                public bool asapiEx;
            }

            public GetInputPorts_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.List) {
                                {
                                    Success = new List<string>();
                                    TList _list16 = iprot.ReadListBegin();
                                    for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {
                                        string _elem18 = null;
                                        _elem18 = iprot.ReadString();
                                        Success.Add(_elem18);
                                    }
                                    iprot.ReadListEnd();
                                }
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetInputPorts_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter19 in Success) {
                                oprot.WriteString(_iter19);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                } else if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetInputPorts_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetOutputPorts_args : TBase {
            private string _componentID;

            public string ComponentID {
                get {
                    return _componentID;
                }
                set {
                    __isset.componentID = true;
                    this._componentID = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool componentID;
            }

            public GetOutputPorts_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetOutputPorts_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ComponentID != null && __isset.componentID) {
                    field.Name = "componentID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ComponentID);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetOutputPorts_args(");
                sb.Append("ComponentID: ");
                sb.Append(ComponentID);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetOutputPorts_result : TBase {
            private List<string> _success;
            private AsapiException _asapiEx;

            public List<string> Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
                public bool asapiEx;
            }

            public GetOutputPorts_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.List) {
                                {
                                    Success = new List<string>();
                                    TList _list20 = iprot.ReadListBegin();
                                    for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {
                                        string _elem22 = null;
                                        _elem22 = iprot.ReadString();
                                        Success.Add(_elem22);
                                    }
                                    iprot.ReadListEnd();
                                }
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetOutputPorts_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter23 in Success) {
                                oprot.WriteString(_iter23);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                } else if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetOutputPorts_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class InsertChannel_args : TBase {
            private string _channelID;
            private string _sourceComponentID;
            private string _sourcePortID;
            private string _targetComponentID;
            private string _targetPortID;

            public string ChannelID {
                get {
                    return _channelID;
                }
                set {
                    __isset.channelID = true;
                    this._channelID = value;
                }
            }

            public string SourceComponentID {
                get {
                    return _sourceComponentID;
                }
                set {
                    __isset.sourceComponentID = true;
                    this._sourceComponentID = value;
                }
            }

            public string SourcePortID {
                get {
                    return _sourcePortID;
                }
                set {
                    __isset.sourcePortID = true;
                    this._sourcePortID = value;
                }
            }

            public string TargetComponentID {
                get {
                    return _targetComponentID;
                }
                set {
                    __isset.targetComponentID = true;
                    this._targetComponentID = value;
                }
            }

            public string TargetPortID {
                get {
                    return _targetPortID;
                }
                set {
                    __isset.targetPortID = true;
                    this._targetPortID = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool channelID;
                public bool sourceComponentID;
                public bool sourcePortID;
                public bool targetComponentID;
                public bool targetPortID;
            }

            public InsertChannel_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ChannelID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String) {
                                SourceComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String) {
                                SourcePortID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.String) {
                                TargetComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 5:
                            if (field.Type == TType.String) {
                                TargetPortID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("InsertChannel_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ChannelID != null && __isset.channelID) {
                    field.Name = "channelID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ChannelID);
                    oprot.WriteFieldEnd();
                }
                if (SourceComponentID != null && __isset.sourceComponentID) {
                    field.Name = "sourceComponentID";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(SourceComponentID);
                    oprot.WriteFieldEnd();
                }
                if (SourcePortID != null && __isset.sourcePortID) {
                    field.Name = "sourcePortID";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(SourcePortID);
                    oprot.WriteFieldEnd();
                }
                if (TargetComponentID != null && __isset.targetComponentID) {
                    field.Name = "targetComponentID";
                    field.Type = TType.String;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(TargetComponentID);
                    oprot.WriteFieldEnd();
                }
                if (TargetPortID != null && __isset.targetPortID) {
                    field.Name = "targetPortID";
                    field.Type = TType.String;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(TargetPortID);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("InsertChannel_args(");
                sb.Append("ChannelID: ");
                sb.Append(ChannelID);
                sb.Append(",SourceComponentID: ");
                sb.Append(SourceComponentID);
                sb.Append(",SourcePortID: ");
                sb.Append(SourcePortID);
                sb.Append(",TargetComponentID: ");
                sb.Append(TargetComponentID);
                sb.Append(",TargetPortID: ");
                sb.Append(TargetPortID);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class InsertChannel_result : TBase {
            private AsapiException _asapiEx;

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool asapiEx;
            }

            public InsertChannel_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("InsertChannel_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("InsertChannel_result(");
                sb.Append("AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class RemoveChannel_args : TBase {
            private string _channelID;

            public string ChannelID {
                get {
                    return _channelID;
                }
                set {
                    __isset.channelID = true;
                    this._channelID = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool channelID;
            }

            public RemoveChannel_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ChannelID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("RemoveChannel_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ChannelID != null && __isset.channelID) {
                    field.Name = "channelID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ChannelID);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("RemoveChannel_args(");
                sb.Append("ChannelID: ");
                sb.Append(ChannelID);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class RemoveChannel_result : TBase {
            private AsapiException _asapiEx;

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool asapiEx;
            }

            public RemoveChannel_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("RemoveChannel_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("RemoveChannel_result(");
                sb.Append("AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetComponentPropertyKeys_args : TBase {
            private string _componentID;

            public string ComponentID {
                get {
                    return _componentID;
                }
                set {
                    __isset.componentID = true;
                    this._componentID = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool componentID;
            }

            public GetComponentPropertyKeys_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetComponentPropertyKeys_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ComponentID != null && __isset.componentID) {
                    field.Name = "componentID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ComponentID);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetComponentPropertyKeys_args(");
                sb.Append("ComponentID: ");
                sb.Append(ComponentID);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetComponentPropertyKeys_result : TBase {
            private List<string> _success;

            public List<string> Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
            }

            public GetComponentPropertyKeys_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.List) {
                                {
                                    Success = new List<string>();
                                    TList _list24 = iprot.ReadListBegin();
                                    for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {
                                        string _elem26 = null;
                                        _elem26 = iprot.ReadString();
                                        Success.Add(_elem26);
                                    }
                                    iprot.ReadListEnd();
                                }
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetComponentPropertyKeys_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter27 in Success) {
                                oprot.WriteString(_iter27);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetComponentPropertyKeys_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetComponentProperty_args : TBase {
            private string _componentID;
            private string _key;

            public string ComponentID {
                get {
                    return _componentID;
                }
                set {
                    __isset.componentID = true;
                    this._componentID = value;
                }
            }

            public string Key {
                get {
                    return _key;
                }
                set {
                    __isset.key = true;
                    this._key = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool componentID;
                public bool key;
            }

            public GetComponentProperty_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String) {
                                Key = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetComponentProperty_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ComponentID != null && __isset.componentID) {
                    field.Name = "componentID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ComponentID);
                    oprot.WriteFieldEnd();
                }
                if (Key != null && __isset.key) {
                    field.Name = "key";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Key);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetComponentProperty_args(");
                sb.Append("ComponentID: ");
                sb.Append(ComponentID);
                sb.Append(",Key: ");
                sb.Append(Key);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetComponentProperty_result : TBase {
            private string _success;

            public string Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
            }

            public GetComponentProperty_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.String) {
                                Success = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetComponentProperty_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetComponentProperty_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class SetComponentProperty_args : TBase {
            private string _componentID;
            private string _key;
            private string _value;

            public string ComponentID {
                get {
                    return _componentID;
                }
                set {
                    __isset.componentID = true;
                    this._componentID = value;
                }
            }

            public string Key {
                get {
                    return _key;
                }
                set {
                    __isset.key = true;
                    this._key = value;
                }
            }

            public string Value {
                get {
                    return _value;
                }
                set {
                    __isset.value = true;
                    this._value = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool componentID;
                public bool key;
                public bool value;
            }

            public SetComponentProperty_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String) {
                                Key = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String) {
                                Value = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("SetComponentProperty_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ComponentID != null && __isset.componentID) {
                    field.Name = "componentID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ComponentID);
                    oprot.WriteFieldEnd();
                }
                if (Key != null && __isset.key) {
                    field.Name = "key";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Key);
                    oprot.WriteFieldEnd();
                }
                if (Value != null && __isset.value) {
                    field.Name = "value";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Value);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("SetComponentProperty_args(");
                sb.Append("ComponentID: ");
                sb.Append(ComponentID);
                sb.Append(",Key: ");
                sb.Append(Key);
                sb.Append(",Value: ");
                sb.Append(Value);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class SetComponentProperty_result : TBase {
            private string _success;

            public string Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
            }

            public SetComponentProperty_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.String) {
                                Success = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("SetComponentProperty_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("SetComponentProperty_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetPortPropertyKeys_args : TBase {
            private string _componentID;
            private string _portID;

            public string ComponentID {
                get {
                    return _componentID;
                }
                set {
                    __isset.componentID = true;
                    this._componentID = value;
                }
            }

            public string PortID {
                get {
                    return _portID;
                }
                set {
                    __isset.portID = true;
                    this._portID = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool componentID;
                public bool portID;
            }

            public GetPortPropertyKeys_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String) {
                                PortID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetPortPropertyKeys_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ComponentID != null && __isset.componentID) {
                    field.Name = "componentID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ComponentID);
                    oprot.WriteFieldEnd();
                }
                if (PortID != null && __isset.portID) {
                    field.Name = "portID";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(PortID);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetPortPropertyKeys_args(");
                sb.Append("ComponentID: ");
                sb.Append(ComponentID);
                sb.Append(",PortID: ");
                sb.Append(PortID);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetPortPropertyKeys_result : TBase {
            private List<string> _success;

            public List<string> Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
            }

            public GetPortPropertyKeys_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.List) {
                                {
                                    Success = new List<string>();
                                    TList _list28 = iprot.ReadListBegin();
                                    for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {
                                        string _elem30 = null;
                                        _elem30 = iprot.ReadString();
                                        Success.Add(_elem30);
                                    }
                                    iprot.ReadListEnd();
                                }
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetPortPropertyKeys_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter31 in Success) {
                                oprot.WriteString(_iter31);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetPortPropertyKeys_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetPortProperty_args : TBase {
            private string _componentID;
            private string _portID;
            private string _key;

            public string ComponentID {
                get {
                    return _componentID;
                }
                set {
                    __isset.componentID = true;
                    this._componentID = value;
                }
            }

            public string PortID {
                get {
                    return _portID;
                }
                set {
                    __isset.portID = true;
                    this._portID = value;
                }
            }

            public string Key {
                get {
                    return _key;
                }
                set {
                    __isset.key = true;
                    this._key = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool componentID;
                public bool portID;
                public bool key;
            }

            public GetPortProperty_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String) {
                                PortID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String) {
                                Key = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetPortProperty_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ComponentID != null && __isset.componentID) {
                    field.Name = "componentID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ComponentID);
                    oprot.WriteFieldEnd();
                }
                if (PortID != null && __isset.portID) {
                    field.Name = "portID";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(PortID);
                    oprot.WriteFieldEnd();
                }
                if (Key != null && __isset.key) {
                    field.Name = "key";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Key);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetPortProperty_args(");
                sb.Append("ComponentID: ");
                sb.Append(ComponentID);
                sb.Append(",PortID: ");
                sb.Append(PortID);
                sb.Append(",Key: ");
                sb.Append(Key);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetPortProperty_result : TBase {
            private string _success;

            public string Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
            }

            public GetPortProperty_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.String) {
                                Success = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetPortProperty_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetPortProperty_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class SetPortProperty_args : TBase {
            private string _componentID;
            private string _portID;
            private string _key;
            private string _value;

            public string ComponentID {
                get {
                    return _componentID;
                }
                set {
                    __isset.componentID = true;
                    this._componentID = value;
                }
            }

            public string PortID {
                get {
                    return _portID;
                }
                set {
                    __isset.portID = true;
                    this._portID = value;
                }
            }

            public string Key {
                get {
                    return _key;
                }
                set {
                    __isset.key = true;
                    this._key = value;
                }
            }

            public string Value {
                get {
                    return _value;
                }
                set {
                    __isset.value = true;
                    this._value = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool componentID;
                public bool portID;
                public bool key;
                public bool value;
            }

            public SetPortProperty_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String) {
                                PortID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String) {
                                Key = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.String) {
                                Value = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("SetPortProperty_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ComponentID != null && __isset.componentID) {
                    field.Name = "componentID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ComponentID);
                    oprot.WriteFieldEnd();
                }
                if (PortID != null && __isset.portID) {
                    field.Name = "portID";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(PortID);
                    oprot.WriteFieldEnd();
                }
                if (Key != null && __isset.key) {
                    field.Name = "key";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Key);
                    oprot.WriteFieldEnd();
                }
                if (Value != null && __isset.value) {
                    field.Name = "value";
                    field.Type = TType.String;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Value);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("SetPortProperty_args(");
                sb.Append("ComponentID: ");
                sb.Append(ComponentID);
                sb.Append(",PortID: ");
                sb.Append(PortID);
                sb.Append(",Key: ");
                sb.Append(Key);
                sb.Append(",Value: ");
                sb.Append(Value);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class SetPortProperty_result : TBase {
            private string _success;

            public string Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
            }

            public SetPortProperty_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.String) {
                                Success = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("SetPortProperty_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("SetPortProperty_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetChannelPropertyKeys_args : TBase {
            private string _channelID;

            public string ChannelID {
                get {
                    return _channelID;
                }
                set {
                    __isset.channelID = true;
                    this._channelID = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool channelID;
            }

            public GetChannelPropertyKeys_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ChannelID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetChannelPropertyKeys_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ChannelID != null && __isset.channelID) {
                    field.Name = "channelID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ChannelID);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetChannelPropertyKeys_args(");
                sb.Append("ChannelID: ");
                sb.Append(ChannelID);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetChannelPropertyKeys_result : TBase {
            private List<string> _success;

            public List<string> Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
            }

            public GetChannelPropertyKeys_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.List) {
                                {
                                    Success = new List<string>();
                                    TList _list32 = iprot.ReadListBegin();
                                    for (int _i33 = 0; _i33 < _list32.Count; ++_i33) {
                                        string _elem34 = null;
                                        _elem34 = iprot.ReadString();
                                        Success.Add(_elem34);
                                    }
                                    iprot.ReadListEnd();
                                }
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetChannelPropertyKeys_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter35 in Success) {
                                oprot.WriteString(_iter35);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetChannelPropertyKeys_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetChannelProperty_args : TBase {
            private string _channelID;
            private string _key;

            public string ChannelID {
                get {
                    return _channelID;
                }
                set {
                    __isset.channelID = true;
                    this._channelID = value;
                }
            }

            public string Key {
                get {
                    return _key;
                }
                set {
                    __isset.key = true;
                    this._key = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool channelID;
                public bool key;
            }

            public GetChannelProperty_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ChannelID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String) {
                                Key = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetChannelProperty_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ChannelID != null && __isset.channelID) {
                    field.Name = "channelID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ChannelID);
                    oprot.WriteFieldEnd();
                }
                if (Key != null && __isset.key) {
                    field.Name = "key";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Key);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetChannelProperty_args(");
                sb.Append("ChannelID: ");
                sb.Append(ChannelID);
                sb.Append(",Key: ");
                sb.Append(Key);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class GetChannelProperty_result : TBase {
            private string _success;

            public string Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
            }

            public GetChannelProperty_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.String) {
                                Success = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("GetChannelProperty_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("GetChannelProperty_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class SetChannelProperty_args : TBase {
            private string _channelID;
            private string _key;
            private string _value;

            public string ChannelID {
                get {
                    return _channelID;
                }
                set {
                    __isset.channelID = true;
                    this._channelID = value;
                }
            }

            public string Key {
                get {
                    return _key;
                }
                set {
                    __isset.key = true;
                    this._key = value;
                }
            }

            public string Value {
                get {
                    return _value;
                }
                set {
                    __isset.value = true;
                    this._value = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool channelID;
                public bool key;
                public bool value;
            }

            public SetChannelProperty_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ChannelID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String) {
                                Key = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String) {
                                Value = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("SetChannelProperty_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ChannelID != null && __isset.channelID) {
                    field.Name = "channelID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ChannelID);
                    oprot.WriteFieldEnd();
                }
                if (Key != null && __isset.key) {
                    field.Name = "key";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Key);
                    oprot.WriteFieldEnd();
                }
                if (Value != null && __isset.value) {
                    field.Name = "value";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Value);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("SetChannelProperty_args(");
                sb.Append("ChannelID: ");
                sb.Append(ChannelID);
                sb.Append(",Key: ");
                sb.Append(Key);
                sb.Append(",Value: ");
                sb.Append(Value);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class SetChannelProperty_result : TBase {
            private string _success;

            public string Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
            }

            public SetChannelProperty_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.String) {
                                Success = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("SetChannelProperty_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("SetChannelProperty_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class RegisterRemoteConsumer_args : TBase {
            private string _sourceComponentID;
            private string _sourceOutputPortID;

            public string SourceComponentID {
                get {
                    return _sourceComponentID;
                }
                set {
                    __isset.sourceComponentID = true;
                    this._sourceComponentID = value;
                }
            }

            public string SourceOutputPortID {
                get {
                    return _sourceOutputPortID;
                }
                set {
                    __isset.sourceOutputPortID = true;
                    this._sourceOutputPortID = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool sourceComponentID;
                public bool sourceOutputPortID;
            }

            public RegisterRemoteConsumer_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                SourceComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String) {
                                SourceOutputPortID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("RegisterRemoteConsumer_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (SourceComponentID != null && __isset.sourceComponentID) {
                    field.Name = "sourceComponentID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(SourceComponentID);
                    oprot.WriteFieldEnd();
                }
                if (SourceOutputPortID != null && __isset.sourceOutputPortID) {
                    field.Name = "sourceOutputPortID";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(SourceOutputPortID);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("RegisterRemoteConsumer_args(");
                sb.Append("SourceComponentID: ");
                sb.Append(SourceComponentID);
                sb.Append(",SourceOutputPortID: ");
                sb.Append(SourceOutputPortID);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class RegisterRemoteConsumer_result : TBase {
            private string _success;
            private AsapiException _asapiEx;

            public string Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
                public bool asapiEx;
            }

            public RegisterRemoteConsumer_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.String) {
                                Success = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("RegisterRemoteConsumer_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                } else if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("RegisterRemoteConsumer_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class UnregisterRemoteConsumer_args : TBase {
            private string _remoteConsumerID;

            public string RemoteConsumerID {
                get {
                    return _remoteConsumerID;
                }
                set {
                    __isset.remoteConsumerID = true;
                    this._remoteConsumerID = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool remoteConsumerID;
            }

            public UnregisterRemoteConsumer_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                RemoteConsumerID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("UnregisterRemoteConsumer_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (RemoteConsumerID != null && __isset.remoteConsumerID) {
                    field.Name = "remoteConsumerID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(RemoteConsumerID);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("UnregisterRemoteConsumer_args(");
                sb.Append("RemoteConsumerID: ");
                sb.Append(RemoteConsumerID);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class UnregisterRemoteConsumer_result : TBase {
            private AsapiException _asapiEx;

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool asapiEx;
            }

            public UnregisterRemoteConsumer_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("UnregisterRemoteConsumer_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("UnregisterRemoteConsumer_result(");
                sb.Append("AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class RegisterRemoteProducer_args : TBase {
            private string _targetComponentID;
            private string _targetInputPortID;

            public string TargetComponentID {
                get {
                    return _targetComponentID;
                }
                set {
                    __isset.targetComponentID = true;
                    this._targetComponentID = value;
                }
            }

            public string TargetInputPortID {
                get {
                    return _targetInputPortID;
                }
                set {
                    __isset.targetInputPortID = true;
                    this._targetInputPortID = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool targetComponentID;
                public bool targetInputPortID;
            }

            public RegisterRemoteProducer_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                TargetComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String) {
                                TargetInputPortID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("RegisterRemoteProducer_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (TargetComponentID != null && __isset.targetComponentID) {
                    field.Name = "targetComponentID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(TargetComponentID);
                    oprot.WriteFieldEnd();
                }
                if (TargetInputPortID != null && __isset.targetInputPortID) {
                    field.Name = "targetInputPortID";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(TargetInputPortID);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("RegisterRemoteProducer_args(");
                sb.Append("TargetComponentID: ");
                sb.Append(TargetComponentID);
                sb.Append(",TargetInputPortID: ");
                sb.Append(TargetInputPortID);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class RegisterRemoteProducer_result : TBase {
            private string _success;
            private AsapiException _asapiEx;

            public string Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
                public bool asapiEx;
            }

            public RegisterRemoteProducer_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.String) {
                                Success = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("RegisterRemoteProducer_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                } else if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("RegisterRemoteProducer_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class UnregisterRemoteProducer_args : TBase {
            private string _remoteProducerID;

            public string RemoteProducerID {
                get {
                    return _remoteProducerID;
                }
                set {
                    __isset.remoteProducerID = true;
                    this._remoteProducerID = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool remoteProducerID;
            }

            public UnregisterRemoteProducer_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                RemoteProducerID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("UnregisterRemoteProducer_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (RemoteProducerID != null && __isset.remoteProducerID) {
                    field.Name = "remoteProducerID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(RemoteProducerID);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("UnregisterRemoteProducer_args(");
                sb.Append("RemoteProducerID: ");
                sb.Append(RemoteProducerID);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class UnregisterRemoteProducer_result : TBase {
            private AsapiException _asapiEx;

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool asapiEx;
            }

            public UnregisterRemoteProducer_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("UnregisterRemoteProducer_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("UnregisterRemoteProducer_result(");
                sb.Append("AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class PollData_args : TBase {
            private string _courceComponentID;
            private string _sourceOutputPortID;

            public string CourceComponentID {
                get {
                    return _courceComponentID;
                }
                set {
                    __isset.courceComponentID = true;
                    this._courceComponentID = value;
                }
            }

            public string SourceOutputPortID {
                get {
                    return _sourceOutputPortID;
                }
                set {
                    __isset.sourceOutputPortID = true;
                    this._sourceOutputPortID = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool courceComponentID;
                public bool sourceOutputPortID;
            }

            public PollData_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                CourceComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String) {
                                SourceOutputPortID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("PollData_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (CourceComponentID != null && __isset.courceComponentID) {
                    field.Name = "courceComponentID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(CourceComponentID);
                    oprot.WriteFieldEnd();
                }
                if (SourceOutputPortID != null && __isset.sourceOutputPortID) {
                    field.Name = "sourceOutputPortID";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(SourceOutputPortID);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("PollData_args(");
                sb.Append("CourceComponentID: ");
                sb.Append(CourceComponentID);
                sb.Append(",SourceOutputPortID: ");
                sb.Append(SourceOutputPortID);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class PollData_result : TBase {
            private byte[] _success;
            private AsapiException _asapiEx;

            public byte[] Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
                public bool asapiEx;
            }

            public PollData_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.String) {
                                Success = iprot.ReadBinary();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("PollData_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteBinary(Success);
                        oprot.WriteFieldEnd();
                    }
                } else if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("PollData_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class SendData_args : TBase {
            private string _targetComponentID;
            private string _targetInputPortID;
            private byte[] _data;

            public string TargetComponentID {
                get {
                    return _targetComponentID;
                }
                set {
                    __isset.targetComponentID = true;
                    this._targetComponentID = value;
                }
            }

            public string TargetInputPortID {
                get {
                    return _targetInputPortID;
                }
                set {
                    __isset.targetInputPortID = true;
                    this._targetInputPortID = value;
                }
            }

            public byte[] Data {
                get {
                    return _data;
                }
                set {
                    __isset.data = true;
                    this._data = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool targetComponentID;
                public bool targetInputPortID;
                public bool data;
            }

            public SendData_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                TargetComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String) {
                                TargetInputPortID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String) {
                                Data = iprot.ReadBinary();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("SendData_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (TargetComponentID != null && __isset.targetComponentID) {
                    field.Name = "targetComponentID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(TargetComponentID);
                    oprot.WriteFieldEnd();
                }
                if (TargetInputPortID != null && __isset.targetInputPortID) {
                    field.Name = "targetInputPortID";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(TargetInputPortID);
                    oprot.WriteFieldEnd();
                }
                if (Data != null && __isset.data) {
                    field.Name = "data";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(Data);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("SendData_args(");
                sb.Append("TargetComponentID: ");
                sb.Append(TargetComponentID);
                sb.Append(",TargetInputPortID: ");
                sb.Append(TargetInputPortID);
                sb.Append(",Data: ");
                sb.Append(Data);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class SendData_result : TBase {
            private AsapiException _asapiEx;

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool asapiEx;
            }

            public SendData_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("SendData_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("SendData_result(");
                sb.Append("AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class RegisterLogListener_args : TBase {

            public RegisterLogListener_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("RegisterLogListener_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("RegisterLogListener_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class RegisterLogListener_result : TBase {
            private string _success;

            public string Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
            }

            public RegisterLogListener_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.String) {
                                Success = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("RegisterLogListener_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("RegisterLogListener_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class UnregisterLogListener_args : TBase {
            private string _logListenerID;

            public string LogListenerID {
                get {
                    return _logListenerID;
                }
                set {
                    __isset.logListenerID = true;
                    this._logListenerID = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool logListenerID;
            }

            public UnregisterLogListener_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                LogListenerID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("UnregisterLogListener_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (LogListenerID != null && __isset.logListenerID) {
                    field.Name = "logListenerID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(LogListenerID);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("UnregisterLogListener_args(");
                sb.Append("LogListenerID: ");
                sb.Append(LogListenerID);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class UnregisterLogListener_result : TBase {

            public UnregisterLogListener_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("UnregisterLogListener_result");
                oprot.WriteStructBegin(struc);

                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("UnregisterLogListener_result(");
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class storeModel_args : TBase {
            private string _modelInXML;
            private string _filename;

            public string ModelInXML {
                get {
                    return _modelInXML;
                }
                set {
                    __isset.modelInXML = true;
                    this._modelInXML = value;
                }
            }

            public string Filename {
                get {
                    return _filename;
                }
                set {
                    __isset.filename = true;
                    this._filename = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool modelInXML;
                public bool filename;
            }

            public storeModel_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ModelInXML = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String) {
                                Filename = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("storeModel_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ModelInXML != null && __isset.modelInXML) {
                    field.Name = "modelInXML";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ModelInXML);
                    oprot.WriteFieldEnd();
                }
                if (Filename != null && __isset.filename) {
                    field.Name = "filename";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Filename);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("storeModel_args(");
                sb.Append("ModelInXML: ");
                sb.Append(ModelInXML);
                sb.Append(",Filename: ");
                sb.Append(Filename);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class storeModel_result : TBase {
            private AsapiException _asapiEx;

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool asapiEx;
            }

            public storeModel_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("storeModel_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("storeModel_result(");
                sb.Append("AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class deleteModelFile_args : TBase {
            private string _filename;

            public string Filename {
                get {
                    return _filename;
                }
                set {
                    __isset.filename = true;
                    this._filename = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool filename;
            }

            public deleteModelFile_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                Filename = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("deleteModelFile_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Filename != null && __isset.filename) {
                    field.Name = "filename";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Filename);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("deleteModelFile_args(");
                sb.Append("Filename: ");
                sb.Append(Filename);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class deleteModelFile_result : TBase {
            private bool _success;
            private AsapiException _asapiEx;

            public bool Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
                public bool asapiEx;
            }

            public deleteModelFile_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.Bool) {
                                Success = iprot.ReadBool();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("deleteModelFile_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                } else if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("deleteModelFile_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class listAllStoredModels_args : TBase {

            public listAllStoredModels_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("listAllStoredModels_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("listAllStoredModels_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class listAllStoredModels_result : TBase {
            private List<string> _success;
            private AsapiException _asapiEx;

            public List<string> Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
                public bool asapiEx;
            }

            public listAllStoredModels_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.List) {
                                {
                                    Success = new List<string>();
                                    TList _list36 = iprot.ReadListBegin();
                                    for (int _i37 = 0; _i37 < _list36.Count; ++_i37) {
                                        string _elem38 = null;
                                        _elem38 = iprot.ReadString();
                                        Success.Add(_elem38);
                                    }
                                    iprot.ReadListEnd();
                                }
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("listAllStoredModels_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter39 in Success) {
                                oprot.WriteString(_iter39);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                } else if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("listAllStoredModels_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class getModelFromFile_args : TBase {
            private string _filename;

            public string Filename {
                get {
                    return _filename;
                }
                set {
                    __isset.filename = true;
                    this._filename = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool filename;
            }

            public getModelFromFile_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                Filename = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("getModelFromFile_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Filename != null && __isset.filename) {
                    field.Name = "filename";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Filename);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("getModelFromFile_args(");
                sb.Append("Filename: ");
                sb.Append(Filename);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class getModelFromFile_result : TBase {
            private string _success;
            private AsapiException _asapiEx;

            public string Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
                public bool asapiEx;
            }

            public getModelFromFile_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.String) {
                                Success = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("getModelFromFile_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                } else if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("getModelFromFile_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class getLogFile_args : TBase {

            public getLogFile_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("getLogFile_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("getLogFile_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class getLogFile_result : TBase {
            private string _success;

            public string Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
            }

            public getLogFile_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.String) {
                                Success = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("getLogFile_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("getLogFile_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class QueryStatus_args : TBase {
            private bool _fullList;

            public bool FullList {
                get {
                    return _fullList;
                }
                set {
                    __isset.fullList = true;
                    this._fullList = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool fullList;
            }

            public QueryStatus_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.Bool) {
                                FullList = iprot.ReadBool();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("QueryStatus_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (__isset.fullList) {
                    field.Name = "fullList";
                    field.Type = TType.Bool;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(FullList);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("QueryStatus_args(");
                sb.Append("FullList: ");
                sb.Append(FullList);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class QueryStatus_result : TBase {
            private List<StatusObject> _success;

            public List<StatusObject> Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
            }

            public QueryStatus_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.List) {
                                {
                                    Success = new List<StatusObject>();
                                    TList _list40 = iprot.ReadListBegin();
                                    for (int _i41 = 0; _i41 < _list40.Count; ++_i41) {
                                        StatusObject _elem42 = new StatusObject();
                                        _elem42 = new StatusObject();
                                        _elem42.Read(iprot);
                                        Success.Add(_elem42);
                                    }
                                    iprot.ReadListEnd();
                                }
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("QueryStatus_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                            foreach (StatusObject _iter43 in Success) {
                                _iter43.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("QueryStatus_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class getRuntimePropertyList_args : TBase {
            private string _componentID;
            private string _key;

            public string ComponentID {
                get {
                    return _componentID;
                }
                set {
                    __isset.componentID = true;
                    this._componentID = value;
                }
            }

            public string Key {
                get {
                    return _key;
                }
                set {
                    __isset.key = true;
                    this._key = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool componentID;
                public bool key;
            }

            public getRuntimePropertyList_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 1:
                            if (field.Type == TType.String) {
                                ComponentID = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String) {
                                Key = iprot.ReadString();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("getRuntimePropertyList_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (ComponentID != null && __isset.componentID) {
                    field.Name = "componentID";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(ComponentID);
                    oprot.WriteFieldEnd();
                }
                if (Key != null && __isset.key) {
                    field.Name = "key";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Key);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("getRuntimePropertyList_args(");
                sb.Append("ComponentID: ");
                sb.Append(ComponentID);
                sb.Append(",Key: ");
                sb.Append(Key);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class getRuntimePropertyList_result : TBase {
            private List<string> _success;
            private AsapiException _asapiEx;

            public List<string> Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
                public bool asapiEx;
            }

            public getRuntimePropertyList_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.List) {
                                {
                                    Success = new List<string>();
                                    TList _list44 = iprot.ReadListBegin();
                                    for (int _i45 = 0; _i45 < _list44.Count; ++_i45) {
                                        string _elem46 = null;
                                        _elem46 = iprot.ReadString();
                                        Success.Add(_elem46);
                                    }
                                    iprot.ReadListEnd();
                                }
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("getRuntimePropertyList_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter47 in Success) {
                                oprot.WriteString(_iter47);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                } else if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("getRuntimePropertyList_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class getBundleDescriptors_args : TBase {

            public getBundleDescriptors_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("getBundleDescriptors_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("getBundleDescriptors_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class getBundleDescriptors_result : TBase {
            private List<string> _success;
            private AsapiException _asapiEx;

            public List<string> Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
                public bool asapiEx;
            }

            public getBundleDescriptors_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.List) {
                                {
                                    Success = new List<string>();
                                    TList _list48 = iprot.ReadListBegin();
                                    for (int _i49 = 0; _i49 < _list48.Count; ++_i49) {
                                        string _elem50 = null;
                                        _elem50 = iprot.ReadString();
                                        Success.Add(_elem50);
                                    }
                                    iprot.ReadListEnd();
                                }
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("getBundleDescriptors_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    if (Success != null) {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter51 in Success) {
                                oprot.WriteString(_iter51);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                } else if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("getBundleDescriptors_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class Ping_args : TBase {

            public Ping_args() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("Ping_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("Ping_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class Ping_result : TBase {
            private int _success;
            private AsapiException _asapiEx;

            public int Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public AsapiException AsapiEx {
                get {
                    return _asapiEx;
                }
                set {
                    __isset.asapiEx = true;
                    this._asapiEx = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset {
                public bool success;
                public bool asapiEx;
            }

            public Ping_result() {
            }

            public void Read(TProtocol iprot) {
                TField field;
                iprot.ReadStructBegin();
                while (true) {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop) {
                        break;
                    }
                    switch (field.ID) {
                        case 0:
                            if (field.Type == TType.I32) {
                                Success = iprot.ReadI32();
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct) {
                                AsapiEx = new AsapiException();
                                AsapiEx.Read(iprot);
                            } else {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot) {
                TStruct struc = new TStruct("Ping_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success) {
                    field.Name = "Success";
                    field.Type = TType.I32;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Success);
                    oprot.WriteFieldEnd();
                } else if (this.__isset.asapiEx) {
                    if (AsapiEx != null) {
                        field.Name = "AsapiEx";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        AsapiEx.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString() {
                StringBuilder sb = new StringBuilder("Ping_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(",AsapiEx: ");
                sb.Append(AsapiEx == null ? "<null>" : AsapiEx.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }

    }
}
